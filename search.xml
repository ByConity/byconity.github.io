<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hash</title>
      <link href="/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/hash/"/>
      <url>/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/hash/</url>
      
        <content type="html"><![CDATA[<h1 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h1><blockquote><p>Notice:<br>Some of the examples below are referenced from <a href="https://clickhouse.com/docs/en/sql-reference/functions/">ClickHouse Documentation</a> but have been adapted and modified to work in ByteHouse.</p></blockquote><h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><p>Calculates the MD5 from a string and returns the resulting set of bytes as FixedString(16).</p><p>If you do not need MD5 in particular, but you need a decent cryptographic 128-bit hash, use the [sipHash128] function instead.</p><p>If you want to get the same result as output by the md5sum utility, use lower(hex(MD5(s))).</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select MD5(string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – A string</li></ul><p><strong>Returned value</strong></p><ul><li>The Value of MD5.</li></ul><p>Type: FixedString(16)</p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select MD5(&#x27;test the MD5 function&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─MD5(&#x27;test the MD5 function&#x27;)─┐</span><br><span class="line">│ ोNiq@5G:a               │</span><br><span class="line">└──────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="SHA1"><a href="#SHA1" class="headerlink" title="SHA1"></a>SHA1</h2><p>Calculates SHA-1, SHA-224, or SHA-256 from a string and returns the resulting set of bytes as FixedString(20), FixedString(28), or FixedString(32).</p><p>The function works fairly slowly (SHA-1 processes about 5 million short strings per second per processor core, while SHA-224 and SHA-256 process about 2.2 million).</p><p>We recommend using this function only in cases when you need a specific hash function and you can’t select it.</p><p>Even in these cases, we recommend applying the function offline and pre-calculating values when inserting them into the table, instead of applying it in SELECTS.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHA1(string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – A string.</li></ul><p><strong>Returned value</strong></p><ul><li>SHA-1 Encrypted string in <code>FixedString(20)</code>.</li></ul><p>Type: <code>FixedString(20)</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT base64Encode(toString(SHA1(&#x27;SAH1 test&#x27;)));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─base64Encode(toString(SHA1(&#x27;SAH1 test&#x27;)))─┐</span><br><span class="line">│ x5bDmJsgE+YzTir1+BPt4S98AEc=              │</span><br><span class="line">└───────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="SHA224"><a href="#SHA224" class="headerlink" title="SHA224"></a>SHA224</h2><p>Calculates SHA-1, SHA-224, or SHA-256 from a string and returns the resulting set of bytes as FixedString(20), FixedString(28), or FixedString(32).</p><p>The function works fairly slowly (SHA-1 processes about 5 million short strings per second per processor core, while SHA-224 and SHA-256 process about 2.2 million).</p><p>We recommend using this function only in cases when you need a specific hash function and you can’t select it.</p><p>Even in these cases, we recommend applying the function offline and pre-calculating values when inserting them into the table, instead of applying it in SELECTS.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHA224(string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – A string.</li></ul><p><strong>Returned value</strong></p><ul><li>SHA-224 Encrypted string in <code>FixedString(28)</code>.</li></ul><p>Type: <code>FixedString(28)</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT base64Encode(toString(SHA224(&#x27;SAH224 test&#x27;)));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─base64Encode(toString(SHA224(&#x27;SAH224 test&#x27;)))─┐</span><br><span class="line">│ eptUvYjJG4AeQfQI9kZ/qViECg0gRbuwPJ5UlA==      │</span><br><span class="line">└───────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="SHA256"><a href="#SHA256" class="headerlink" title="SHA256"></a>SHA256</h2><p>Calculates SHA-1, SHA-224, or SHA-256 from a string and returns the resulting set of bytes as FixedString(20), FixedString(28), or FixedString(32).</p><p>The function works fairly slowly (SHA-1 processes about 5 million short strings per second per processor core, while SHA-224 and SHA-256 process about 2.2 million).</p><p>We recommend using this function only in cases when you need a specific hash function and you can’t select it.</p><p>Even in these cases, we recommend applying the function offline and pre-calculating values when inserting them into the table, instead of applying it in SELECTS.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHA256(string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – A string.</li></ul><p><strong>Returned value</strong></p><ul><li>SHA-256 Encrypted string in <code>FixedString(32)</code>.</li></ul><p>Type: <code>FixedString(32)</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT base64Encode(toString(SHA256(&#x27;SAH256 test&#x27;)));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─base64Encode(toString(SHA256(&#x27;SAH256 test&#x27;)))─┐</span><br><span class="line">│ I+OvFrLmD2Ofq1xBuFmKYCuB6iSg5/OrhcIbI5Qezs8=  │</span><br><span class="line">└───────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="URLHash"><a href="#URLHash" class="headerlink" title="URLHash"></a>URLHash</h2><p>A fast, decent-quality non-cryptographic hash function for a string obtained from a URL using some type of normalization.</p><p><code>URLHash(s)</code> – Calculates a hash from a string without one of the trailing symbols <code>/</code> , <code>?</code> or <code>#</code> at the end, if present.</p><p><code>URLHash(s, N)</code> – Calculates a hash from a string up to the N level in the URL hierarchy, without one of the trailing symbols <code>/</code> , <code>?</code> or <code>#</code> at the end, if present.</p><p>Levels are the same as in URLHierarchy. This function is specific to Yandex.Metrica.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">URLHash(s,N)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>s</code> – The URL string.</li><li><code>N</code> – The number of level in UInt.</li></ul><p><strong>Returned value</strong></p><ul><li>The hash value in UInt64</li></ul><p>Type: <code>Uint64</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT URLHash(&#x27;https://www.bytedance.com/en/news&#x27;,2);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─URLHash(&#x27;https://www.bytedance.com/en/news&#x27;, 2)─┐</span><br><span class="line">│ 11898456355197509749                            │</span><br><span class="line">└─────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="cityHash64"><a href="#cityHash64" class="headerlink" title="cityHash64"></a>cityHash64</h2><p>Produces a 64-bit <a href="https://github.com/google/cityhash">CityHash</a> hash value.</p><p>This is a fast non-cryptographic hash function. It uses the CityHash algorithm for string parameters and implementation-specific fast non-cryptographic hash function for parameters with other data types. The function uses the CityHash combinator to get the final results.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cityHash64(par1,...)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><p>The function takes a variable number of input parameters. Arguments can be any of the <a href="https://bytedance.feishu.cn/sql-reference/data-types/index.md">supported data types</a> .</p><p><strong>Returned Value</strong></p><p>A <code>UInt64</code> data type hash value.</p><p>Type:<code>UInt64</code></p><p><strong>Examples</strong></p><p>Call example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT cityHash64(array(&#x27;e&#x27;,&#x27;x&#x27;,&#x27;a&#x27;), &#x27;mple&#x27;, 10, toDateTime(&#x27;2019-06-15 23:00:00&#x27;)) AS CityHash, toTypeName(CityHash) AS type;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─CityHash─────────────┬─type───┐</span><br><span class="line">│ 12072650598913549138 │ UInt64 │</span><br><span class="line">└──────────────────────┴────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>The following example shows how to compute the checksum of the entire table with accuracy up to the row order:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT groupBitXor(cityHash64(*)) FROM table;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="farmHash64"><a href="#farmHash64" class="headerlink" title="farmHash64"></a>farmHash64</h2><p>Produces a 64-bit [FarmHash] or Fingerprint value. <code>farmFingerprint64</code> is preferred for a stable and portable value.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">farmFingerprint64(par1, ...)</span><br><span class="line"></span><br><span class="line">farmHash64(par1, ...)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>These functions use the <code>Fingerprint64</code> and <code>Hash64</code> methods respectively from all [available methods] .</p><p><strong>Arguments</strong></p><p>The function takes a variable number of input parameters. Arguments can be any of the [supported data types].</p><p><strong>Returned Value</strong></p><p>An <code>UInt64</code> data type hash value.</p><p>Tyep:<code>UInt64</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT farmHash64(array(&#x27;e&#x27;,&#x27;x&#x27;,&#x27;a&#x27;), &#x27;mple&#x27;, 10, toDateTime(&#x27;2019-06-15 23:00:00&#x27;)) AS FarmHash, toTypeName(FarmHash) AS type;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─FarmHash─────────────┬─type───┐</span><br><span class="line">│ 17790458267262532859 │ UInt64 │</span><br><span class="line">└──────────────────────┴────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="gccMurmurHash"><a href="#gccMurmurHash" class="headerlink" title="gccMurmurHash"></a>gccMurmurHash</h2><p>Calculates a 64-bit <a href="https://github.com/aappleby/smhasher">MurmurHash2</a> hash value using the same hash seed as <a href="https://github.com/gcc-mirror/gcc/blob/41d6b10e96a1de98e90a7c0378437c3255814b16/libstdc++-v3/include/bits/functional_hash.h#L191">gcc</a> . It is portable between CLang and GCC builds.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gccMurmurHash(par1, ...)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>par1, ...</code> — A variable number of parameters that can be any of the [supported data types].</li></ul><p><strong>Returned value</strong></p><ul><li>Calculated hash value.</li></ul><p>Type: <code>UInt64</code>.</p><p><strong>Example</strong></p><p>Query:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT gccMurmurHash(1, 2, 3) AS res1,gccMurmurHash((&#x27;a&#x27;, [1, 2, 3], 4, (4, [&#x27;foo&#x27;, &#x27;bar&#x27;], 1, (1, 2)))) AS res2;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─res1─────────────────┬─res2────────────────┐</span><br><span class="line">│ 12384823029245979431 │ 1188926775431157506 │</span><br><span class="line">└──────────────────────┴─────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="halfMD5"><a href="#halfMD5" class="headerlink" title="halfMD5"></a>halfMD5</h2><p>[Interprets] all the input parameters as strings and calculates the <a href="https://en.wikipedia.org/wiki/MD5">MD5</a> hash value for each of them. Then combines hashes, takes the first 8 bytes of the hash of the resulting string, and interprets them as <code>UInt64</code> in big-endian byte order.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">halfMD5(par1, ...)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>The function is relatively slow (5 million short strings per second per processor core).</p><p>Consider using the [sipHash64] function instead.</p><p><strong>Arguments</strong></p><p>The function takes a variable number of input parameters. Arguments can be any of the [supported data types].</p><p><strong>Returned Value</strong></p><p>An [UInt64] data type hash value.</p><p>Type: <code>Uini64</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT halfMD5(array(&#x27;e&#x27;,&#x27;x&#x27;,&#x27;a&#x27;), &#x27;mple&#x27;, 10, toDateTime(&#x27;2019-06-15 23:00:00&#x27;)) AS halfMD5hash, toTypeName(halfMD5hash) AS type;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─halfMD5hash────────┬─type───┐</span><br><span class="line">│ 186182704141653334 │ UInt64 │</span><br><span class="line">└────────────────────┴────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="hiveHash"><a href="#hiveHash" class="headerlink" title="hiveHash"></a>hiveHash</h2><p>Calculates <code>HiveHash</code> from a string.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT hiveHash(&#x27;&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>This is just [JavaHash] with zeroed out sign bit. This function is used in <a href="https://en.wikipedia.org/wiki/Apache_Hive">Apache Hive</a> for versions before 3.0. This hash function is neither fast nor having a good quality. The only reason to use it is when this algorithm is already used in another system and you have to calculate exactly the same result.</p><p><strong>Returned value</strong></p><p>A <code>Int32</code> data type hash value.</p><p>Type: <code>hiveHash</code> .</p><p><strong>Example</strong></p><p>Query:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT hiveHash(&#x27;Hello, world!&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─hiveHash(&#x27;Hello, world!&#x27;)─┐</span><br><span class="line">│ 267439093                 │</span><br><span class="line">└───────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="intHash32"><a href="#intHash32" class="headerlink" title="intHash32"></a>intHash32</h2><p>Calculates a 32-bit hash code from any type of integer.</p><p>This is a relatively fast non-cryptographic hash function of average quality for numbers.</p><p>TODO: need to re-confirm below sentences.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">intHash32(integer)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>integer</code> – The integer.</li></ul><p><strong>Returned value</strong></p><ul><li>32-bit hash code.</li></ul><p>Type:<code>UInt32</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT intHash32(12072650598913549138);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─intHash32(12072650598913549138)─┐</span><br><span class="line">│ 3406876673                      │</span><br><span class="line">└─────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="intHash64"><a href="#intHash64" class="headerlink" title="intHash64"></a>intHash64</h2><p>Calculates a 64-bit hash code from any type of integer.</p><p>It works faster than intHash32. Average quality.</p><p>TODO: need to re-confirm below sentences.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">intHash64(integer)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>integer</code> – The integer.</li></ul><p><strong>Returned value</strong></p><ul><li>64-bit hash code.</li></ul><p>Type:<code>UInt64</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT intHash64(12072650598913549138);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─intHash32(12072650598913549138)─┐</span><br><span class="line">│ 17337913903528382330            │</span><br><span class="line">└─────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="javaHash"><a href="#javaHash" class="headerlink" title="javaHash"></a>javaHash</h2><p>Calculates <a href="http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/478a4add975b/src/share/classes/java/lang/String.java#l1452">JavaHash</a> from a string. This hash function is neither fast nor having a good quality. The only reason to use it is when this algorithm is already used in another system and you have to calculate exactly the same result.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT javaHash(&#x27;&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li>A <code>string</code></li></ul><p><strong>Returned value</strong></p><ul><li>A <code>Int32</code> data type hash value.</li></ul><p><strong>Example</strong></p><p>Query:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT javaHash(&#x27;Hello, world!&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─javaHash(&#x27;Hello, world!&#x27;)─┐</span><br><span class="line">│ -1880044555               │</span><br><span class="line">└───────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="jumpConsistentHash"><a href="#jumpConsistentHash" class="headerlink" title="jumpConsistentHash"></a>jumpConsistentHash</h2><p>Calculates JumpConsistentHash form a UInt64.</p><p>Accepts two arguments: a <code>UInt64</code>-type key and the number of buckets. Returns <code>Int32</code>.</p><p>For more information, see the link: <a href="https://arxiv.org/pdf/1406.2294.pdf">JumpConsistentHash</a></p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JumpConsistentHash(key, buckets)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>key</code> – An <code>UInt64</code>- type key.</li><li><code>buckets</code> – A number of buckets.</li></ul><p><strong>Returned value</strong></p><ul><li>Result in <code>Int32</code>.</li></ul><p>Type：<code>Int32</code></p><p><strong>Example</strong></p><p>TODO: improve below example if necessary</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT jumpConsistentHash(18446744073709551615, 12);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─jumpConsistentHash(18446744073709551615, 12)─┐</span><br><span class="line">│ 10                                           │</span><br><span class="line">└──────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="metroHash64"><a href="#metroHash64" class="headerlink" title="metroHash64"></a>metroHash64</h2><p>Produces a 64-bit <a href="http://www.jandrewrogers.com/2015/05/27/metrohash/">MetroHash</a> hash value.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">metroHash64(par1, ...)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><p>The function takes a variable number of input parameters. Arguments can be any of the [supported data types] .</p><p><strong>Returned Value</strong></p><p>A [UInt64] data type hash value.</p><p>Type：<code>UInt64</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT metroHash64(array(&#x27;e&#x27;,&#x27;x&#x27;,&#x27;a&#x27;), &#x27;mple&#x27;, 10, toDateTime(&#x27;2019-06-15 23:00:00&#x27;)) AS MetroHash, toTypeName(MetroHash) AS type;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─MetroHash────────────┬─type───┐</span><br><span class="line">│ 14235658766382344533 │ UInt64 │</span><br><span class="line">└──────────────────────┴────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="murmurHash2-32"><a href="#murmurHash2-32" class="headerlink" title="murmurHash2_32"></a>murmurHash2_32</h2><p>Produces a <a href="https://github.com/aappleby/smhasher/">MurmurHash2</a> hash value.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">murmurHash2_32(par1, ...)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><p>Both functions take a variable number of input parameters. Arguments can be any of the [supported data types] .</p><p><strong>Returned Value</strong></p><ul><li>The <code>murmurHash2_32</code> function returns hash value having the [UInt32] data type.</li></ul><p>Type: <code>Uint32</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT murmurHash2_32(&#x27;test&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─murmurHash2_32(&#x27;test&#x27;)─┐</span><br><span class="line">│ 403862830              │</span><br><span class="line">└────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="murmurHash2-64"><a href="#murmurHash2-64" class="headerlink" title="murmurHash2_64"></a>murmurHash2_64</h2><p>Produces a <a href="https://github.com/aappleby/smhasher">MurmurHash2</a> hash value.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">murmurHash2_64(par1, ...)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><p>Both functions take a variable number of input parameters. Arguments can be any of the supported data types .</p><p><strong>Returned Value</strong></p><ul><li>The <code>murmurHash2_64</code> function returns hash value having the UInt64 data type.</li></ul><p>Type: <code>Uint64</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT murmurHash2_64(array(&#x27;e&#x27;,&#x27;x&#x27;,&#x27;a&#x27;), &#x27;mple&#x27;, 10, toDateTime(&#x27;2019-06-15 23:00:00&#x27;)) AS MurmurHash2, toTypeName(MurmurHash2) AS type;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─MurmurHash2──────────┬─type───┐</span><br><span class="line">│ 11832096901709403633 │ UInt64 │</span><br><span class="line">└──────────────────────┴────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="murmurHash3-128"><a href="#murmurHash3-128" class="headerlink" title="murmurHash3_128"></a>murmurHash3_128</h2><p>Produces a 128-bit <a href="https://github.com/aappleby/smhasher">MurmurHash3</a> hash value.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">murmurHash3_128( expr )</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>expr</code> — Expressions returning a String -type value.</li></ul><p><strong>Returned Value</strong></p><ul><li>A FixedString(16) data type hash value.</li></ul><p>Type: <code>FixedString(16)</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT hex(murmurHash3_128(&#x27;example_string&#x27;)) AS MurmurHash3, toTypeName(MurmurHash3) AS type;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─MurmurHash3──────────────────────┬─type───┐</span><br><span class="line">│ 368A1A311CB7342253354B548E7E7E71 │ String │</span><br><span class="line">└──────────────────────────────────┴────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="murmurHash3-32"><a href="#murmurHash3-32" class="headerlink" title="murmurHash3_32"></a>murmurHash3_32</h2><p>Produces a <a href="https://github.com/aappleby/smhasher">MurmurHash3</a> hash value.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">murmurHash3_32(par1, ...)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><p>Both functions take a variable number of input parameters. Arguments can be any of the supported data types .</p><p><strong>Returned Value</strong></p><ul><li>The <code>murmurHash3_32</code> function returns a UInt32 data type hash value.</li></ul><p>Type: <code>Uint32</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT murmurHash3_32(array(&#x27;e&#x27;,&#x27;x&#x27;,&#x27;a&#x27;), &#x27;mple&#x27;, 10, toDateTime(&#x27;2019-06-15 23:00:00&#x27;)) AS MurmurHash3, toTypeName(MurmurHash3) AS type;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─MurmurHash3─┬─type───┐</span><br><span class="line">│ 2152717     │ UInt32 │</span><br><span class="line">└─────────────┴────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="murmurHash3-64"><a href="#murmurHash3-64" class="headerlink" title="murmurHash3_64"></a>murmurHash3_64</h2><p>Produces a <a href="https://github.com/aappleby/smhasher">MurmurHash3</a> hash value.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">murmurHash3_64(par1, ...)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><p>Both functions take a variable number of input parameters. Arguments can be any of the supported data types .</p><p><strong>Returned Value</strong></p><ul><li>The <code>murmurHash3_64</code> function returns a UInt64 data type hash value.</li></ul><p>Type：<code>Uint64</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT murmurHash3_64(array(&#x27;e&#x27;,&#x27;x&#x27;,&#x27;a&#x27;), &#x27;mple&#x27;, 10, toDateTime(&#x27;2019-06-15 23:00:00&#x27;)) AS MurmurHash3, toTypeName(MurmurHash3) AS type;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─MurmurHash3──────────┬─type───┐</span><br><span class="line">│ 12344512753450997224 │ UInt64 │</span><br><span class="line">└──────────────────────┴────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="sipHash128"><a href="#sipHash128" class="headerlink" title="sipHash128"></a>sipHash128</h2><p>Calculates SipHash from a string.</p><p>Accepts a String-type argument. Returns FixedString(16).</p><p>Differs from sipHash64 in that the final xor-folding state is only done up to 128 bits.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sipHash128(par1,...)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><p>The function takes a variable number of input parameters. Arguments can be any of the supported data types .</p><p><strong>Returned Value</strong></p><p>A UInt64 data type hash value.</p><p>Type: <code>Uint64</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select sipHash128(&#x27;test sipHash128&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─sipHash128(&#x27;test sipHash128&#x27;)─┐</span><br><span class="line">│ av&#x27;&quot;?k:                       │</span><br><span class="line">└───────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="sipHash64"><a href="#sipHash64" class="headerlink" title="sipHash64"></a>sipHash64</h2><p>Produces a 64-bit <a href="https://github.com/veorq/SipHash/">SipHash</a> hash value.</p><p>This is a cryptographic hash function. It works at least three times faster than the MD5 function.</p><p>Function interprets all the input parameters as strings and calculates the hash value for each of them. Then combines hashes by the following algorithm:</p><ul><li>After hashing all the input parameters, the function gets the array of hashes.</li><li>Function takes the first and the second elements and calculates a hash for the array of them.</li><li>Then the function takes the hash value, calculated at the previous step, and the third element of the initial hash array, and calculates a hash for the array of them.</li><li>The previous step is repeated for all the remaining elements of the initial hash array.</li></ul><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sipHash64(par1,...)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><p>The function takes a variable number of input parameters. Arguments can be any of the supported data types .</p><p><strong>Returned Value</strong></p><p>A UInt64 data type hash value.</p><p>Type: <code>Uint64</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT sipHash64(array(&#x27;e&#x27;,&#x27;x&#x27;,&#x27;a&#x27;), &#x27;mple&#x27;, 10, toDateTime(&#x27;2019-06-15 23:00:00&#x27;)) AS SipHash, toTypeName(SipHash) AS type;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─SipHash──────────────┬─type───┐</span><br><span class="line">│ 13726873534472839665 │ UInt64 │</span><br><span class="line">└──────────────────────┴────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="xxHash32"><a href="#xxHash32" class="headerlink" title="xxHash32"></a>xxHash32</h2><p>Calculates <code>xxHash</code> from a string.</p><p><code>xxHash</code> is an extremely fast non-cryptographic hash algorithm, working at RAM speed limit.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT xxHash32(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>s</code> – The string.</li></ul><p><strong>Returned value</strong></p><p>A <code>Uint32</code> data type hash value.</p><p>Type: <code>UInt32</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT xxHash32(&#x27;Hello, world!&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─xxHash32(&#x27;Hello, world!&#x27;)─┐</span><br><span class="line">│ 834093149                 │</span><br><span class="line">└───────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>See Also</strong></p><ul><li><a href="http://cyan4973.github.io/xxHash/">xxHash</a> .</li></ul><h2 id="xxHash64"><a href="#xxHash64" class="headerlink" title="xxHash64"></a>xxHash64</h2><p>Calculates <code>xxHash</code> from a string.</p><p><code>xxHash</code> is an extremely fast non-cryptographic hash algorithm, working at RAM speed limit.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT xxHash64(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>s</code> – The string.</li></ul><p><strong>Returned value</strong></p><p>A <code>Uint64</code> data type hash value.</p><p>Type: <code>UInt64</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT xxHash64(&#x27;Hello, world!&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─xxHash64(&#x27;Hello, world!&#x27;)─┐</span><br><span class="line">│ 17691043854468224118      │</span><br><span class="line">└───────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>See Also</strong></p><ul><li><a href="http://cyan4973.github.io/xxHash/">xxHash</a> .</li></ul>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> SQL_Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Logical</title>
      <link href="/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/logical/"/>
      <url>/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/logical/</url>
      
        <content type="html"><![CDATA[<h1 id="logical"><a href="#logical" class="headerlink" title="logical"></a>logical</h1><blockquote><p>Notice:<br>Some of the examples below are referenced from <a href="https://clickhouse.com/docs/en/sql-reference/functions/">ClickHouse Documentation</a> but have been adapted and modified to work in ByteHouse.</p></blockquote><h2 id="and"><a href="#and" class="headerlink" title="and"></a>and</h2><p>Calculates the result of the logical conjunction between two or more values. Corresponds to Logical AND Operator.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">and(val1, val2...)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>val1, val2, ...</code> — List of at least two values. Int, UInt, Float or Nullable.</li></ul><p><strong>Returned value</strong></p><ul><li><code>0</code> , if there is at least one zero value argument.</li><li><code>NULL</code> , if there are no zero values arguments and there is at least one <code>NULL</code> argument.</li><li><code>1</code> , otherwise.<br>Type: UInt8 or Nullable(UInt8).</li></ul><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT and(0, 1, -2);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─and(0, 1, -2)─┐</span><br><span class="line">│ 0             │</span><br><span class="line">└───────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>With <code>NULL</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT and(NULL, 1, 10, -2);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─and(NULL, 1, 10, -2)─┐</span><br><span class="line">│ ᴺᵁᴸᴸ                 │</span><br><span class="line">└──────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="or"><a href="#or" class="headerlink" title="or"></a>or</h2><p>Calculates the result of the logical disjunction between two or more values. Corresponds to Logical OR Operator.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">or(val1, val2...)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>val1, val2, ...</code> — List of at least two values. Int, UInt, Float or Nullable.</li></ul><p><strong>Returned value</strong></p><ul><li><code>1</code> , if there is at least one non-zero value.</li><li><code>0</code> , if there are only zero values.</li><li><code>NULL</code> , if there are only zero values and <code>NULL</code> .<br>Type: UInt8 or Nullable(UInt8).</li></ul><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT or(1, 0, 0, 2, NULL);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─or(1, 0, 0, 2, NULL)─┐</span><br><span class="line">│ 1                    │</span><br><span class="line">└──────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h2><p>Calculates the result of the logical exclusive disjunction between two or more values. For more than two values the function works as if it calculates <code>XOR</code> of the first two values and then uses the result with the next value to calculate <code>XOR</code> and so on.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xor(val1, val2...)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>val1, val2, ...</code> — List of at least two values. Int, UInt, Float or Nullable.</li></ul><p><strong>Returned value</strong></p><ul><li><code>1</code> , for two values: if one of the values is zero and other is not.</li><li><code>0</code> , for two values: if both values are zero or non-zero at the same time.</li><li><code>NULL</code> , if there is at least one <code>NULL</code> value.<br>Type: UInt8 or Nullable(UInt8).</li></ul><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT xor(0, 1, 1);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─xor(0, 1, 1)─┐</span><br><span class="line">│ 0            │</span><br><span class="line">└──────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>With <code>NULL</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT xor(NULL, 0);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─xor(NULL, 0)─┐</span><br><span class="line">│ ᴺᵁᴸᴸ         │</span><br><span class="line">└──────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> SQL_Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mathematical</title>
      <link href="/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/mathematical/"/>
      <url>/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/mathematical/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Notice:<br>Some of the examples below are referenced from <a href="https://clickhouse.com/docs/en/sql-reference/functions/">ClickHouse Documentation</a> but have been adapted and modified to work in ByteHouse.</p></blockquote><h2 id="COVAR-POP"><a href="#COVAR-POP" class="headerlink" title="COVAR_POP"></a>COVAR_POP</h2><p>Calculates the value of <code>Σ((x - x̅)(y - y̅)) / n</code> .</p><p>Note: This function uses a numerically unstable algorithm. If you need <a href="">numerical stability</a> in calculations, use the <code>covarPopStable</code> function. It works slower but provides a lower computational error.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">covarPop(x, y)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The set of number.</li><li><code>y</code> - The set of number.</li></ul><p><strong>Returned value</strong></p><ul><li>The population covariance.</li></ul><p>Type: <code>Float64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test.test_covarPop(days_employed Int32, salary Int32) ENGINE <span class="operator">=</span> CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> days_employed; <span class="comment">-- create sample table</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.test_covarPop(days_employed,salary) <span class="keyword">VALUES</span>(<span class="number">300</span>,<span class="number">3000</span>),(<span class="number">600</span>,<span class="number">4000</span>),(<span class="number">900</span>,<span class="number">4500</span>),(<span class="number">1200</span>,<span class="number">4800</span>),(<span class="number">1500</span>,<span class="number">5000</span>); <span class="comment">-- insert data to table</span></span><br><span class="line"><span class="keyword">SELECT</span> covarPop(days_employed,salary) <span class="keyword">FROM</span> test.test_covarPop; <span class="comment">-- find out the population covariance for days employed and salary</span></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─covarPop(days_employed, salary)─┐</span><br><span class="line">│ 2.88e+05                        │</span><br><span class="line">└─────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="COVAR-SAMP"><a href="#COVAR-SAMP" class="headerlink" title="COVAR_SAMP"></a>COVAR_SAMP</h2><p>Calculates the value of <code>Σ((x - x̅)(y - y̅)) / (n - 1)</code> .</p><p>Note:This function uses a numerically unstable algorithm. If you need <a href="https://en.wikipedia.org/wiki/Numerical_stability">numerical stability</a> in calculations, use the <code>covarSampStable</code> function. It works slower but provides a lower computational error.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">covarSamp(x, y)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The set of number.</li><li><code>y</code> - The set of number.</li></ul><p><strong>Returned value</strong></p><ul><li>The sample covariance, when <code>n &lt;= 1</code> , returns +∞.</li></ul><p>Type: <code>Float64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test.test_covarSamp(days_employed Int32, salary Int32) ENGINE <span class="operator">=</span> CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> days_employed; <span class="comment">-- create sample table</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.test_covarSamp(days_employed,salary) <span class="keyword">VALUES</span>(<span class="number">300</span>,<span class="number">3000</span>),(<span class="number">600</span>,<span class="number">4000</span>),(<span class="number">900</span>,<span class="number">4500</span>),(<span class="number">1200</span>,<span class="number">4800</span>),(<span class="number">1500</span>,<span class="number">5000</span>); <span class="comment">-- insert data to table</span></span><br><span class="line"><span class="keyword">SELECT</span> covarSamp(days_employed,salary) <span class="keyword">FROM</span> test.test_covarSamp; <span class="comment">-- find out the sample covariance for days employed and salary</span></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─covarSamp(days_employed, salary)─┐</span><br><span class="line">│ 3.6e+05                          │</span><br><span class="line">└──────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="acos"><a href="#acos" class="headerlink" title="acos"></a>acos</h2><p>The arc cosine.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">acos</span>(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The radians.</li></ul><p><strong>Returned value</strong></p><ul><li>Return radians.</li></ul><p>Type: <code>Float64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─ACOS(-1)──────────────┐</span><br><span class="line">│ 3.141592653589793e+00 │</span><br><span class="line">└───────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="asin"><a href="#asin" class="headerlink" title="asin"></a>asin</h2><p>The arc sine.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">asin</span>(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The radians.</li></ul><p><strong>Returned value</strong></p><ul><li>Return radians.</li></ul><p>Type: <code>Float64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">asin</span>(<span class="number">-1</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─asin(1)────────────────┐</span><br><span class="line">│ 1.5707963267948966e+00 │</span><br><span class="line">└────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="atan"><a href="#atan" class="headerlink" title="atan"></a>atan</h2><p>The arc tangent.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">atan</span>(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The radians.</li></ul><p><strong>Returned value</strong></p><ul><li>Return radians.</li></ul><p>Type: <code>Float64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">atan</span>(<span class="number">-1</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─atan(-1)───────────────┐</span><br><span class="line">│ -7.853981633974483e-01 │</span><br><span class="line">└────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="cbrt"><a href="#cbrt" class="headerlink" title="cbrt"></a>cbrt</h2><p>Accepts a numeric argument and returns a Float64 number close to the cubic root of the argument.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cbrt(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The number.</li></ul><p><strong>Returned value</strong></p><ul><li>The root of the argument.</li></ul><p>Type:<code>Float64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cbrt(<span class="number">8</span>)</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─cbrt(8)─┐</span><br><span class="line">│ 2e+00   │</span><br><span class="line">└─────────┘</span><br></pre></td></tr></table></figure><h2 id="ceil"><a href="#ceil" class="headerlink" title="ceil"></a>ceil</h2><p>Returns the smallest round number that is greater than or equal to <code>x</code> . In every other way, it is the same as the <code>floor</code> function (see above).</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ceil</span>(x[, N]), <span class="built_in">ceiling</span>(x[, N]) </span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The number.</li><li><code>N</code> — <code>decimal-places</code>, An integer value.</li></ul><p><strong>Returned value</strong></p><ul><li>The round number.</li></ul><p>Type: <code>Float64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ceil</span>(<span class="number">1.99</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─ceil(1.99, 2)─┐</span><br><span class="line">│ 1.99e+00      │</span><br><span class="line">└───────────────┘</span><br></pre></td></tr></table></figure><p>other example:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ceil</span>(<span class="number">1.99</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─ceil(1.99, 1)─┐</span><br><span class="line">│ 2e+00         │</span><br><span class="line">└───────────────┘</span><br></pre></td></tr></table></figure><h2 id="ceiling"><a href="#ceiling" class="headerlink" title="ceiling"></a>ceiling</h2><p>Returns the smallest round number that is greater than or equal to <code>x</code> . In every other way, it is the same as the <code>floor</code> function (see above).</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ceil</span>(x[, N]), <span class="built_in">ceiling</span>(x[, N]) </span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The number.</li><li><code>N</code> - The integer of rounding decimal place.</li></ul><p><strong>Returned value</strong></p><ul><li>The round number.</li></ul><p>Type: <code>Float64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ceiling</span>(<span class="number">1.99</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─ceil(1.99, 2)─┐</span><br><span class="line">│ 1.99e+00      │</span><br><span class="line">└───────────────┘</span><br></pre></td></tr></table></figure><p>other example:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ceiling</span>(<span class="number">1.99</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─ceil(1.99, 1)─┐</span><br><span class="line">│ 2e+00         │</span><br><span class="line">└───────────────┘</span><br></pre></td></tr></table></figure><h2 id="cos"><a href="#cos" class="headerlink" title="cos"></a>cos</h2><p>The cosine.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cos</span>(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The radians.</li></ul><p><strong>Returned value</strong></p><ul><li>Return radians.</li></ul><p>Type: <code>Float64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">cos</span>(pi())</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─cos(pi())─┐</span><br><span class="line">│ -1e+00    │</span><br><span class="line">└───────────┘</span><br></pre></td></tr></table></figure><h2 id="erf"><a href="#erf" class="headerlink" title="erf"></a>erf</h2><p>The error function <code>erf(x)=2√π∫x0e−t2dt erf(x)</code> .</p><p>Note: If ‘x’ is non-negative, then <code>erf(x / σ√2)</code> is the probability that a random variable having a normal distribution with standard deviation ‘σ’ takes the value that is separated from the expected value by more than ‘x’.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">erf(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The number.</li></ul><p><strong>Returned value</strong></p><ul><li>The probability.</li></ul><p>Type: <code>Float64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> erf(<span class="number">3</span> <span class="operator">/</span> <span class="built_in">sqrt</span>(<span class="number">2</span>));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─erf(divide(3, sqrt(2)))─┐</span><br><span class="line">│ 9.973002039367398e-01   │</span><br><span class="line">└─────────────────────────┘</span><br></pre></td></tr></table></figure><p>Note: three sigma rule</p><h2 id="erfc"><a href="#erfc" class="headerlink" title="erfc"></a>erfc</h2><p>The complementary error function follows the formula: erfc(x) &#x3D; 1 − erf(x).</p><p>Accepts a numeric argument and returns a Float64 number close to 1 - erf(x), but without loss of precision for large <code>x</code> values.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">erfc(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The number.</li></ul><p><strong>Returned value</strong></p><ul><li>The probability.</li></ul><p>Type: <code>Float64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> erfc(<span class="number">3</span> <span class="operator">/</span> <span class="built_in">sqrt</span>(<span class="number">2</span>));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─erfc(divide(3, sqrt(2)))─┐</span><br><span class="line">│ 2.6997960632601913e-03   │</span><br><span class="line">└──────────────────────────┘</span><br></pre></td></tr></table></figure><p>Note: three sigma rule</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>Accepts a numeric argument and returns a Float64 number close to the exponent of the argument.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exp</span>(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The number.</li></ul><p><strong>Returned value</strong></p><ul><li>The result of calculation.</li></ul><p>Type: <code>Float64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">exp</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─exp(1)────────────────┐</span><br><span class="line">│ 2.718281828459045e+00 │</span><br><span class="line">└───────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="exp10"><a href="#exp10" class="headerlink" title="exp10"></a>exp10</h2><p>Accepts a numeric argument and returns a Float64 number close to 10 to the power of <code>x</code>.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exp10(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The number.</li></ul><p><strong>Returned value</strong></p><ul><li>The result of calculation.</li></ul><p>Type: <code>Float64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> exp10(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─exp10(3)─┐</span><br><span class="line">│ 1e+03    │</span><br><span class="line">└──────────┘</span><br></pre></td></tr></table></figure><h2 id="exp2"><a href="#exp2" class="headerlink" title="exp2"></a>exp2</h2><p>Accepts a numeric argument and returns a Float64 number close to 2 to the power of <code>x</code>.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exp2(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The number.</li></ul><p><strong>Returned value</strong></p><ul><li>The result of calculation.</li></ul><p>calculating<br>Type: <code>Float64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> exp2(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─exp2(3)─┐</span><br><span class="line">│ 8e+00   │</span><br><span class="line">└─────────┘</span><br></pre></td></tr></table></figure><h2 id="floor"><a href="#floor" class="headerlink" title="floor"></a>floor</h2><p>Returns the largest round number that is less than or equal to <code>x</code> . A round number is a multiple of 1&#x2F;10N, or the nearest number of the appropriate data type if 1 &#x2F; 10N isn’t exact.</p><ul><li><p><code>N</code> is an integer constant, optional parameter. By default it is zero, which means to round to an integer.</p></li><li><p><code>N</code> may be negative.</p></li><li><p><code>x</code> is any numeric type. The result is a number of the same type.</p></li></ul><p>For integer arguments, it makes sense to round with a negative <code>N</code> value (for non-negative <code>N</code> , the function does not do anything).</p><p>If rounding causes overflow (for example, floor(-128, -1)), an implementation-specific result is returned.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">floor</span>(x[, N])</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><p><code>x</code> – The number. </p></li><li><p><code>N</code> – round to an integer</p></li></ul><p><strong>Returned value</strong></p><ul><li>The result of calculation.</li></ul><p>Type: <code>Float64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">floor</span>(<span class="number">123.45</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─floor(123.45, 1)─┐</span><br><span class="line">│ 1.234e+02        │</span><br><span class="line">└──────────────────┘</span><br></pre></td></tr></table></figure><p>other example:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">floor</span>(<span class="number">123.45</span>, <span class="number">-1</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─floor(123.45, -1)─┐</span><br><span class="line">│ 1.2e+02           │</span><br><span class="line">└───────────────────┘</span><br></pre></td></tr></table></figure><h2 id="intExp10"><a href="#intExp10" class="headerlink" title="intExp10"></a>intExp10</h2><p>Accepts a numeric argument and returns a UInt64 number close to 10 to the power of <code>x</code>.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">intExp10(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The number.</li></ul><p><strong>Returned value</strong></p><ul><li>The result of calculation.</li></ul><p>Type: <code>UInt64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> intExp10(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─intExp10(3)─┐</span><br><span class="line">│ 1000        │</span><br><span class="line">└─────────────┘</span><br></pre></td></tr></table></figure><h2 id="intExp2"><a href="#intExp2" class="headerlink" title="intExp2"></a>intExp2</h2><p>Accepts a numeric argument and returns a UInt64 number close to 2 to the power of <code>x</code>.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">intExp2(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The number.</li></ul><p><strong>Returned value</strong></p><ul><li>The result of calculation.</li></ul><p>Type: <code>UInt64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> intExp2(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─intExp2(3)─┐</span><br><span class="line">│ 8          │</span><br><span class="line">└────────────┘</span><br></pre></td></tr></table></figure><h2 id="lgamma"><a href="#lgamma" class="headerlink" title="lgamma"></a>lgamma</h2><p>The logarithm of the gamma function.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lgamma(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The number.</li></ul><p><strong>Returned value</strong></p><ul><li>The result of calculation.</li></ul><p>Type: <code>Float64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> lgamma(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─lgamma(3)─────────────┐</span><br><span class="line">│ 6.931471805599453e-01 │</span><br><span class="line">└───────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h2><p>Accepts a numeric argument and returns a Float64 number close to the natural logarithm of the argument.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span>(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The number.</li></ul><p><strong>Returned value</strong></p><ul><li>The result of calculation.</li></ul><p>Type: <code>Float64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">ln</span>(<span class="number">2.7182818</span>)</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─ln(2.7182818)─────────┐</span><br><span class="line">│ 9.999999895305024e-01 │</span><br><span class="line">└───────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="log10"><a href="#log10" class="headerlink" title="log10"></a>log10</h2><p>Accepts a numeric argument and returns a Float64 number close to the decimal logarithm of the argument.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">log10</span>(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The number.</li></ul><p><strong>Returned value</strong></p><ul><li>The result of calculation.</li></ul><p>Type: <code>Float64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">log10</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─log10(3)───────────────┐</span><br><span class="line">│ 4.7712125471966244e-01 │</span><br><span class="line">└────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="log2"><a href="#log2" class="headerlink" title="log2"></a>log2</h2><p>Accepts a numeric argument and returns a Float64 number close to the binary logarithm of the argument.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log2(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The number.</li></ul><p><strong>Returned value</strong></p><ul><li>The result of calculation.</li></ul><p>Type: <code>Float64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> log2(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─log2(3)───────────────┐</span><br><span class="line">│ 1.584962500721156e+00 │</span><br><span class="line">└───────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="pi"><a href="#pi" class="headerlink" title="pi"></a>pi</h2><p>Returns a Float64 number that is close to the number π.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi()</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li>N.A</li></ul><p><strong>Returned value</strong></p><ul><li>The value of π.</li></ul><p>Type: <code>Float64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> pi();</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─pi()──────────────────┐</span><br><span class="line">│ 3.141592653589793e+00 │</span><br><span class="line">└───────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="pow"><a href="#pow" class="headerlink" title="pow"></a>pow</h2><p>Takes two numeric arguments <code>x</code> and <code>y</code>. Returns a Float64 number close to <code>x</code> to the power of <code>y</code>.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pow(x, y)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The number.</li></ul><p><strong>Returned value</strong></p><ul><li>The result of calculation.</li></ul><p>Type: <code>Float64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> pow(<span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─pow(2, 3)─┐</span><br><span class="line">│ 8e+00     │</span><br><span class="line">└───────────┘</span><br></pre></td></tr></table></figure><h2 id="power"><a href="#power" class="headerlink" title="power"></a>power</h2><p>Takes two numeric arguments <code>x</code> and <code>y</code>. Returns a Float64 number close to <code>x</code> to the power of <code>y</code>.</p><p>Alias：<a href="">pow</a></p><h2 id="round"><a href="#round" class="headerlink" title="round"></a>round</h2><p>Rounds a value to a specified number of decimal places.</p><p>The function returns the nearest number of the specified order. In case when given number has equal distance to surrounding numbers, the function uses banker’s rounding for float number types and rounds away from zero for the other number types.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">round(expression [, decimal_places])</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><p><code>expression</code> — A number to be rounded. Can be any <a href="">expression</a> returning the numeric <a href="">data type</a> . </p></li><li><p><code>decimal-places</code> — An integer value. </p><ul><li><p>If <code>decimal-places &gt; 0</code> then the function rounds the value to the right of the decimal point. </p></li><li><p>If <code>decimal-places &lt; 0</code> then the function rounds the value to the left of the decimal point. </p></li><li><p>If <code>decimal-places = 0</code> then the function rounds the value to integer. In this case the argument can be omitted.</p></li></ul></li></ul><p><strong>Returned value:</strong></p><ul><li>The rounded number of the same type as the input number.</li></ul><p>Type: <code>Float64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> round(<span class="number">1.1234</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─round(1.1234)─┐</span><br><span class="line">│ 1e+00         │</span><br><span class="line">└───────────────┘</span><br></pre></td></tr></table></figure><p>other example</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> round(<span class="number">1.1234</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─round(1.1234, 2)─┐</span><br><span class="line">│ 1.12e+00         │</span><br><span class="line">└──────────────────┘</span><br></pre></td></tr></table></figure><h2 id="roundAge"><a href="#roundAge" class="headerlink" title="roundAge"></a>roundAge</h2><p>Accepts a number. If the number is less than 17, it returns 17. Otherwise, it rounds the number down to a number from the set: 17, 25, 35, 45, 55. This function is specific to Yandex.Metrica and used for implementing the report on user age.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roundAge(num)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>num</code> – The age.</li></ul><p><strong>Returned value</strong></p><ul><li>A rounded value..</li></ul><p>Type: <code>UInt8</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> roundAge(<span class="number">50</span>);</span><br></pre></td></tr></table></figure><p>Result:     </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─roundAge(50)─┐</span><br><span class="line">│ 45           │</span><br><span class="line">└──────────────┘</span><br></pre></td></tr></table></figure><p>other example</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> roundAge(<span class="number">16</span>), roundAge(<span class="number">17</span>),roundAge(<span class="number">18</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─roundAge(16)─┬─roundAge(17)─┬─roundAge(18)─┐</span><br><span class="line">│ 17           │ 17           │ 18           │</span><br><span class="line">└──────────────┴──────────────┴──────────────┘</span><br></pre></td></tr></table></figure><h2 id="roundDown"><a href="#roundDown" class="headerlink" title="roundDown"></a>roundDown</h2><p>Accepts a number and rounds it down to an element in the specified array. If the value is less or greater than the bound, the lowest or greatest bound is returned.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roundDown(number, <span class="keyword">array</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>number</code> – The number. </li><li><code>array</code> – The array.</li></ul><p><strong>Returned value</strong></p><ul><li>The result of roundng.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> roundDown(<span class="number">2</span>, [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─roundDown(2, [6, 7, 8])─┐</span><br><span class="line">│ 6                       │</span><br><span class="line">└─────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="roundDuration"><a href="#roundDuration" class="headerlink" title="roundDuration"></a>roundDuration</h2><p>Accepts a <code>number</code>. If the number is less than one, it returns 0. Otherwise, it rounds the number down to numbers from the set: 1, 10, 30, 60, 120, 180, 240, 300, 600, 1200, 1800, 3600, 7200, 18000, 36000. This function is specific to Yandex. Metrica and used for implementing the report on session length.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roundDuration(number)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The number.</li></ul><p><strong>Returned value</strong></p><ul><li>The result of rounding.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> roundDuration(<span class="number">230</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─roundDuration(230)─┐</span><br><span class="line">│ 180                │</span><br><span class="line">└────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="roundToExp2"><a href="#roundToExp2" class="headerlink" title="roundToExp2"></a>roundToExp2</h2><p>Accepts a <code>number</code>. If the <code>number</code> is less than one, it returns 0. Otherwise, it rounds the <code>number</code> down to the nearest (whole non-negative) degree of two.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roundToExp2(number)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>number</code> – The number.</li></ul><p><strong>Returned value</strong></p><ul><li>The result of rounding.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> roundToExp2(<span class="number">31</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─roundToExp2(31)─┐</span><br><span class="line">│ 16              │</span><br><span class="line">└─────────────────┘</span><br></pre></td></tr></table></figure><h2 id="sin"><a href="#sin" class="headerlink" title="sin"></a>sin</h2><p>The sine.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sin</span>(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The radians.</li></ul><p><strong>Returned value</strong></p><ul><li>Return radians.</li></ul><p>Type: <code>Float64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sin</span>(pi()<span class="operator">/</span><span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─sin(divide(pi(), 2))─┐</span><br><span class="line">│ 1e+00                │</span><br><span class="line">└──────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="sqrt"><a href="#sqrt" class="headerlink" title="sqrt"></a>sqrt</h2><p>Accepts a numeric argument and returns a Float64 number close to the square root of the argument.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sqrt</span>(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The number.</li></ul><p><strong>Returned value</strong></p><ul><li>The square root.</li></ul><p>Type: <code>Float64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sqrt</span>(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─sqrt(4)─┐</span><br><span class="line">│ 2e+00   │</span><br><span class="line">└─────────┘</span><br></pre></td></tr></table></figure><h2 id="tan"><a href="#tan" class="headerlink" title="tan"></a>tan</h2><p>The tangent.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tan</span>(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The radians.</li></ul><p><strong>Returned value</strong></p><ul><li>Return radians.</li></ul><p>Type: <code>Float64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">tan</span>(pi()<span class="operator">/</span><span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─tan(divide(pi(), 4))──┐</span><br><span class="line">│ 9.999999999999999e-01 │</span><br><span class="line">└───────────────────────┘</span><br></pre></td></tr></table></figure><p>Note: the result has particular precision, it probably will be fixed with next minor release.## tgamma<br>Computes the gamma function of arg.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tgamma(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The number.</li></ul><p><strong>Returned value</strong></p><ul><li>The result of calculation.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> tgamma(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─tgamma(10)─────────────┐</span><br><span class="line">│ 3.6287999999999994e+05 │</span><br><span class="line">└────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="trunc"><a href="#trunc" class="headerlink" title="trunc"></a>trunc</h2><p>Returns the round number with largest absolute value that has an absolute value less than or equal to <code>x</code> ‘s. In every other way, it is the same as the ’floor’ function (see above).</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">trunc(x[, N])</span><br><span class="line"><span class="keyword">truncate</span>(x[, N])</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The number. </li><li><code>N</code> - The integer of rounding decimal place.</li></ul><p><strong>Returned value</strong></p><ul><li>The rouded number.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> trunc(<span class="number">100.11</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─trunc(100.11, 1)─┐</span><br><span class="line">│ 1.001e+02        │</span><br><span class="line">└──────────────────┘</span><br></pre></td></tr></table></figure><h2 id="truncate"><a href="#truncate" class="headerlink" title="truncate"></a>truncate</h2><p>Removes all data from a table. When the clause <code>IF EXISTS</code> is omitted, the query returns an error if the table does not exist.</p><p>The <code>TRUNCATE</code> query is not supported for <a href="">View</a>, <a href="">File</a>, <a href="">URL</a>, <a href="">Buffer</a> and <a href="">Null</a> table engines.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">EXISTS</span>] [db.]name [<span class="keyword">ON</span> CLUSTER cluster]</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>name</code> – The table name.</li><li><code>[IF EXISTS]</code> - Optional, the query returns an error if the table does not exist.</li><li><code>[db.]</code> - Optional, the database name.</li><li><code>[ON CLUSTER cluster]</code> - Optional, the cluster name.</li></ul><p><strong>Returned value</strong></p><ul><li>N.A.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test.test_truncate (id Int32) ENGINE <span class="operator">=</span> CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> id;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.test_truncate(id) <span class="keyword">VALUES</span>(<span class="number">1</span>),(<span class="number">2</span>),(<span class="number">3</span>),(<span class="number">4</span>),(<span class="number">5</span>); <span class="comment">-- insert 1,2,3,4,5 to table</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test.test_truncate; <span class="comment">-- check the date before truncate</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">┌─id─┐</span><br><span class="line">│ 1  │</span><br><span class="line">│ 2  │</span><br><span class="line">│ 3  │</span><br><span class="line">│ 4  │</span><br><span class="line">│ 5  │</span><br><span class="line">└────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> test.`test_truncate`</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test.`test_truncate`</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> SQL_Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Statements</title>
      <link href="/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/sql-statements/"/>
      <url>/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/sql-statements/</url>
      
        <content type="html"><![CDATA[<p>The supported statements in ByteHouse are similar to ClickHouse, but it is still recommended to follow the ByteHouse manual to ensure proper use. Some of the examples below are referenced from <a href="https://clickhouse.tech/docs/en/sql-reference/statements/">ClickHouse Documentation</a> but have been adapted and modified to work in ByteHouse.<br>[block:callout]<br>{<br>  “type”: “info”,<br>  “body”: “Symbols between token [] are optional. For example [IF NOT EXISTS]\nToken | means or\nToken … means can repeat more times”,<br>  “title”: “Note”<br>}<br>[&#x2F;block]</p><h2 id="Alter-Statement"><a href="#Alter-Statement" class="headerlink" title="Alter Statement"></a>Alter Statement</h2><h3 id="ADD-COLUMN"><a href="#ADD-COLUMN" class="headerlink" title="ADD COLUMN"></a>ADD COLUMN</h3><p>Adds a new column to the table.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [tableIdentifier] <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] [tableColumnDfnt] [AFTER name_after]</span><br></pre></td></tr></table></figure><ul><li><p><code>IF NOT EXISTS</code> clause is included, the query won’t return an error if the column already exists. </p></li><li><p><code>AFTER name_after</code> (the name of another column), the column is added after the specified one in the list of table columns.</p></li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Step <span class="number">1</span>: <span class="keyword">create</span> a <span class="keyword">table</span> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> db_name.table_name</span><br><span class="line">(</span><br><span class="line">    `order_by_column` String</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> `CnchMergeTree`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (`order_by_column`)</span><br><span class="line"></span><br><span class="line"># Step <span class="number">2</span>: <span class="keyword">add</span> <span class="keyword">column</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> db_name.table_name <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> column_name String COMMENT <span class="string">&#x27;column comment here&#x27;</span> AFTER order_by_column</span><br></pre></td></tr></table></figure><h3 id="MODIFY-COLUMN"><a href="#MODIFY-COLUMN" class="headerlink" title="MODIFY COLUMN"></a>MODIFY COLUMN</h3><p>** Syntax**</p><p>Modify Column</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [tableIdentifier] MODIFY <span class="keyword">COLUMN</span> [IF <span class="keyword">EXISTS</span>] [tableColumnDfnt] </span><br></pre></td></tr></table></figure><p>If the modify column is:</p><ul><li><p>Order by column: can modify its default_expr, comment, codec. </p></li><li><p>Partition by column: can modify its comment. </p></li><li><p>Normal column: can modify itstype, default_expr, comment, codec.</p></li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Step <span class="number">1</span>: <span class="keyword">create</span> a <span class="keyword">table</span> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> db_name.table_name</span><br><span class="line">(</span><br><span class="line">    `order_by_column` String,</span><br><span class="line">    `normal_column` Int64 <span class="keyword">DEFAULT</span> <span class="number">0</span></span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> `CnchMergeTree`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (`order_by_column`)</span><br><span class="line"></span><br><span class="line"># Step <span class="number">2</span>: modify <span class="keyword">column</span> normal_column_name <span class="operator">&amp;</span> <span class="keyword">update</span> its data type, comment <span class="keyword">and</span> <span class="keyword">default</span> <span class="keyword">value</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> db_name.table_name MODIFY <span class="keyword">COLUMN</span> IF <span class="keyword">EXISTS</span> normal_column String <span class="keyword">DEFAULT</span> <span class="string">&#x27;new_default_value&#x27;</span> COMMENT <span class="string">&#x27;new comment&#x27;</span> </span><br></pre></td></tr></table></figure><h3 id="DROP-COLUMN"><a href="#DROP-COLUMN" class="headerlink" title="DROP COLUMN"></a>DROP COLUMN</h3><p>Deletes a column in the table. Partition by columns and order by columns are not allowed to drop.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [tableIdentifier] <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> [IF <span class="keyword">EXISTS</span>] column_name;</span><br></pre></td></tr></table></figure><ul><li><code>IF EXISTS</code> clause is specified, the query won’t return an error if the column does not exist.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Step <span class="number">1</span>: <span class="keyword">create</span> a <span class="keyword">table</span> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> db_name.table_name</span><br><span class="line">(</span><br><span class="line">    `order_by_column` String,</span><br><span class="line">    `normal_column` Int64</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> `CnchMergeTree`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (`order_by_column`)</span><br><span class="line"></span><br><span class="line"># Step <span class="number">2</span>: <span class="keyword">drop</span> the normal <span class="keyword">column</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> db_name.table_name <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> IF <span class="keyword">EXISTS</span> normal_column</span><br></pre></td></tr></table></figure><h3 id="RENAME-COLUMN"><a href="#RENAME-COLUMN" class="headerlink" title="RENAME COLUMN"></a>RENAME COLUMN</h3><p>Rename a column in the table. There are some usage notes:</p><ul><li><p>Cannot rename column to an existing column. </p></li><li><p>Cannot rename column to itself. </p></li><li><p>Rename from column must exists.</p></li></ul><p>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [tableIdentifier] RENAME <span class="keyword">COLUMN</span> [IF <span class="keyword">EXISTS</span>] column_name_from <span class="keyword">TO</span> column_name_to;</span><br></pre></td></tr></table></figure><ul><li><code>IF EXISTS</code> clause is specified, the query won’t return an error if the column does not exist.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Step <span class="number">1</span>: <span class="keyword">create</span> a <span class="keyword">table</span> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> db_name.table_name</span><br><span class="line">(</span><br><span class="line">    `order_by_column` String,</span><br><span class="line">    `old_column_name` Int64</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> `CnchMergeTree`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (`old_column_name`)</span><br><span class="line"></span><br><span class="line"># Step <span class="number">2</span>: rename <span class="keyword">column</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> db_name.table_name RENAME <span class="keyword">COLUMN</span> old_column_name <span class="keyword">TO</span> new_column_name</span><br></pre></td></tr></table></figure><h3 id="ADD-CONSTRAINT"><a href="#ADD-CONSTRAINT" class="headerlink" title="ADD CONSTRAINT"></a>ADD CONSTRAINT</h3><p>Adds a constraint to the table.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [tableIdentifier] <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] constraint_name <span class="keyword">CHECK</span> columnExpr;</span><br></pre></td></tr></table></figure><ul><li><code>IF NOT EXISTS</code> clause is included, the query won’t return an error if the constraint already exists.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Step <span class="number">1</span>: <span class="keyword">create</span> a <span class="keyword">table</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `example_table`</span><br><span class="line">(</span><br><span class="line">    `order_by_column` String</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> `CnchMergeTree`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (`order_by_column`)</span><br><span class="line"></span><br><span class="line"># Step <span class="number">2</span>: <span class="keyword">add</span> <span class="keyword">constraint</span> check_str</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> example_table <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> check_str <span class="keyword">CHECK</span> order_by_column <span class="operator">!=</span> <span class="string">&#x27;forbidden_string&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="DROP-CONSTRAINT"><a href="#DROP-CONSTRAINT" class="headerlink" title="DROP CONSTRAINT"></a>DROP CONSTRAINT</h3><p>Deletes a constraint to the table.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [tableIdentifier] <span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> [IF <span class="keyword">EXISTS</span>] constraint_name;</span><br></pre></td></tr></table></figure><ul><li><code>IF EXISTS</code> clause is specified, the query won’t return an error if the constraint does not exist.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Step <span class="number">1</span>: <span class="keyword">create</span> a <span class="keyword">table</span> <span class="keyword">with</span> the <span class="keyword">constraint</span> check_str</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `example_table`</span><br><span class="line">(</span><br><span class="line">    `order_by_column` String,</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> check_str <span class="keyword">CHECK</span> order_by_column <span class="operator">!=</span> <span class="string">&#x27;forbidden_string&#x27;</span></span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> `CnchMergeTree`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (`order_by_column`)</span><br><span class="line"></span><br><span class="line"># Step <span class="number">2</span>: <span class="keyword">drop</span> <span class="keyword">constraint</span> check_str</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> example_table <span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> IF <span class="keyword">EXISTS</span> check_str</span><br></pre></td></tr></table></figure><h3 id="MODIFYTTL"><a href="#MODIFYTTL" class="headerlink" title="MODIFYTTL"></a>MODIFYTTL</h3><p>Change table TTL. Columns used in ttl Clause must be in partition by columns.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [tableIdentifier] MODIFY [ttlClause];</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Step <span class="number">1</span>: <span class="keyword">create</span> a <span class="keyword">table</span> <span class="keyword">with</span> <span class="keyword">table</span> TTL <span class="keyword">to</span> be <span class="number">1</span> <span class="keyword">day</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `example_table`</span><br><span class="line">(</span><br><span class="line">    `d` DateTime</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> `CnchMergeTree`</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> d</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> `d`</span><br><span class="line">TTL d <span class="operator">+</span> <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">DAY</span></span><br><span class="line"></span><br><span class="line"># Step <span class="number">2</span>: modify <span class="keyword">table</span> ttl <span class="operator">&amp;</span> change the TTL <span class="keyword">to</span> <span class="number">2</span> <span class="keyword">month</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> example_table</span><br><span class="line">    MODIFY TTL d <span class="operator">+</span> <span class="type">INTERVAL</span> <span class="number">2</span> <span class="keyword">MONTH</span></span><br></pre></td></tr></table></figure><h3 id="REMOVETTL"><a href="#REMOVETTL" class="headerlink" title="REMOVETTL"></a>REMOVETTL</h3><p>Remove table TTL.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [tableIdentifier] REMOVE TTL;</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Step <span class="number">1</span>: <span class="keyword">create</span> a <span class="keyword">table</span> <span class="keyword">with</span> <span class="keyword">table</span> TTL <span class="keyword">to</span> be <span class="number">1</span> <span class="keyword">day</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `example_table`</span><br><span class="line">(</span><br><span class="line">    `d` DateTime</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> `CnchMergeTree`</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> d</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> d</span><br><span class="line">TTL d <span class="operator">+</span> <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">DAY</span></span><br><span class="line"></span><br><span class="line"># Step <span class="number">2</span>: remove <span class="keyword">table</span> ttl</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> example_table</span><br><span class="line">    REMOVE TTL</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="AST-Statement"><a href="#AST-Statement" class="headerlink" title="AST Statement"></a>AST Statement</h2><p>Shows the execution plan of a statement. Dumps the query AST.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AST query</span><br></pre></td></tr></table></figure><p><strong>Output</strong></p><table><thead><tr><th><strong>Column</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>explain</td><td>The parsedASTof the statement</td></tr></tbody></table><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AST <span class="keyword">SELECT</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Explain ParsedAST (children 1)</span><br><span class="line"> SelectWithUnionQuery (children 1)</span><br><span class="line"> ExpressionList (children 1)</span><br><span class="line">  SelectQuery (children 1)</span><br><span class="line">  ExpressionList (children 1)</span><br><span class="line">   Literal UInt64_1</span><br></pre></td></tr></table></figure><h2 id="Create-Statement"><a href="#Create-Statement" class="headerlink" title="Create Statement"></a>Create Statement</h2><h3 id="CREATE-DATABASE"><a href="#CREATE-DATABASE" class="headerlink" title="CREATE DATABASE"></a>CREATE DATABASE</h3><p>Creates a new database<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] [databaseIdentifier] [ENGINE<span class="operator">=</span>Cnch]</span><br></pre></td></tr></table></figure><ul><li><code>IF NOT EXISTS</code> : query won’t return an error if the database already exists.</li></ul><p><strong>Example</strong></p><ol><li>Create database with default database engine.</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test;</span><br></pre></td></tr></table></figure><ol start="2"><li>Create database with optional engine clause. Currently only Cnch engine is allowed.</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test ENGINE<span class="operator">=</span>Cnch;</span><br></pre></td></tr></table></figure><h3 id="CREATE-TABLE"><a href="#CREATE-TABLE" class="headerlink" title="CREATE TABLE"></a>CREATE TABLE</h3><p>Creates a new table.</p><h4 id="Create-Table-With-Explicit-Schema"><a href="#Create-Table-With-Explicit-Schema" class="headerlink" title="Create Table With Explicit Schema"></a>Create Table With Explicit Schema</h4><p>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] [tableIdentifier] [UUID uuid]</span><br><span class="line">(</span><br><span class="line">    [tableColumnDfnt],</span><br><span class="line">    [<span class="keyword">CONSTRAINT</span> constraint_name <span class="keyword">CHECK</span> columnExpr,]</span><br><span class="line">    ...</span><br><span class="line">) [engineClause]</span><br></pre></td></tr></table></figure><ul><li><p><code>IF NOT EXISTS</code> : query won’t return an error if the table already exists. </p></li><li><p><code>UUID</code> : table will have an uuid provided by user. Otherwise, a generated uuid will be used. </p></li><li><p><code>[CONSTRAINT constraint_name CHECK columnExpr]</code> : add a constraint to table. </p><ul><li><p>columnExpr after <code>CHECK</code> should be a boolean expression. </p></li><li><p>If constraints are checked for every row in <code>INSERT</code> query. Exception will be raised if any constraint is not satisfied. </p></li><li><p>Adding large amount of constraints can negatively affect performance of big <code>INSERT</code> queries.</p></li></ul></li></ul><p><strong>Example</strong></p><ol><li>Create Table</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.createTable(</span><br><span class="line">    id UInt32,</span><br><span class="line">    name String <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> constraint1 <span class="keyword">CHECK</span> id <span class="operator">&gt;</span> <span class="number">10</span></span><br><span class="line">) </span><br><span class="line">ENGINE<span class="operator">=</span>CnchMergeTree</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> id</span><br></pre></td></tr></table></figure><h3 id="CREATE-VIEW"><a href="#CREATE-VIEW" class="headerlink" title="CREATE VIEW"></a>CREATE VIEW</h3><h4 id="CREATE-NORMAL-VIEW"><a href="#CREATE-NORMAL-VIEW" class="headerlink" title="CREATE NORMAL VIEW"></a>CREATE NORMAL VIEW</h4><p>Normal views don’t store any data. They just perform a read from another table on each access. In other words, a normal view is nothing more than a saved query. When reading from a view, this saved query is used as a subquery in the FROM clause.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> REPLACE] <span class="keyword">VIEW</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] [tableIdentifier] [UUID uuid] <span class="keyword">AS</span> [selectUnionStmt]</span><br></pre></td></tr></table></figure><ul><li><p><code>OR REPLACE</code> is included, ByteHouse will create a new view and replace the old view with the same name. </p></li><li><p><code>IF NOT EXISTS</code> clause is included, the query won’t return an error if the table already exists. </p></li><li><p><code>UUID</code> is specified, table will have an uuid provided by user. Otherwise, a generated uuid will be used.</p></li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Step <span class="number">1</span>: <span class="keyword">create</span> a <span class="keyword">table</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `example_table`</span><br><span class="line">(</span><br><span class="line">    `order_by_column` String</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> `CnchMergeTree`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (`order_by_column`)</span><br><span class="line"></span><br><span class="line"># step <span class="number">2</span>: <span class="keyword">create</span> a <span class="keyword">view</span> based <span class="keyword">on</span> the created <span class="keyword">table</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> example_view <span class="keyword">AS</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> example_table</span><br></pre></td></tr></table></figure><h2 id="Describe-Statement"><a href="#Describe-Statement" class="headerlink" title="Describe Statement"></a>Describe Statement</h2><p>Returns the columns definition of a table<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span><span class="operator">|</span><span class="keyword">DESCRIBE</span> [<span class="keyword">TABLE</span>] [tableIdentifier]</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESCRIBE</span> example_view</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>N</strong> <strong>ame</strong></th><th><strong>Type</strong></th><th><strong>DefaultType</strong></th><th><strong>DefaultExpression</strong></th><th><strong>Comment</strong></th><th><strong>CodecExpression</strong></th><th><strong>TTLExpression</strong></th><th><strong>LastQueriedAt</strong></th><th><strong>LastQueriedBy</strong></th></tr></thead><tbody><tr><td>order_by_column</td><td>String</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="Explain-Statement"><a href="#Explain-Statement" class="headerlink" title="Explain Statement"></a>Explain Statement</h2><h3 id="EXPLAIN-SYNTAX"><a href="#EXPLAIN-SYNTAX" class="headerlink" title="EXPLAIN SYNTAX"></a>EXPLAIN SYNTAX</h3><p>checks the syntax validity.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SYNTAX query</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SYNTAX <span class="keyword">SELECT</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>syntax_correct</strong></th><th><strong>syntax_message</strong></th><th><strong>has_join</strong></th><th><strong>has_asterisk</strong></th></tr></thead><tbody><tr><td>1</td><td></td><td>0</td><td>0</td></tr></tbody></table><h2 id="Drop-Statement"><a href="#Drop-Statement" class="headerlink" title="Drop Statement"></a>Drop Statement</h2><h3 id="DROP-DATABASE"><a href="#DROP-DATABASE" class="headerlink" title="DROP DATABASE"></a>DROP DATABASE</h3><p>Deletes the Database.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE [IF <span class="keyword">EXISTS</span>] [databaseIdentifier]</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">create</span> a database</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE example_db</span><br><span class="line"></span><br><span class="line"># <span class="keyword">drop</span> a database</span><br><span class="line"><span class="keyword">DROP</span> DATABASE example_db</span><br></pre></td></tr></table></figure><h3 id="DROP-TABLE"><a href="#DROP-TABLE" class="headerlink" title="DROP TABLE"></a>DROP TABLE</h3><p>Deletes the table.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [IF <span class="keyword">EXISTS</span>] [tableIdentifier]</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># step <span class="number">1</span>: <span class="keyword">create</span> a <span class="keyword">table</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `example_table`</span><br><span class="line">(</span><br><span class="line">    `order_by_column` String</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> `CnchMergeTree`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (`order_by_column`)</span><br><span class="line"></span><br><span class="line"># step <span class="number">2</span>: <span class="keyword">drop</span> a <span class="keyword">table</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> example_table</span><br></pre></td></tr></table></figure><h2 id="Insert-Statement"><a href="#Insert-Statement" class="headerlink" title="Insert Statement"></a>Insert Statement</h2><p>Adds data into a table.</p><h3 id="INSERT-VALUES"><a href="#INSERT-VALUES" class="headerlink" title="INSERT VALUES"></a>INSERT VALUES</h3><p>Data can be inserted with this basic query format.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> [<span class="keyword">TABLE</span>] [tableIdentifier] [columnsClause] <span class="keyword">VALUES</span></span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># step <span class="number">1</span>: <span class="keyword">create</span> a <span class="keyword">table</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `example_table`</span><br><span class="line">(</span><br><span class="line">    `a` Int8,</span><br><span class="line">    `b` String,</span><br><span class="line">    `c` <span class="type">Date</span></span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> `CnchMergeTree`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (`a`)</span><br><span class="line"></span><br><span class="line"># step <span class="number">2</span>: <span class="keyword">insert</span> <span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">into</span> the <span class="keyword">table</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> example_table <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;2021-07-27&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;2021-07-27&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="INSERT-FORMAT"><a href="#INSERT-FORMAT" class="headerlink" title="INSERT FORMAT"></a>INSERT FORMAT</h3><p>Data can be passed to the INSERT in aformatsupported by ByteHouse.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> [<span class="keyword">TABLE</span>] [tableIdentifier] [columnsClause] FORMAT format_name</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># step <span class="number">1</span>: <span class="keyword">create</span> a <span class="keyword">table</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `example_table`</span><br><span class="line">(</span><br><span class="line">    `a` Int8,</span><br><span class="line">    `b` String,</span><br><span class="line">    `c` <span class="type">Date</span></span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> `CnchMergeTree`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (`a`) </span><br><span class="line"></span><br><span class="line"># step <span class="number">2</span>: <span class="keyword">insert</span> <span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">value</span> format <span class="keyword">into</span> the <span class="keyword">table</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> example_table FORMAT <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;2021-07-27&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;2021-07-27&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="INSERT-SELECT"><a href="#INSERT-SELECT" class="headerlink" title="INSERT SELECT"></a>INSERT SELECT</h3><p>Inserts the results of a SELECT query.  Columns are mapped according to their position in the SELECT clause. However, their names in the SELECT expression and the table for INSERT may differ. If necessary, typecasting is performed.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> [<span class="keyword">TABLE</span>] [tableIdentifier] [columnsClause] [selectUnionStmt]</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> example_table <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> example_table</span><br></pre></td></tr></table></figure><h3 id="INSERT-INFILE"><a href="#INSERT-INFILE" class="headerlink" title="INSERT INFILE"></a>INSERT INFILE</h3><p>Insert data to a table from a file.  gateway-client only<br>Supported file format:</p><ul><li><p>.csv </p></li><li><p>.json </p></li><li><p>.avro </p></li><li><p>.parquet</p></li></ul><p>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> [<span class="keyword">TABLE</span>] [tableIdentifier] [columnsClause] [FORMAT format_name] INFILE filepath</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_table FORMAT csvwithnames INFILE <span class="string">&#x27;/Users/my_name/Downloads/ETH-USD.csv&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Rename-Statement"><a href="#Rename-Statement" class="headerlink" title="Rename Statement"></a>Rename Statement</h2><h3 id="RENAME-TABLE"><a href="#RENAME-TABLE" class="headerlink" title="RENAME TABLE"></a>RENAME TABLE</h3><p>Renames one or more tables.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RENAME <span class="keyword">TABLE</span> [tableIdentifier] <span class="keyword">TO</span> [tableIdentifier], [tableIdentifier] <span class="keyword">TO</span> [tableIdentifier]</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># step <span class="number">1</span>: <span class="keyword">create</span> a <span class="keyword">table</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `example_table`</span><br><span class="line">(</span><br><span class="line">    `a` Int8,</span><br><span class="line">    `b` String,</span><br><span class="line">    `c` <span class="type">Date</span></span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> `CnchMergeTree`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (`a`)</span><br><span class="line"></span><br><span class="line"># step <span class="number">2</span>: rename the <span class="keyword">new</span> created <span class="keyword">table</span></span><br><span class="line">RENAME <span class="keyword">TABLE</span> example_table <span class="keyword">to</span> new_table_name</span><br></pre></td></tr></table></figure><h2 id="Select-Union-Statement"><a href="#Select-Union-Statement" class="headerlink" title="Select Union Statement"></a>Select Union Statement</h2><p>SELECT query,  possibly with UNION ALL.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[selectStmt] [<span class="keyword">UNION</span> <span class="keyword">ALL</span> [selectStmt]...</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.example_table1 (column1 <span class="type">Date</span>, column2 UInt32) ENGINE<span class="operator">=</span>CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> column1;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.example_table2 (column1 <span class="type">Date</span>, column2 UInt32) ENGINE<span class="operator">=</span>CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> column1;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.example_table1 <span class="keyword">VALUES</span> (<span class="string">&#x27;2015-08-07&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.example_table2 <span class="keyword">VALUES</span> (<span class="string">&#x27;2015-08-08&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test.example_table1 <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test.example_table2;</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>column1</strong></th><th><strong>column2</strong></th></tr></thead><tbody><tr><td>2015-08-07</td><td>1</td></tr></tbody></table><table><thead><tr><th><strong>column1</strong></th><th><strong>column2</strong></th></tr></thead><tbody><tr><td>2015-08-08</td><td>2</td></tr></tbody></table><h2 id="Select-Statement"><a href="#Select-Statement" class="headerlink" title="Select Statement"></a>Select Statement</h2><p><code>SELECT</code> queries perform data retrieval from tables.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[withClause]</span><br><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">DISTINCT</span>][columnExprList])</span><br><span class="line">[fromClause]</span><br><span class="line">[arrayJoinClause]</span><br><span class="line">[joinClause]</span><br><span class="line">[prewhereClause]</span><br><span class="line">[whereClause]</span><br><span class="line">[groupByClause]</span><br><span class="line">[havingClause]</span><br><span class="line">[orderByClause]</span><br><span class="line">[limitByClause]</span><br><span class="line">[limitClause]</span><br><span class="line">[settingsClause]</span><br></pre></td></tr></table></figure><ul><li><p><code>DISTINCT</code> , only unique rows will remain in a query result. It works with NULL as if <code>NULL</code> were a specific value, and <code>NULL==NULL</code> . </p></li><li><p><code>Asterisk symbol (*)</code> , An asterisk can be put in any part of a query instead of an expression. When the query is analyzed, the asterisk is expanded to a list of all table columns (excluding the <code>MATERIALIZED</code> and <code>ALIAS</code> columns).</p></li></ul><h2 id="Set-Statement"><a href="#Set-Statement" class="headerlink" title="Set Statement"></a>Set Statement</h2><p>Set a list of settings for the current session.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> [settingExprList]</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">set</span> virtual warehouse</span><br><span class="line"><span class="keyword">SET</span> WAREHOUSE your_warehouse_name</span><br><span class="line"></span><br><span class="line"># <span class="keyword">set</span> role</span><br><span class="line"><span class="keyword">SET</span> ROLE AccountAdmin</span><br><span class="line"></span><br><span class="line"># <span class="keyword">set</span> if <span class="keyword">to</span> choose ansi mode <span class="keyword">or</span> <span class="keyword">not</span></span><br><span class="line"><span class="keyword">SET</span> ansi_sql <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="Show-Statement"><a href="#Show-Statement" class="headerlink" title="Show Statement"></a>Show Statement</h2><h3 id="SHOW-DATABASES"><a href="#SHOW-DATABASES" class="headerlink" title="SHOW DATABASES"></a>SHOW DATABASES</h3><p>Prints a list of all databases. The command does not require a running warehouse to execute.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES</span><br></pre></td></tr></table></figure><p><strong>Example</strong>s</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>Name</strong></th><th><strong>CreatedAt</strong></th><th><strong>CreatedBy</strong></th><th><strong>UpdatedAt</strong></th><th><strong>UpdatedBy</strong></th><th><strong>LastQueriedAt</strong></th><th><strong>LastQueriedBy</strong></th><th><strong>Comments</strong></th><th><strong>Engine</strong></th></tr></thead><tbody><tr><td>db_name1</td><td>1627366525</td><td>123456</td><td>1627366525</td><td>123456</td><td>1627366525</td><td>123456</td><td>comment here</td><td></td></tr><tr><td>db_name2</td><td>1627366525</td><td>123456</td><td>1627366525</td><td>123456</td><td>1627366525</td><td>123456</td><td>comment here</td><td></td></tr></tbody></table><h3 id="SHOW-TABLES"><a href="#SHOW-TABLES" class="headerlink" title="SHOW TABLES"></a>SHOW TABLES</h3><p>Displays a list of tables. The command does not require a running warehouse to execute.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES [<span class="keyword">FROM</span> [databaseIdentifier] [<span class="keyword">LIKE</span> STRING_LITERAL]</span><br></pre></td></tr></table></figure><p>If the <code>FROM</code> clause is not specified, the query returns the list of tables from the current database.<br><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES <span class="keyword">FROM</span> my_db <span class="keyword">LIKE</span> <span class="string">&#x27;%table&#x27;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>Name</strong></th><th><strong>CreatedAt</strong></th><th><strong>CreatedBy</strong></th><th><strong>UpdatedAt</strong></th><th><strong>UpdatedBy</strong></th><th><strong>LastQueriedAt</strong></th><th><strong>LastQueriedBy</strong></th><th><strong>Type</strong></th><th><strong>HasUniqueKey</strong></th></tr></thead><tbody><tr><td>sells_table</td><td>1627366525</td><td>123456</td><td>1627366525</td><td>123456</td><td>1627366525</td><td>123456</td><td>TABLE</td><td>0</td></tr><tr><td>view_table</td><td>1627366525</td><td>123456</td><td>1627366525</td><td>123456</td><td>1627366525</td><td>123456</td><td>VIEW</td><td>0</td></tr></tbody></table><h3 id="SHOW-CREATE-TABLE"><a href="#SHOW-CREATE-TABLE" class="headerlink" title="SHOW CREATE TABLE"></a>SHOW CREATE TABLE</h3><p>Display table create sql<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> [<span class="keyword">TABLE</span>] [tableIdentifier]</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># step <span class="number">1</span>: <span class="keyword">create</span> a <span class="keyword">table</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `example_table`</span><br><span class="line">(</span><br><span class="line">    `order_by_column` String</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> `CnchMergeTree`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (`order_by_column`)</span><br><span class="line"></span><br><span class="line"># step <span class="number">2</span>: <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> example_table</span><br></pre></td></tr></table></figure><table><thead><tr><th>Query</th></tr></thead><tbody><tr><td><code>CREATE TABLE </code>example_db<code>.</code>example_table<code>COMMENT &#39;&#39;,(,   </code>order_by_column<code> String,),ENGINE=</code>CnchMergeTree<code>,PRIMARY KEY </code>order_by_column<code>,ORDER BY </code>order_by_column<code>;</code></td></tr></tbody></table><h2 id="Truncate-Statement"><a href="#Truncate-Statement" class="headerlink" title="Truncate Statement"></a>Truncate Statement</h2><p>Removes all data from a table.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">EXISTS</span>] [tableIdentifier]</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> example_table</span><br></pre></td></tr></table></figure><h2 id="Use-Statement"><a href="#Use-Statement" class="headerlink" title="Use Statement"></a>Use Statement</h2><p>Sets the current database for the session. The current database is used for searching for tables if the database is not explicitly defined in the query with a dot before the table name.<br>Note: This query can’t be made when using the HTTP protocol, since there is no concept of a session.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE [databaseIdentifier];</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE example_db</span><br></pre></td></tr></table></figure><h2 id="Database-Identifier"><a href="#Database-Identifier" class="headerlink" title="Database Identifier"></a>Database Identifier</h2><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">database_name</span><br></pre></td></tr></table></figure><ul><li>database_name: String. Name of the database.</li></ul><h2 id="Table-Identifier"><a href="#Table-Identifier" class="headerlink" title="Table Identifier"></a>Table Identifier</h2><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[database_name.]table_name</span><br></pre></td></tr></table></figure><ul><li><p>database_name: String. Name of the database. </p></li><li><p>table_name: String. Name of the table. </p></li><li><p>If database_name is not provided, current database will be used.</p></li></ul><h2 id="Table-Column-Definition"><a href="#Table-Column-Definition" class="headerlink" title="Table Column Definition"></a>Table Column Definition</h2><p>Column definition</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">column_name column_type [tableColumnPropertyExpr] [COMMENT comment] [codecExpr]</span><br><span class="line">column_name [column_type] [tableColumnPropertyExpr] [COMMENT comment] [codecExpr]</span><br></pre></td></tr></table></figure><ul><li>If column_type is not explicit declared, [tableColumnPropertyExpr] must be provided for column type inference.</li></ul><p><strong>Example</strong></p><ol><li>Column with explicit type</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id UInt32</span><br></pre></td></tr></table></figure><ol start="2"><li>Column with inexplicit type but type can be inferred from [tableColumnPropertyExpr] .</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id <span class="keyword">DEFAULT</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Column with comment</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id UInt32 COMMENT <span class="string">&#x27;id&#x27;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>Column with codec</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id UInt32 CODEC(LZ4)</span><br></pre></td></tr></table></figure><h2 id="Table-Column-Property-Expression"><a href="#Table-Column-Property-Expression" class="headerlink" title="Table Column Property Expression"></a>Table Column Property Expression</h2><p>Column properties.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DEFAULT</span> [columnExpr]</span><br></pre></td></tr></table></figure><ul><li><code>DEFAULT columnExpr</code> : Normal default value. If the INSERT query doesn’t specify the corresponding column, it will be filled in by computing the corresponding expression.</li></ul><p><strong>Example</strong></p><ol><li>Column with default expression</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id UInt32 <span class="keyword">DEFAULT</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="Setting-Expression-List"><a href="#Setting-Expression-List" class="headerlink" title="Setting Expression List"></a>Setting Expression List</h2><p><strong>Syntax</strong></p><p>settingExprList</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">settingExpr [,settingExpr]...</span><br></pre></td></tr></table></figure><p>settingExpr</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setting_name<span class="operator">=</span>setting_val</span><br></pre></td></tr></table></figure><ul><li><p>setting_name: String. Name of the setting. </p></li><li><p>setting_val: number or string. Value of the setting.</p></li></ul><h2 id="EngineClause"><a href="#EngineClause" class="headerlink" title="EngineClause"></a>EngineClause</h2><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ENGINE<span class="operator">=</span>engine_name</span><br><span class="line"><span class="comment">-- below are optinal field for table engine only</span></span><br><span class="line">[orderByClause]</span><br><span class="line">[partitionByClause]</span><br><span class="line">[primaryKeyClause]</span><br><span class="line">[uniqueKeyClause]</span><br><span class="line">[sampleByClause]</span><br><span class="line">[ttlClause]</span><br><span class="line">[settingsClause]</span><br></pre></td></tr></table></figure><ul><li><p>For database engine, engine_name can only be Cnch. </p></li><li><p>For table engine, engine_name can only be CnchMergeTree.</p></li></ul><h2 id="orderByClause"><a href="#orderByClause" class="headerlink" title="orderByClause"></a>orderByClause</h2><p><strong>Syntax</strong></p><p>orderByClause</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> orderExpr [,orderExpr]...</span><br></pre></td></tr></table></figure><p>orderExpr</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[columnExpr] [ASCENDING<span class="operator">|</span><span class="keyword">ASC</span><span class="operator">|</span>DESCENDING<span class="operator">|</span><span class="keyword">DESC</span>] [NULLS [<span class="keyword">FIRST</span><span class="operator">|</span><span class="keyword">LAST</span>] [<span class="keyword">COLLATE</span> STRING_LITERAL]</span><br></pre></td></tr></table></figure><ul><li><p><code>[ASCENDING|ASC|DESCENDING|DESC]</code> : determines the sorting direction. If the direction is not specified, <code>ASC</code> is assumed. </p></li><li><p><code>[NULLS [FIRST|LAST]</code> : determines <code>NaN</code> and <code>NULL</code> sorting order. </p><ul><li><p>By default or with the <code>NULLS LAST</code> modifier: first the values, then <code>NaN</code> , then <code>NULL</code> . </p></li><li><p>With the <code>NULLS FIRST</code> modifier: first <code>NULL</code> , then <code>NaN</code> , then other values.</p></li></ul></li><li><p><code>[COLLATE STRING_LITERAL]</code> : For sorting by String values, you can specify collation. </p><ul><li><p>Collate is supported in LowCardinality, Nullable, Array and Tuple </p></li><li><p>When using <code>COLLATE</code> , sorting is always case-insensitive. </p></li><li><p>only recommend using <code>COLLATE</code> for final sorting of a small number of rows, since sorting with <code>COLLATE</code> is less efficient than normal sorting by bytes.</p></li></ul></li></ul><p><strong>Example</strong></p><ol><li>Order by multiple orderExpr</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.orderByClause (id UInt32, val UInt32) ENGINE<span class="operator">=</span>CnchMergeTree() <span class="keyword">ORDER</span> <span class="keyword">BY</span> id;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> test.orderByClause <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">5</span>),(<span class="number">1</span>,<span class="number">15</span>),(<span class="number">2</span>,<span class="number">5</span>),(<span class="number">2</span>,<span class="number">15</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test.orderByClause <span class="keyword">ORDER</span> <span class="keyword">BY</span> id <span class="keyword">ASC</span>, val <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>Order by NULLS FIRST</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.orderByClause (id UInt32, val Nullable(UInt32)) ENGINE<span class="operator">=</span>CnchMergeTree() <span class="keyword">ORDER</span> <span class="keyword">BY</span> id;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.orderByClause <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">2</span>),(<span class="number">2</span>,<span class="keyword">NULL</span>),(<span class="number">3</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test.orderByClause <span class="keyword">ORDER</span> <span class="keyword">BY</span> val <span class="keyword">DESC</span> NULLS <span class="keyword">FIRST</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>Order by with COLLATE</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.orderByClause (x UInt32, s Nullable(String)) ENGINE<span class="operator">=</span>CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> x;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.orderByClause <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;bca&#x27;</span>),(<span class="number">2</span>,<span class="keyword">NULL</span>),(<span class="number">3</span>,<span class="string">&#x27;ABC&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;123a&#x27;</span>),(<span class="number">5</span>,<span class="string">&#x27;abc&#x27;</span>),(<span class="number">6</span>,<span class="keyword">NULL</span>),(<span class="number">7</span>,<span class="string">&#x27;BCA&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test.orderByClause <span class="keyword">ORDER</span> <span class="keyword">BY</span> s <span class="keyword">ASC</span> <span class="keyword">COLLATE</span> <span class="string">&#x27;ru&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="partitionByClause"><a href="#partitionByClause" class="headerlink" title="partitionByClause"></a>partitionByClause</h2><p>Used by engineClause to define the partition key. Partition key can be any expression from the table columns.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> [columnExpr]</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><ol><li>Partition key defined by a columnExpr</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test.partitionByClause</span><br><span class="line">(</span><br><span class="line">    VisitDate <span class="type">Date</span>,</span><br><span class="line">    <span class="keyword">Hour</span> UInt8,</span><br><span class="line">    ClientID UUID</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> CnchMergeTree</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> VisitDate</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">Hour</span>;</span><br></pre></td></tr></table></figure><p>In this example, records will be partitioned by the VisitDate.<br>2. Partition key defined in a tuple of columnExpr </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test.partitionByClause</span><br><span class="line">(</span><br><span class="line">    VisitDate <span class="type">Date</span>,</span><br><span class="line">    <span class="keyword">Hour</span> UInt8,</span><br><span class="line">    ClientID UUID</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> CnchMergeTree</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> (VisitDate,<span class="keyword">Hour</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">Hour</span>;</span><br></pre></td></tr></table></figure><p>In this example, records will be partitioned by the hour of the visitDate.</p><h2 id="primaryKeyClause"><a href="#primaryKeyClause" class="headerlink" title="primaryKeyClause"></a>primaryKeyClause</h2><p>Used by engineClause to define the primary key if it differs from order by key.<br>By default the primary key is the same as the order by key. Thus in most cases it is unnecessary to specify a separate primaryKeyClause.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">PRIMARY</span> KEY [columnExpr]</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test.primaryKeyClause</span><br><span class="line">(</span><br><span class="line">    VisitDate <span class="type">Date</span>,</span><br><span class="line">    <span class="keyword">Hour</span> UInt8,</span><br><span class="line">    ClientID UUID</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> CnchMergeTree</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (VisitDate,<span class="keyword">Hour</span>)</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY VisitDate;</span><br></pre></td></tr></table></figure><h2 id="uniqueKeyClause"><a href="#uniqueKeyClause" class="headerlink" title="uniqueKeyClause"></a>uniqueKeyClause</h2><p>Used by engineClause to define the unique key. If specified, the table creates a partition-level constraint that all unique key values in the same partition must be distinct. If you try to insert a row with a unique key that matches an existing row, it will first delete the old row and then insert the new row.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UNIQUE</span> KEY [columnExpr]</span><br></pre></td></tr></table></figure><p>Note that only expressions with the following data types can be used in UNIQUE KEY</p><ul><li><p>Primary data type: <code>[U]Int8/16/32/64, Boolean, Date, DateTime, String</code> </p></li><li><p>Composite date type: <code>Tuple</code> composed of elements in supported primary data types</p></li></ul><p><strong>Example</strong></p><ol><li>Unique key defined by a single column</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test.uniqueKeyClause</span><br><span class="line">(</span><br><span class="line">  `event_date` <span class="type">Date</span>,</span><br><span class="line">  `order_id` UInt64,</span><br><span class="line">  `state` UInt32,</span><br><span class="line">  `amount` UInt64</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> CnchMergeTree</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> event_date</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> state</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY order_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- rows with the same key will replace previous rows</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.uniqueKeyClause <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;2021-03-01&#x27;</span>, <span class="number">1001</span>, <span class="number">1</span>, <span class="number">100</span>),</span><br><span class="line">(<span class="string">&#x27;2021-03-01&#x27;</span>, <span class="number">1002</span>, <span class="number">1</span>, <span class="number">200</span>),</span><br><span class="line">(<span class="string">&#x27;2021-03-01&#x27;</span>, <span class="number">1001</span>, <span class="number">2</span>, <span class="number">100</span>),</span><br><span class="line">(<span class="string">&#x27;2021-03-02&#x27;</span>, <span class="number">1001</span>, <span class="number">1</span>, <span class="number">400</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test.uniqueKeyClause <span class="keyword">ORDER</span> <span class="keyword">BY</span> event_date, order_id;</span><br><span class="line">┌─event_date─┬─order_id─┬─state─┬─amount─┐</span><br><span class="line">│ <span class="number">2021</span><span class="number">-03</span><span class="number">-01</span> │     <span class="number">1001</span> │     <span class="number">2</span> │    <span class="number">100</span> │</span><br><span class="line">│ <span class="number">2021</span><span class="number">-03</span><span class="number">-01</span> │     <span class="number">1002</span> │     <span class="number">1</span> │    <span class="number">200</span> │</span><br><span class="line">│ <span class="number">2021</span><span class="number">-03</span><span class="number">-02</span> │     <span class="number">1001</span> │     <span class="number">1</span> │    <span class="number">400</span> │</span><br><span class="line">└────────────┴──────────┴───────┴────────┘</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.uniqueKeyClause <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;2021-03-01&#x27;</span>, <span class="number">1002</span>, <span class="number">2</span>, <span class="number">200</span>),</span><br><span class="line">(<span class="string">&#x27;2021-03-02&#x27;</span>, <span class="number">1001</span>, <span class="number">2</span>, <span class="number">400</span>),</span><br><span class="line">(<span class="string">&#x27;2021-03-02&#x27;</span>, <span class="number">1002</span>, <span class="number">1</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test.uniqueKeyClause <span class="keyword">ORDER</span> <span class="keyword">BY</span> event_date, order_id;</span><br><span class="line">┌─event_date─┬─order_id─┬─state─┬─amount─┐</span><br><span class="line">│ <span class="number">2021</span><span class="number">-03</span><span class="number">-01</span> │     <span class="number">1001</span> │     <span class="number">2</span> │    <span class="number">100</span> │</span><br><span class="line">│ <span class="number">2021</span><span class="number">-03</span><span class="number">-01</span> │     <span class="number">1002</span> │     <span class="number">2</span> │    <span class="number">200</span> │</span><br><span class="line">│ <span class="number">2021</span><span class="number">-03</span><span class="number">-02</span> │     <span class="number">1001</span> │     <span class="number">2</span> │    <span class="number">400</span> │</span><br><span class="line">│ <span class="number">2021</span><span class="number">-03</span><span class="number">-02</span> │     <span class="number">1002</span> │     <span class="number">1</span> │    <span class="number">300</span> │</span><br><span class="line">└────────────┴──────────┴───────┴────────┘</span><br></pre></td></tr></table></figure><ol start="2"><li>Composite unique key</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test.uniqueKeyClause</span><br><span class="line">(</span><br><span class="line">  `event_date` <span class="type">Date</span>,</span><br><span class="line">  `region` UInt64,</span><br><span class="line">  `state` String,</span><br><span class="line">  `amount` UInt64</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> CnchMergeTree</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> event_date</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> state</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY (region, state);</span><br></pre></td></tr></table></figure><h2 id="sampleByClause"><a href="#sampleByClause" class="headerlink" title="sampleByClause"></a>sampleByClause</h2><p>Used by engineClause to define the sample key. The sampling expression must contain primary key and result of sampling expression must be unsigned integer.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SAMPLE <span class="keyword">BY</span> [columnExpr]</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.sampleByClause </span><br><span class="line">(</span><br><span class="line">    id UInt32</span><br><span class="line">) </span><br><span class="line">ENGINE<span class="operator">=</span>CnchMergeTree </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> id </span><br><span class="line">SAMPLE <span class="keyword">BY</span> id;</span><br></pre></td></tr></table></figure><h2 id="ttlClause"><a href="#ttlClause" class="headerlink" title="ttlClause"></a>ttlClause</h2><p>Expression to specify storage duration of rows.</p><ul><li><p>columnExpr return results must have one <code>Date</code> or <code>DateTime</code> column. </p></li><li><p>Columns used in ttlClause must be in partition by columns.</p></li></ul><p>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TTL [columnExpr]</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test.ttlClause</span><br><span class="line">(</span><br><span class="line">    VisitDate <span class="type">Date</span>,</span><br><span class="line">    <span class="keyword">Hour</span> UInt8,</span><br><span class="line">    ClientID UUID</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> CnchMergeTree</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">Hour</span></span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> VisitDate</span><br><span class="line">TTL VisitDate <span class="operator">+</span> <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">DAY</span>；</span><br></pre></td></tr></table></figure><h2 id="settingsClause"><a href="#settingsClause" class="headerlink" title="settingsClause"></a>settingsClause</h2><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SETTINGS [settingExprList]</span><br></pre></td></tr></table></figure><h2 id="columnsClause"><a href="#columnsClause" class="headerlink" title="columnsClause"></a>columnsClause</h2><p>Used by insertStmt to represent a list of columns.<br><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(column_name[,column_name]...)</span><br></pre></td></tr></table></figure><h2 id="withClause"><a href="#withClause" class="headerlink" title="withClause"></a>withClause</h2><p>Bytehouse supports Common Table Expressions( <a href="https://en.wikipedia.org/wiki/Hierarchical_and_recursive_queries_in_SQL">CTE</a> ). The results of WITH clause can be used in the remaining <code>SELECT</code> query. There are certain limitations to the support, including</p><ul><li><p>Recursions are not allowed in CTE </p></li><li><p>Subqueries are not allowed in CTE</p></li></ul><p>We only support below syntax.</p><p>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> [columnExpr] <span class="keyword">AS</span> identifier</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><ol><li>Using constant expression as “variable”</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> <span class="string">&#x27;2019-08-01 15:23:00&#x27;</span> <span class="keyword">as</span> ts <span class="keyword">SELECT</span> ts</span><br></pre></td></tr></table></figure><ol start="3"><li>Using results of a scalar subquery (1 row)</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* this example would return TOP 10 of most huge tables */</span></span><br><span class="line"><span class="keyword">WITH</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line">) <span class="keyword">AS</span> number</span><br><span class="line"><span class="keyword">SELECT</span> number;</span><br></pre></td></tr></table></figure><h2 id="limitClause"><a href="#limitClause" class="headerlink" title="limitClause"></a>limitClause</h2><p>** Syntax**</p><p>select the first <code>m</code> rows from the result.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LIMIT m</span><br></pre></td></tr></table></figure><p>select the <code>m</code> rows from the result after skipping the first <code>n</code> rows.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LIMIT n, m</span><br><span class="line">LIMIT m <span class="keyword">OFFSET</span> n</span><br></pre></td></tr></table></figure><ul><li><p><code>n</code> and <code>m</code> must be non-negative integers. </p></li><li><p>If there is no orderByClause that explicitly sorts results, the choice of rows for the result may be arbitrary and non-deterministic.</p></li></ul><p><strong>Example</strong></p><ol><li>Example of Limit m.</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.limitClause (id UInt32) engine<span class="operator">=</span>CnchMergeTree() <span class="keyword">order</span> <span class="keyword">by</span> id;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.limitClause <span class="keyword">VALUES</span> (<span class="number">1</span>),(<span class="number">2</span>),(<span class="number">3</span>),(<span class="number">4</span>),(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test.limitClause LIMIT <span class="number">2</span>; <span class="comment">-- first 2 values will be return</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Example of Limit n,m</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.limitClause (id UInt32) engine<span class="operator">=</span>CnchMergeTree() <span class="keyword">order</span> <span class="keyword">by</span> id;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.limitClause <span class="keyword">VALUES</span> (<span class="number">1</span>),(<span class="number">2</span>),(<span class="number">3</span>),(<span class="number">4</span>),(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test.limitClause LIMIT <span class="number">1</span>,<span class="number">2</span>; <span class="comment">-- skip first value，next 2 values will be return</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test.limitClause LIMIT <span class="number">2</span> <span class="keyword">OFFSET</span> <span class="number">1</span>; <span class="comment">-- skip first value，next 2 values will be return</span></span><br></pre></td></tr></table></figure><h2 id="limitByClause"><a href="#limitByClause" class="headerlink" title="limitByClause"></a>limitByClause</h2><p>select the <code>m</code> rows for each distinct value of <code>expressions</code><br>** Syntax**</p><p>select the first <code>m</code> rows from the result for each distinct value of columnExpr.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LIMIT m <span class="keyword">BY</span> [columnExprList]</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><ol><li>Example of Limit m by columnExpr</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test.limitByClause(id UInt32, val UInt32) ENGINE <span class="operator">=</span> CnchMergeTree() <span class="keyword">order</span> <span class="keyword">by</span> id;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.limitByClause <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">10</span>), (<span class="number">1</span>, <span class="number">11</span>), (<span class="number">1</span>, <span class="number">12</span>), (<span class="number">2</span>, <span class="number">20</span>), (<span class="number">2</span>, <span class="number">21</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test.limitByClause <span class="keyword">ORDER</span> <span class="keyword">BY</span> id, val LIMIT <span class="number">2</span> <span class="keyword">BY</span> id; <span class="comment">-- expect 4 rows. (1, 10), (1, 11), (2, 20), (2, 21) </span></span><br></pre></td></tr></table></figure><p>In this example, for each id (include value 1 and 2), we need to return 2 rows.</p><h2 id="havingClause"><a href="#havingClause" class="headerlink" title="havingClause"></a>havingClause</h2><p>Filtering the aggregation results produced by groupByClause. It is similar to the whereClause, but the difference is that <code>WHERE</code> is performed before aggregation, while <code>HAVING</code> is performed after it.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">HAVING</span> [columnExpr](http:<span class="operator">/</span><span class="operator">/</span>columnexpr<span class="operator">/</span>)</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test.havingClause(id UInt32, val UInt32) ENGINE <span class="operator">=</span> CnchMergeTree() <span class="keyword">ORDER</span> <span class="keyword">BY</span> id;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.havingClause <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">10</span>), (<span class="number">1</span>, <span class="number">11</span>), (<span class="number">1</span>, <span class="number">12</span>), (<span class="number">2</span>, <span class="number">20</span>), (<span class="number">2</span>, <span class="number">21</span>);</span><br><span class="line"><span class="keyword">SELECT</span> id <span class="keyword">FROM</span> test.havingClause <span class="keyword">GROUP</span> <span class="keyword">BY</span> id <span class="keyword">HAVING</span> <span class="built_in">count</span>(id)<span class="operator">&gt;</span><span class="number">2</span>; <span class="comment">-- only 1 is expected. </span></span><br></pre></td></tr></table></figure><h2 id="arrayJoinClause"><a href="#arrayJoinClause" class="headerlink" title="arrayJoinClause"></a>arrayJoinClause</h2><p>For table contains array column, array join can produce a new table that has a column with each individual array element of that initial column, while values of other columns are duplicated<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">LEFT</span>] <span class="keyword">ARRAY</span> <span class="keyword">JOIN</span> [columnExprList]</span><br></pre></td></tr></table></figure><ul><li><p>You can specify only one arrayJoinClause in a <code>SELECT</code> query. </p></li><li><p><code>[LEFT] ARRAY JOIN</code> : types of ARRAY JOIN </p><ul><li><p><code>ARRAY JOIN</code> - In base case, empty arrays are not included in the result of <code>JOIN</code> . </p></li><li><p><code>LEFT ARRAY JOIN</code> - The result of <code>JOIN</code> contains rows with empty arrays. The value for an empty array is set to the default value for the array element type (usually 0, empty string or NULL).</p></li></ul></li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test.arrayJoinClause(s String, arr <span class="keyword">Array</span>(UInt8)) ENGINE <span class="operator">=</span> CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> s;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.arrayJoinClause <span class="keyword">VALUES</span> (<span class="string">&#x27;Hello&#x27;</span>, [<span class="number">1</span>,<span class="number">2</span>]), (<span class="string">&#x27;World&#x27;</span>, [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]), (<span class="string">&#x27;Goodbye&#x27;</span>, []);</span><br><span class="line"><span class="keyword">SELECT</span> s, arr <span class="keyword">FROM</span> test.arrayJoinClause <span class="keyword">ARRAY</span> <span class="keyword">JOIN</span> arr;</span><br></pre></td></tr></table></figure><h2 id="prewhereClause"><a href="#prewhereClause" class="headerlink" title="prewhereClause"></a>prewhereClause</h2><p>Prewhere is an optimization to apply filtering more efficiently. It is enabled by default even if <code>PREWHERE</code> clause is not specified explicitly. It works by automatically moving part of WHERE condition to prewhere stage. The role of <code>PREWHERE</code> clause is only to control this optimization if you think that you know how to do it better than it happens by default.<br>With prewhere optimization, at first only the columns necessary for executing prewhere expression are read. Then the other columns are read that are needed for running the rest of the query, but only those blocks where the prewhere expression is “true” at least for some rows. If there are a lot of blocks where prewhere expression is “false” for all rows and prewhere needs less columns than other parts of query, this often allows to read a lot less data from disk for query execution.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PREWHERE [columnExpr](http:<span class="operator">/</span><span class="operator">/</span>columnexpr<span class="operator">/</span>)</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test.prewhereClause(id UInt32, val UInt32) ENGINE <span class="operator">=</span> CnchMergeTree() <span class="keyword">ORDER</span> <span class="keyword">BY</span> id;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.prewhereClause <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">10</span>), (<span class="number">1</span>, <span class="number">11</span>), (<span class="number">1</span>, <span class="number">12</span>), (<span class="number">2</span>, <span class="number">20</span>), (<span class="number">2</span>, <span class="number">21</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test.prewhereClause PREWHERE id<span class="operator">=</span><span class="number">1</span> <span class="keyword">WHERE</span> val<span class="operator">&gt;</span><span class="number">10</span>; <span class="comment">-- (1, 11), (1, 12) expected</span></span><br></pre></td></tr></table></figure><h2 id="whereClause"><a href="#whereClause" class="headerlink" title="whereClause"></a>whereClause</h2><p>whereClause allows to filter the data that is coming from fromClause of <code>SELECT</code> . It must contain an expression with the <code>UInt8</code> type. This is usually an expression with comparison and logical operators.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> [columnExpr]</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test.whereClause(id UInt32, val UInt32) ENGINE <span class="operator">=</span> CnchMergeTree() <span class="keyword">ORDER</span> <span class="keyword">BY</span> id;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.whereClause <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">10</span>), (<span class="number">1</span>, <span class="number">11</span>), (<span class="number">1</span>, <span class="number">12</span>), (<span class="number">2</span>, <span class="number">20</span>), (<span class="number">2</span>, <span class="number">21</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test.whereClause <span class="keyword">WHERE</span> val<span class="operator">&gt;</span><span class="number">10</span>; <span class="comment">-- (1, 11), (1, 12), (2, 20), (2, 21) expected</span></span><br></pre></td></tr></table></figure><h2 id="fromClause"><a href="#fromClause" class="headerlink" title="fromClause"></a>fromClause</h2><p>The fromClause specifies the source to read data from:</p><ul><li><p>Table </p></li><li><p>Subquery </p></li><li><p>Table Function</p></li></ul><p>** Syntax**</p><p>Read data from table:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> [tableIdentifier] [<span class="keyword">FINAL</span>] [sampleClause] </span><br></pre></td></tr></table></figure><p>Read data from subquery:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ([selectUnionStmt]) [<span class="keyword">FINAL</span>] [sampleClause]</span><br></pre></td></tr></table></figure><p>Read data from table function:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> tableFunctionExpr [<span class="keyword">FINAL</span>] [sampleClause]</span><br></pre></td></tr></table></figure><ul><li><code>FINAL</code> : When <code>FINAL</code> is specified, ByteHouse fully merges the data before returning the result and thus performs all data transformations that happen during merges.</li></ul><p><strong>Example</strong></p><ol><li>Select from table</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test.fromClause (id UInt32, val UInt32) ENGINE<span class="operator">=</span>CnchMergeTree() <span class="keyword">ORDER</span> <span class="keyword">BY</span> id;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.fromClause <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">10</span>), (<span class="number">1</span>, <span class="number">11</span>), (<span class="number">1</span>, <span class="number">12</span>), (<span class="number">2</span>, <span class="number">20</span>), (<span class="number">2</span>, <span class="number">21</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test.fromClause; <span class="comment">-- expect 5 rows </span></span><br></pre></td></tr></table></figure><ol start="2"><li>Select from subquery</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test.fromClause (id UInt32, val UInt32) ENGINE<span class="operator">=</span>CnchMergeTree() <span class="keyword">ORDER</span> <span class="keyword">BY</span> id;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.fromClause <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">10</span>), (<span class="number">1</span>, <span class="number">11</span>), (<span class="number">1</span>, <span class="number">12</span>), (<span class="number">2</span>, <span class="number">20</span>), (<span class="number">2</span>, <span class="number">21</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test.fromClause LIMIT <span class="number">3</span>); <span class="comment">-- expect 3 rows </span></span><br></pre></td></tr></table></figure><ol start="3"><li>Select from tableFunctionExpr</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> numbers(<span class="number">10</span>); <span class="comment">-- expect 10 rows </span></span><br></pre></td></tr></table></figure><p>We use table function numbers here to generate a table with 10 rows.</p><h2 id="groupByClause"><a href="#groupByClause" class="headerlink" title="groupByClause"></a>groupByClause</h2><p><code>groupByClause</code> switches the <code>SELECT</code> query into an aggregation mode. [columnExprList] under <code>groupByClause</code> acts as grouping key and result of aggregating <code>SELECT</code> query will contain as many rows as there were unique values of grouping key in source table.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> [(][columnExprList][)] [<span class="keyword">WITH</span> <span class="keyword">ROLLUP</span><span class="operator">|</span><span class="keyword">WITH</span> <span class="keyword">CUBE</span>] [<span class="keyword">WITH</span> TOTALS]</span><br></pre></td></tr></table></figure><ul><li><p><code>NULL processing</code> : ByteHouse interprets NULL as a value. If group by keys contains NULL value, it will appear in the result. </p></li><li><p><code>[WITH ROLLUP]</code> :  calculate subtotals for the key expressions, based on their order in the <code>GROUP BY</code> list. </p><ul><li><p>The subtotals rows are added after the result table. </p></li><li><p>In the subtotals rows the values of already “grouped” key expressions are set to <code>0</code> or empty line.</p></li></ul></li><li><p><code>[WITH CUBE]</code> : calculate subtotals for every combination of the key expressions in the <code>GROUP BY</code> list. </p></li><li><p><code>[WITH TOTALS]</code> : calculate subtotals for a combination of all key expressions in the <code>GROUP BY</code> list.</p></li></ul><p><strong>Example</strong></p><ol><li>Group by key contains NULL value.</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.groupByClause (x UInt32, y Nullable(UInt32)) ENGINE<span class="operator">=</span>CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> x;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.groupByClause <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">2</span>),(<span class="number">2</span>,<span class="keyword">NULL</span>),(<span class="number">3</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sum</span>(x), y <span class="keyword">FROM</span> test.groupByClause <span class="keyword">GROUP</span> <span class="keyword">BY</span> y; </span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>sum(x)</strong></th><th><strong>y</strong></th></tr></thead><tbody><tr><td>4</td><td>2</td></tr><tr><td>3</td><td>3</td></tr><tr><td>5</td><td>NULL</td></tr></tbody></table><ol start="2"><li>Group by WITH ROLLUP modifier</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.groupByClause (<span class="keyword">year</span> UInt32, <span class="keyword">month</span> UInt32, <span class="keyword">day</span> UInt32) ENGINE<span class="operator">=</span>CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">year</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.groupByClause <span class="keyword">VALUES</span> (<span class="number">2019</span>,<span class="number">1</span>,<span class="number">5</span>),(<span class="number">2019</span>,<span class="number">1</span>,<span class="number">15</span>),(<span class="number">2020</span>,<span class="number">1</span>,<span class="number">5</span>),(<span class="number">2020</span>,<span class="number">1</span>,<span class="number">15</span>),(<span class="number">2021</span>,<span class="number">1</span>,<span class="number">5</span>),(<span class="number">2021</span>,<span class="number">1</span>,<span class="number">15</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">year</span>, <span class="keyword">month</span>, <span class="keyword">day</span>, <span class="built_in">count</span>() <span class="keyword">FROM</span> test.groupByClause <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">year</span>, <span class="keyword">month</span>, <span class="keyword">day</span> <span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>;</span><br></pre></td></tr></table></figure><p>As <code>GROUP BY</code> section has three key expressions, the result contains four tables with subtotals “rolled up” from right to left:</p><ul><li><p><code>GROUP BY year, month, day</code> ; </p></li><li><p><code>GROUP BY year, month</code> (and <code>day</code> column is filled with zeros); </p></li><li><p><code>GROUP BY year</code> (now <code>month, day</code> columns are both filled with zeros); </p></li><li><p>and totals (and all three key expression columns are zeros).</p></li></ul><ol start="3"><li>Group by WITH CUBE modifier</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.groupByClause (<span class="keyword">year</span> UInt32, <span class="keyword">month</span> UInt32, <span class="keyword">day</span> UInt32) ENGINE<span class="operator">=</span>CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">year</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.groupByClause <span class="keyword">VALUES</span> (<span class="number">2019</span>,<span class="number">1</span>,<span class="number">5</span>),(<span class="number">2019</span>,<span class="number">1</span>,<span class="number">15</span>),(<span class="number">2020</span>,<span class="number">1</span>,<span class="number">5</span>),(<span class="number">2020</span>,<span class="number">1</span>,<span class="number">15</span>),(<span class="number">2021</span>,<span class="number">1</span>,<span class="number">5</span>),(<span class="number">2021</span>,<span class="number">1</span>,<span class="number">15</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">year</span>, <span class="keyword">month</span>, <span class="keyword">day</span>, <span class="built_in">count</span>() <span class="keyword">FROM</span> test.groupByClause <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">year</span>, <span class="keyword">month</span>, <span class="keyword">day</span> <span class="keyword">WITH</span> <span class="keyword">CUBE</span>;</span><br></pre></td></tr></table></figure><p>As <code>GROUP BY</code> section has three key expressions, the result contains eight tables with subtotals for all key expression combinations:</p><ul><li><p><code>GROUP BY year, month, day</code> </p></li><li><p><code>GROUP BY year, month</code> </p></li><li><p><code>GROUP BY year, day</code> </p></li><li><p><code>GROUP BY year</code> </p></li><li><p><code>GROUP BY month, day</code> </p></li><li><p><code>GROUP BY month</code> </p></li><li><p><code>GROUP BY day</code> </p></li><li><p>and totals. (and all three key expression columns are zeros).</p></li></ul><ol start="4"><li>Group by WITH TOTAL modifier</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.groupByClause (<span class="keyword">year</span> UInt32, <span class="keyword">month</span> UInt32, <span class="keyword">day</span> UInt32) ENGINE<span class="operator">=</span>CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">year</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.groupByClause <span class="keyword">VALUES</span> (<span class="number">2019</span>,<span class="number">1</span>,<span class="number">5</span>),(<span class="number">2019</span>,<span class="number">1</span>,<span class="number">15</span>),(<span class="number">2020</span>,<span class="number">1</span>,<span class="number">5</span>),(<span class="number">2020</span>,<span class="number">1</span>,<span class="number">15</span>),(<span class="number">2021</span>,<span class="number">1</span>,<span class="number">5</span>),(<span class="number">2021</span>,<span class="number">1</span>,<span class="number">15</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">year</span>, <span class="keyword">month</span>, <span class="keyword">day</span>, <span class="built_in">count</span>() <span class="keyword">FROM</span> test.groupByClause <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">year</span>, <span class="keyword">month</span>, <span class="keyword">day</span> <span class="keyword">WITH</span> TOTALS;</span><br></pre></td></tr></table></figure><p>If the <code>WITH TOTALS</code> modifier is specified, another row will be calculated.</p><ul><li><p><code>GROUP BY year, month, day</code> </p></li><li><p>and totals. (and all three key expression columns are zeros).</p></li></ul><h2 id="subqueryClause"><a href="#subqueryClause" class="headerlink" title="subqueryClause"></a>subqueryClause</h2><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">AS</span> [selectUnionStmt]</span><br></pre></td></tr></table></figure><h2 id="sampleClause"><a href="#sampleClause" class="headerlink" title="sampleClause"></a>sampleClause</h2><p>The sampleClause allows for approximated <code>SELECT</code> query processing. With sampleClause enabled, query is not performed on all the data, but only on a certain fraction of data. This is useful when:</p><ul><li><p>Have strict timing requirements (like &lt;100ms) but you can’t justify the cost of additional hardware resources to meet them. </p></li><li><p>Raw data is not accurate, so approximation does not noticeably degrade the quality. </p></li><li><p>Business requirements target approximate results (for cost-effectiveness, or to market exact results to premium users).</p></li></ul><p>Note: To use sampling, you must declare sampling expression was specified during CnchMergeTree table creation, see [sampleByClause].<br><strong>Syntax</strong></p><p>Sample K. K is the number from 0 to 1.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SAMPLE K</span><br></pre></td></tr></table></figure><p>Sample N. N is integer larger than 1.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SAMPLE N</span><br></pre></td></tr></table></figure><p>SAMPLE K OFFSET M. K and M are numbers from 0 to 1.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SAMPLE K <span class="keyword">OFFSET</span> M</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><ol><li>Sample K</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.sampleClause (id UInt32) ENGINE<span class="operator">=</span>CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> id SAMPLE <span class="keyword">BY</span> id;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.sampleClause <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> numbers(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>() <span class="keyword">FROM</span> test.sampleClause SAMPLE <span class="number">0.1</span>; <span class="comment">-- 1000 is expected</span></span><br></pre></td></tr></table></figure><p>In this example, 10% of data will be used for approximation.<br>2. Sample N </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.sampleClause (id UInt32) ENGINE<span class="operator">=</span>CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> id SAMPLE <span class="keyword">BY</span> id;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.sampleClause <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> numbers(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>() <span class="keyword">FROM</span> test.sampleClause SAMPLE <span class="number">2</span>; <span class="comment">-- 1000 is expected</span></span><br></pre></td></tr></table></figure><p>In this example 2 rows of data will be used for approximation.<br>3. SAMPLE K OFFSET M </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.sampleClause (id UInt32) ENGINE<span class="operator">=</span>CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> id SAMPLE <span class="keyword">BY</span> id;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.sampleClause <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> numbers(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>() <span class="keyword">FROM</span> test.sampleClause SAMPLE <span class="number">0.1</span> <span class="keyword">OFFSET</span> <span class="number">0.2</span>;</span><br></pre></td></tr></table></figure><p>In this example, 10% of data will be used for approximation after skipping 20% of data.</p><h2 id="joinClause"><a href="#joinClause" class="headerlink" title="joinClause"></a>joinClause</h2><p>Join produces a new table by combining columns from one or multiple tables by using values common to each.<br>** Syntax**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">GLOBAL</span><span class="operator">|</span><span class="keyword">LOCAL</span>] [<span class="keyword">ANY</span><span class="operator">|</span><span class="keyword">ALL</span><span class="operator">|</span>ASOF] [<span class="keyword">INNER</span><span class="operator">|</span><span class="keyword">LEFT</span><span class="operator">|</span><span class="keyword">RIGHT</span><span class="operator">|</span><span class="keyword">FULL</span><span class="operator">|</span><span class="keyword">CROSS</span>] [<span class="keyword">OUTER</span>] <span class="keyword">JOIN</span> [tableIdentifier] <span class="keyword">ON</span><span class="operator">|</span><span class="keyword">USING</span> [columnExprList]</span><br></pre></td></tr></table></figure><ul><li><p><code>[GLOBAL|LOCAL]</code> : </p><pre><code>- `GLOBAL` , broadcast Join. Broadcast joins cannot be used when joining two large DataFrames.   - `LOCAL` , local join. Using distribution keys on the join columns can use local join. </code></pre></li><li><p><code>[ANY|ALL|ASOF]</code> : </p><ul><li><p><code>ANY</code> ,  If the right table has several matching rows, only the first one found is joined. If the right table has only one matching row, the results of ANY and ALL are the same. </p></li><li><p><code>ALL</code> , If the right table has several matching rows, ByteHouse creates a Cartesian product from matching rows. This is the normal JOIN behaviour from standard SQL. </p></li><li><p><code>ASOF</code> ,  For joining sequences with an uncertain match.</p></li></ul></li><li><p><code>[INNER|LEFT|RIGHT|FULL|CROSS]</code> : All standard <a href="https://en.wikipedia.org/wiki/Join_(SQL)">SQL JOIN</a> types </p><ul><li><p><code>INNER JOIN</code> , only matching rows are returned. </p></li><li><p><code>LEFT OUTER JOIN</code> , non-matching rows from left table are returned in addition to matching rows. </p></li><li><p><code>RIGHT OUTER JOIN</code> , non-matching rows from right table are returned in addition to matching rows. </p></li><li><p><code>FULL OUTER JOIN</code> , non-matching rows from both tables are returned in addition to matching rows. </p></li><li><p><code>CROSS JOIN</code> , produces cartesian product of whole tables, “join keys” are not specified.</p></li></ul></li><li><p><code>ON|USING</code> : Expressions from <code>ON</code> clause and columns from <code>USING</code> clause are called “join keys”.</p></li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.joinClause (number UInt64) ENGINE<span class="operator">=</span>CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> number;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.joinClause <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> numbers(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> number, joined <span class="keyword">FROM</span> test.joinClause <span class="keyword">ANY</span> <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> number <span class="operator">*</span> <span class="number">2</span> <span class="keyword">AS</span> number, number <span class="operator">*</span> <span class="number">10</span> <span class="operator">+</span> <span class="number">1</span> <span class="keyword">AS</span> joined <span class="keyword">FROM</span> test.joinClause LIMIT <span class="number">10</span>) js2 <span class="keyword">USING</span> number LIMIT <span class="number">10</span></span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>number</strong></th><th><strong>joined</strong></th></tr></thead><tbody><tr><td>0</td><td>1</td></tr><tr><td>1</td><td>NULL</td></tr><tr><td>2</td><td>21</td></tr><tr><td>3</td><td>NULL</td></tr><tr><td>4</td><td>41</td></tr><tr><td>5</td><td>NULL</td></tr><tr><td>6</td><td>61</td></tr><tr><td>7</td><td>NULL</td></tr><tr><td>8</td><td>81</td></tr><tr><td>9</td><td>NULL</td></tr></tbody></table><h2 id="columnExprList"><a href="#columnExprList" class="headerlink" title="columnExprList"></a>columnExprList</h2><p>A list of columnExpr seperate by Comma.<br>** Syntax**</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[columnExpr] [columnExpr]...</span><br></pre></td></tr></table></figure><h2 id="columnExpr"><a href="#columnExpr" class="headerlink" title="columnExpr"></a>columnExpr</h2><p>A columnExpr is a function, identifier, literal, application of an operator, expression in brackets, subquery, or asterisk. It can also contain an alias.</p>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> SQL_Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String</title>
      <link href="/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/string/"/>
      <url>/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/string/</url>
      
        <content type="html"><![CDATA[<h1 id="string"><a href="#string" class="headerlink" title="string"></a>string</h1><blockquote><p>Notice:<br>Some of the examples below are referenced from <a href="https://clickhouse.com/docs/en/sql-reference/functions/">ClickHouse Documentation</a> but have been adapted and modified to work in ByteHouse.</p></blockquote><h2 id="CHARACTER-LENGTH"><a href="#CHARACTER-LENGTH" class="headerlink" title="CHARACTER_LENGTH"></a>CHARACTER_LENGTH</h2><p>Returns the length of a string in Unicode code points (not in characters), assuming that the <code>string</code> contains a set of bytes that make up UTF-8 encoded text. If this assumption is not met, it returns some result (it does not throw an exception).</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CHARACTER_LENGTH(string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The String.</li></ul><p><strong>Returned value</strong></p><ul><li>The length of Char.</li></ul><p>Type: <code>UInt64</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select CHARACTER_LENGTH(&#x27;abcdef123&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─CHARACTER_LENGTH(&#x27;abcdef123&#x27;)─┐</span><br><span class="line">│ 9                             │</span><br><span class="line">└───────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>TODO：is this one same as CHAR_LENGTH ?</p><h2 id="CHAR-LENGTH"><a href="#CHAR-LENGTH" class="headerlink" title="CHAR_LENGTH"></a>CHAR_LENGTH</h2><p>Returns the length of a string in Unicode code points (not in characters), assuming that the <code>string</code> contains a set of bytes that make up UTF-8 encoded text. If this assumption is not met, it returns some result (it does not throw an exception).</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CHAR_LENGTH(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>s</code> – The string.</li></ul><p><strong>Returned value</strong></p><ul><li>The length of char.</li></ul><p>Type: <code>UInt64</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT CHAR_LENGTH(&#x27;abcdef123&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─CHAR_LENGTH(&#x27;abcdef123&#x27;)─┐</span><br><span class="line">│ 9                        │</span><br><span class="line">└──────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="alphaTokens"><a href="#alphaTokens" class="headerlink" title="alphaTokens"></a>alphaTokens</h2><p>Selects substrings of consecutive bytes from the ranges a-z and A-Z.Returns an array of substrings.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alphaTokens(string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li></ul><p><strong>Returned value</strong></p><ul><li>The array of substrings.</li></ul><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT alphaTokens(&#x27;abca1abc&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─alphaTokens(&#x27;abca1abc&#x27;)─┐</span><br><span class="line">│ [abca, abc]             │</span><br><span class="line">└─────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="appendTrailingCharIfAbsent"><a href="#appendTrailingCharIfAbsent" class="headerlink" title="appendTrailingCharIfAbsent"></a>appendTrailingCharIfAbsent</h2><p>If the <code>string</code> is non-empty and does not contain the <code>character</code> at the end, it appends the <code>character</code> to the end.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">appendTrailingCharIfAbsent(string, character)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li><li><code>character</code> – the character.</li></ul><p><strong>Returned value</strong></p><ul><li>The character appended to string.</li></ul><p>Type: <code>string</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT appendTrailingCharIfAbsent(&#x27;abc&#x27;, &#x27;2&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─appendTrailingCharIfAbsent(&#x27;abc&#x27;, &#x27;2&#x27;)─┐</span><br><span class="line">│ abc2                                   │</span><br><span class="line">└────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="arrayStringConcat"><a href="#arrayStringConcat" class="headerlink" title="arrayStringConcat"></a>arrayStringConcat</h2><p>Concatenates the strings listed in the array with the separator.<code>separator</code> is an optional parameter: a constant string, set to an empty string by default.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arrayStringConcat(array[, separator])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>array</code> – The array.</li><li><code>separator</code> – optional, separator.</li></ul><p><strong>Returned value</strong></p><ul><li>The concated string.</li></ul><p>Type: <code>string</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT arrayStringConcat([&#x27;abc&#x27;,&#x27;123&#x27;]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─arrayStringConcat([&#x27;abc&#x27;, &#x27;123&#x27;])─┐</span><br><span class="line">│ abc123                            │</span><br><span class="line">└───────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>other example</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT arrayStringConcat([&#x27;abc&#x27;, &#x27;123&#x27;], &#x27;,&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─arrayStringConcat([&#x27;abc&#x27;, &#x27;123&#x27;], &#x27;,&#x27;)─┐</span><br><span class="line">│ abc,123                                │</span><br><span class="line">└────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="base64Decode"><a href="#base64Decode" class="headerlink" title="base64Decode"></a>base64Decode</h2><p>Decode base64-encoded <code>string</code> into original string. In case of failure raises an exception.</p><p>Alias: <code>FROM_BASE64</code> .</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">base64Decode(string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li></ul><p><strong>Returned value</strong></p><ul><li>The decoded string.</li><li></li></ul><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT base64Decode(&#x27;SGVsbG8gQmFzZTY0&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─base64Decode(&#x27;SGVsbG8gQmFzZTY0&#x27;)─┐</span><br><span class="line">│ Hello Base64                     │</span><br><span class="line">└──────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="base64Encode"><a href="#base64Encode" class="headerlink" title="base64Encode"></a>base64Encode</h2><p>Encodes <code>string</code> into base64</p><p>Alias: <code>TO_BASE64</code> .</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">base64Encode(string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li></ul><p><strong>Returned value</strong></p><ul><li>The encoded string.</li><li></li></ul><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT base64Encode(&#x27;Hello Base64&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─base64Encode(&#x27;Hello Base64&#x27;)─┐</span><br><span class="line">│ SGVsbG8gQmFzZTY0             │</span><br><span class="line">└──────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h2><p>Concatenates the strings listed in the arguments, without a separator.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">concat(s1, s2, ...)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>s1</code>, <code>s2</code> … – Values of type String or FixedString.</li></ul><p><strong>Returned values</strong></p><ul><li>The string that results from concatenating the arguments.</li></ul><p>If any of argument values is <code>NULL</code> , <code>concat</code> returns <code>NULL</code> .</p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT concat(&#x27;Hello, &#x27;, &#x27;World!&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─concat(&#x27;Hello, &#x27;, &#x27;World!&#x27;)─┐</span><br><span class="line">│ Hello, World!               │</span><br><span class="line">└─────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="concatAssumeInjective"><a href="#concatAssumeInjective" class="headerlink" title="concatAssumeInjective"></a>concatAssumeInjective</h2><p>Same as concat , the difference is that you need to ensure that <code>concat(s1, s2, ...) → sn</code> is injective, it will be used for optimization of GROUP BY.</p><p>The function is named “injective” if it always returns different result for different values of arguments. In other words: different arguments never yield identical result.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">concatAssumeInjective(s1, s2, ...)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>s1</code>, <code>s2</code> … – Values of type String or FixedString.</li></ul><p><strong>Returned values</strong></p><ul><li>The String that results from concatenating the arguments.</li></ul><p>Note: If any of argument values is <code>NULL</code> , <code>concatAssumeInjective</code> returns <code>NULL</code> .</p><p><strong>Example</strong></p><p>Input table:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE test.key_val(`key1` String, `key2` String, `value` UInt32) ENGINE = CnchMergeTree ORDER BY key2;</span><br><span class="line">INSERT INTO test.key_val VALUES (&#x27;Hello, &#x27;,&#x27;World&#x27;,1), (&#x27;Hello, &#x27;,&#x27;World&#x27;,2), (&#x27;Hello, &#x27;,&#x27;World!&#x27;,3), (&#x27;Hello&#x27;,&#x27;, World!&#x27;,2);</span><br><span class="line">SELECT * from test.key_val;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">┌─key1───┬─key2─────┬─value─┐</span><br><span class="line">│ Hello  │ , World! │ 2     │</span><br><span class="line">│ Hello, │ World    │ 1     │</span><br><span class="line">│ Hello, │ World    │ 2     │</span><br><span class="line">│ Hello, │ World!   │ 3     │</span><br><span class="line">└────────┴──────────┴───────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Query:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT concat(key1, key2), sum(value) FROM test.key_val GROUP BY concatAssumeInjective(key1, key2);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">┌─concat(key1, key2)─┬─sum(value)─┐</span><br><span class="line">│ Hello,World        │ 3          │</span><br><span class="line">│ Hello,World!       │ 3          │</span><br><span class="line">│ Hello, World!      │ 2          │</span><br><span class="line">└────────────────────┴────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="convertCharset"><a href="#convertCharset" class="headerlink" title="convertCharset"></a>convertCharset</h2><p>Returns the <code>string</code> that was converted from the encoding in <code>from</code> to the encoding in <code>to</code>.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">convertCharset(s, from, to)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li><li><code>from</code> – Decoding from a character encoding type.</li><li><code>to</code> – Encoding to a character encoding type.</li></ul><p><strong>Returned value</strong></p><ul><li><code>to</code> character encoding type.</li></ul><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT base64Encode(toString(convertCharset(&#x27;abc&#x27;, &#x27;Unicode&#x27;, &#x27;UTF-8&#x27;)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─base64Encode(toString(convertCharset(&#x27;abc&#x27;, &#x27;Unicode&#x27;, &#x27;UTF-8&#x27;)))─┐</span><br><span class="line">│ 5oWi77+9                                                          │</span><br><span class="line">└───────────────────────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2><p>Counts the number of rows or not-NULL values.</p><p><strong>Syntax</strong></p><p>CNCH supports the following syntaxes for <code>count</code> :</p><ul><li><code>count(expr)</code> or <code>COUNT(DISTINCT expr)</code> .</li><li><code>count()</code> or <code>COUNT(*)</code> .</li></ul><p><strong>Arguments</strong></p><p>The function can take:</p><ul><li>Zero parameters.</li><li>One expression .</li></ul><p><strong>Returned value</strong></p><ul><li>If the function is called without parameters it counts the number of rows.</li><li>If the expression is passed, then the function counts how many times this expression returned not null. If the expression returns a Nullable -type value, then the result of <code>count</code> stays not <code>Nullable</code> . The function returns 0 if the expression returned <code>NULL</code> for all the rows.</li><li>In both cases the type of the returned value is UInt64.</li></ul><p><strong>Details</strong></p><p>CNCH supports the <code>COUNT(DISTINCT ...)</code> syntax. The behavior of this construction depends on the count_distinct_implementation setting. It defines which of the uniq* functions is used to perform the operation. The default is the uniqExact function.</p><p>The <code>SELECT count() FROM table</code> query is not optimized, because the number of entries in the table is not stored separately. It chooses a small column from the table and counts the number of values in it.</p><p>However <code>SELECT count(nullable_column) FROM table</code> query can be optimized by enabling the optimize_functions_to_subcolumns setting. With <code>optimize_functions_to_subcolumns = 1</code> the function reads only null subcolumn instead of reading and processing the whole column data. The query <code>SELECT count(n) FROM table</code> transforms to <code>SELECT sum(NOT n.null) FROM table</code> .</p><p><strong>Examples</strong></p><p>Example 1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE test.test_count (id Int32) ENGINE = CnchMergeTree ORDER BY id;</span><br><span class="line">INSERT INTO test.test_count(id) VALUES(1),(2),(3),(4),(5),(5);</span><br><span class="line">select count() from test.test_count;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─count()─┐</span><br><span class="line">│ 6       │</span><br><span class="line">└─────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT name, value FROM system.settings WHERE name = &#x27;count_distinct_implementation&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─name──────────────────────────┬─value─────┐</span><br><span class="line">│ count_distinct_implementation │ uniqExact │</span><br><span class="line">└───────────────────────────────┴───────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select count(distinct(id)) from test.`test_count`;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─uniqExact(id)─┐</span><br><span class="line">│ 5             │</span><br><span class="line">└───────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>This example shows that <code>count(DISTINCT num)</code> is performed by the <code>uniqExact</code> function according to the <code>count_distinct_implementation</code> setting value.</p><h2 id="e"><a href="#e" class="headerlink" title="e"></a>e</h2><p>Returns a Float64 number that is close to the number e.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li>N.A</li></ul><p><strong>Returned value</strong></p><ul><li>Returns a Float64 number that is close to the number e.</li></ul><p>Type: <code>Float64</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT e();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─e()───────────────────┐</span><br><span class="line">│ 2.718281828459045e+00 │</span><br><span class="line">└───────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h2><p>Returns 1 for an empty string or 0 for a non-empty string.</p><p>A string is considered non-empty if it contains at least one byte, even if this is a space or a null byte.</p><p>The function also works for arrays.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">empty(string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li></ul><p><strong>Returned value</strong></p><ul><li>Returns 1 for an empty string or 0 for a non-empty string.</li></ul><p>Type: <code>UInt8</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT empty(&#x27;&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─empty(&#x27;&#x27;)─┐</span><br><span class="line">│ 1         │</span><br><span class="line">└───────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Other example</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT empty(&#x27;test&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─empty(&#x27;12312&#x27;)─┐</span><br><span class="line">│ 0              │</span><br><span class="line">└────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="endsWith"><a href="#endsWith" class="headerlink" title="endsWith"></a>endsWith</h2><p>Returns whether to end with the specified suffix. Returns 1 if the <code>string</code> ends with the specified <code>suffix</code>, otherwise it returns 0.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">endsWith(string, suffix)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li><li><code>suffix</code> – The suffix, test if <code>s</code> ends with the specified suffix.</li></ul><p><strong>Returned value</strong></p><ul><li>Returns 1 if the string ends with the specified suffix, otherwise it returns 0.</li></ul><p>Type: <code>UInt8</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT endsWith(&#x27;test_end_with&#x27;,&#x27;with&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─endsWith(&#x27;test_end_with&#x27;, &#x27;with&#x27;)─┐</span><br><span class="line">│ 1                                 │</span><br><span class="line">└───────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Other example</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT endsWith(&#x27;test_end_with&#x27;,&#x27;error&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─endsWith(&#x27;test_end_with&#x27;, &#x27;error&#x27;)─┐</span><br><span class="line">│ 0                                  │</span><br><span class="line">└────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="extract"><a href="#extract" class="headerlink" title="extract"></a>extract</h2><p>Extracts a fragment of a string using a regular expression. If <code>string</code> does not match the <code>pattern</code> regex, an empty string is returned. If the regex does not contain subpatterns, it takes the fragment that matches the entire regex. Otherwise, it takes the fragment that matches the first subpattern.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">extract(haystack, pattern)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li><li><code>pattern</code> – The regular expression pattern</li></ul><p><strong>Returned value</strong></p><ul><li>The matched string.</li></ul><p>Type: <code>string</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT extract(&#x27;abc&lt;regex1&gt;abc&lt;regex2&gt;abc&#x27;,&#x27;&lt;.*?&gt;&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─extract(&#x27;abc&lt;regex1&gt;abc&lt;regex2&gt;&#x27;, &#x27;&lt;.*?&gt;&#x27;)─┐</span><br><span class="line">│ &lt;regex1&gt;                                   │</span><br><span class="line">└────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="extractAll"><a href="#extractAll" class="headerlink" title="extractAll"></a>extractAll</h2><p>Extracts all the fragments of a string using a regular expression. If <code>string</code> does not match the <code>pattern</code> regex, an empty string is returned. Returns an array of strings consisting of all matches to the regex. In general, the behavior is the same as the <code>extract</code> function (it takes the first subpattern, or the entire expression if there isn’t a subpattern).</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">extractAll(string, pattern)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li><li><code>pattern</code> – The regular expression pattern</li></ul><p><strong>Returned value</strong></p><ul><li>The matched string.</li></ul><p>Type: <code>string</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT extractAll(&#x27;abc&lt;regex1&gt;abc&lt;regex2&gt;abc&#x27;,&#x27;&lt;.*?&gt;&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─extractAll(&#x27;abc&lt;regex1&gt;abc&lt;regex2&gt;abc&#x27;, &#x27;&lt;.*?&gt;&#x27;)─┐</span><br><span class="line">│ [&lt;regex1&gt;, &lt;regex2&gt;]                             │</span><br><span class="line">└──────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="lcase"><a href="#lcase" class="headerlink" title="lcase"></a>lcase</h2><p>Converts ASCII Latin symbols in a <code>string</code> to lowercase.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lcase(string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li></ul><p><strong>Returned value</strong></p><ul><li>The string in lowercase letter.</li></ul><p>Type: <code>string</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT lcase(&#x27;ABCdef&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─lcase(&#x27;ABCdef&#x27;)─┐</span><br><span class="line">│ abcdef          │</span><br><span class="line">└─────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="length"><a href="#length" class="headerlink" title="length"></a>length</h2><p>Returns the length of a string in integer,also the function works for arrays.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">length(x)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The string or array.</li></ul><p><strong>Returned value</strong></p><ul><li>The length of a string or array.</li></ul><p>Type: <code>UInt64</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT length(&#x27;Hello&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─length(&#x27;Hello&#x27;)─┐</span><br><span class="line">│ 5               │</span><br><span class="line">└─────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Other example</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT length([1,2,3,4]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─length([1, 2, 3, 4])─┐</span><br><span class="line">│ 4                    │</span><br><span class="line">└──────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="lengthUTF8"><a href="#lengthUTF8" class="headerlink" title="lengthUTF8"></a>lengthUTF8</h2><p>Returns the length of a string in integer, assuming that the string contains a set of bytes that make up UTF-8 encoded text. If this assumption is not met, it returns some result (it does not throw an exception).</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lengthUTF8(x)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The string or array.</li></ul><p><strong>Returned value</strong></p><ul><li>The length of a string or array.</li></ul><p>Type: <code>UInt64</code></p><p><strong>Example</strong></p><p>encodeing ‘Hello test’ to UTF-8, we can get <code>\x48\x65\x6C\x6C\x6F\x20\x74\x65\x73\x74</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT lengthUTF8(&#x27;\x48\x65\x6C\x6C\x6F\x20\x74\x65\x73\x74&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─lengthUTF8(&#x27;Hello test&#x27;)─┐</span><br><span class="line">│ 10                       │</span><br><span class="line">└──────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="like"><a href="#like" class="headerlink" title="like"></a>like</h2><p>like(string, pattern), string LIKE pattern operator checks whether a string matches a simple regular expression.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">like(string, pattern)</span><br><span class="line">string LIKE pattern</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li><li><code>pattern</code> – The string matches a simple regular expression.</li></ul><p>The regular expression can contain the metasymbols <code>%</code> and <code>_</code> .</p><p><code>%</code> indicates any quantity of any bytes (including zero characters).</p><p><code>_</code> indicates any one byte.</p><p>Use the backslash ( <code>\</code> ) for escaping metasymbols. See the note on escaping in the description of the ‘match’ function.</p><p>For regular expressions like <code>%needle%</code> , the code is more optimal and works as fast as the <code>position</code> function.</p><p>For other regular expressions, the code is the same as for the ‘match’ function.</p><p><strong>Returned value</strong></p><ul><li>Either 1 or 0.</li></ul><p>Type:<code>UInt8</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT like(&#x27;abc&#x27;,&#x27;ab&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Type</p><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─like(&#x27;abc&#x27;, &#x27;ab&#x27;)─┐</span><br><span class="line">│ 0                 │</span><br><span class="line">└───────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Other example</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT &#x27;abc&#x27; LIKE &#x27;ab%&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─like(&#x27;abc&#x27;, &#x27;ab%&#x27;)─┐</span><br><span class="line">│ 1                  │</span><br><span class="line">└────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h2><p>The locate() function returns the position of the first occurrence of a substring in a <code>string</code>.</p><p><strong>Alias</strong> for position(string, substring)</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`locate(string, substring[, start_pos])` .</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The String, in which substring will to be searched.String .</li><li><code>substring</code> – The Substring to be searched.String</li><li><code>start_pos</code> – The Optional parameter, position of the first character in the string to start search.UInt</li></ul><p><strong>Returned value</strong></p><ul><li>the position of the first occurrence of a substring in a string.</li></ul><p>Type: <code>UInt64</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT locate(&#x27;Hello World&#x27;, &#x27;Wor&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─locate(&#x27;Hello World&#x27;, &#x27;Wor&#x27;)─┐</span><br><span class="line">│ 7                            │</span><br><span class="line">└──────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>TODO: need to verify it after resolved [Locate does not support start_pos] <a href="https://jira-sg.bytedance.net/browse/BYT-3176">https://jira-sg.bytedance.net/browse/BYT-3176</a>, this task will be postpone till the final document on function part is ready</p><h2 id="lower"><a href="#lower" class="headerlink" title="lower"></a>lower</h2><p>Converts ASCII Latin symbols in a string to lowercase.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lower(string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li></ul><p><strong>Returned value</strong></p><ul><li>The string in lowercase letter.</li></ul><p>Type: <code>string</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT lower(&#x27;ABCdef&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─lower(&#x27;ABCdef&#x27;)─┐</span><br><span class="line">│ abcdef          │</span><br><span class="line">└─────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="lowerUTF8"><a href="#lowerUTF8" class="headerlink" title="lowerUTF8"></a>lowerUTF8</h2><p>Converts a string to lowercase, assuming the string contains a set of bytes that make up a UTF-8 encoded text.</p><p>Note: It does not detect the language. So for Turkish the result might not be exactly correct.</p><p>If the length of the UTF-8 byte sequence is different for upper and lower case of a code point, the result may be incorrect for this code point.</p><p>If the string contains a set of bytes that is not UTF-8, then the behavior is undefined.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lowerUTF8(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>s</code> – The string.</li></ul><p><strong>Returned value</strong></p><ul><li>The string in lowercase letter.</li></ul><p>Type: <code>string</code></p><p><strong>Example</strong></p><p>encodeing ‘Hello test’ to UTF-8, we can get ‘\x48\x65\x6C\x6C\x6F\x20\x74\x65\x73\x74’.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT lowerUTF8(&#x27;\x48\x65\x6C\x6C\x6F\x20\x74\x65\x73\x74&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─lowerUTF8(&#x27;Hello test&#x27;)─┐</span><br><span class="line">│ hello test              │</span><br><span class="line">└─────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="match"><a href="#match" class="headerlink" title="match"></a>match</h2><p>Checks whether the string matches the <code>pattern</code> regular expression. A <code>re2</code> regular expression. The <a href="https://github.com/google/re2/wiki/Syntax">syntax</a> of the <code>re2</code> regular expressions is more limited than the syntax of the Perl regular expressions.</p><p>Note that the backslash symbol ( <code>\</code> ) is used for escaping in the regular expression. The same symbol is used for escaping in string literals. So in order to escape the symbol in a regular expression, you must write two backslashes () in a string literal.</p><p>The regular expression works with the string as if it is a set of bytes. The regular expression can’t contain null bytes.</p><p>For patterns to search for substrings in a string, it is better to use LIKE or ‘position’, since they work much faster.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">match(string, pattern)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li><li><code>pattern</code> – The pattern for matching</li></ul><p><strong>Returned value</strong></p><ul><li>Returns 0 if it does not match, or 1 if it matches.</li></ul><p>Type: <code>UInt8</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT match(&#x27;abc&lt;regex1&gt;abc&lt;regex2&gt;abc&#x27;,&#x27;&lt;.*?&gt;&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─match(&#x27;abc&lt;regex1&gt;abc&lt;regex2&gt;abc&#x27;, &#x27;&lt;.*?&gt;&#x27;)─┐</span><br><span class="line">│ 1                                           │</span><br><span class="line">└─────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="mid"><a href="#mid" class="headerlink" title="mid"></a>mid</h2><p>Returns a substring starting from the ‘offset’ index that is ‘length’ long. Character indexing starts from one (as in standard SQL). The ‘offset’ and ‘length’ arguments must be constants.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mid(s, offset, length)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>s</code> – The string.</li><li><code>offset</code> – The substring starting offset.</li><li><code>length</code> – The length of substring.</li></ul><p><strong>Returned value</strong></p><ul><li>The substring.</li></ul><p>Type: <code>string</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT mid(&#x27;Hello CNCH&#x27;,7,4);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─mid(&#x27;Hello CNCH&#x27;, 7, 4)─┐</span><br><span class="line">│ CNCH                    │</span><br><span class="line">└─────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="multiFuzzyMatchAny"><a href="#multiFuzzyMatchAny" class="headerlink" title="multiFuzzyMatchAny"></a>multiFuzzyMatchAny</h2><p>The same as <code>multiMatchAny</code> , but returns 1 if any pattern matches the string within a constant <a href="https://en.wikipedia.org/wiki/Edit_distance">edit distance</a> . This function is also in an experimental mode and can be extremely slow. For more information see <a href="https://intel.github.io/hyperscan/dev-reference/compilation.html#approximate-matching">hyperscan documentation</a> .</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">multiFuzzyMatchAny(string, distance, [pattern_1, pattern_2, …, pattern_n])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‘’’<strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li><li><code>distance</code> – The integer, please refer to <a href="https://en.wikipedia.org/wiki/Edit_distance">edit distance</a>.</li><li><code>pattern</code> – The pattern using in fuzzy match.</li></ul><p><strong>Returned value</strong></p><ul><li>returns 1 if any pattern matches the string, otherwise 0.</li></ul><p>Type: <code>UInt8</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT multiFuzzyMatchAny(&#x27;123ab12cdef&#x27;,2,[&#x27;abcd&#x27;]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Note: the distince is 2 due to the length of <code>12</code> in <code>ab12cd</code></p><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─multiFuzzyMatchAny(&#x27;123ab12cdef&#x27;, 2, [&#x27;abcd&#x27;])─┐</span><br><span class="line">│ 1                                              │</span><br><span class="line">└────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="multiFuzzyMatchAnyIndex"><a href="#multiFuzzyMatchAnyIndex" class="headerlink" title="multiFuzzyMatchAnyIndex"></a>multiFuzzyMatchAnyIndex</h2><p>The same as <code>multiFuzzyMatchAny</code> , but returns any index that matches the string within a constant edit distance.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">multiFuzzyMatchAnyIndex(string, distance, [pattern_1, pattern_2, …, pattern_n])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‘’’<strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li><li><code>distance</code> – The integer, please refer to <a href="https://en.wikipedia.org/wiki/Edit_distance">edit distance</a>.</li><li><code>pattern</code> – The pattern using in fuzzy match.</li></ul><p><strong>Returned value</strong></p><ul><li>returns returns any index that matches the string.</li></ul><p>Type: <code>UInt64</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT multiFuzzyMatchAnyIndex(&#x27;111333444CN1CH&#x27;,1,[&#x27;abc&#x27;,&#x27;def&#x27;,&#x27;CNCH&#x27;]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Note: the distince is 1 due to the length of <code>1</code> in <code>CN1CH</code></p><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─multiFuzzyMatchAnyIndex(&#x27;111333444CN1CH&#x27;, 1, [&#x27;abc&#x27;, &#x27;def&#x27;, &#x27;CNCH&#x27;])─┐</span><br><span class="line">│ 3                                                                    │</span><br><span class="line">└──────────────────────────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="multiMatchAny"><a href="#multiMatchAny" class="headerlink" title="multiMatchAny"></a>multiMatchAny</h2><p>multiMatchAny(haystack, [pattern_1, pattern_2, …, pattern_n])</p><p>The same as <code>match</code> , but returns 0 if none of the regular expressions are matched and 1 if any of the patterns matches. It uses <a href="https://github.com/intel/hyperscan">hyperscan</a> library. For patterns to search substrings in a string, it is better to use <code>multiSearchAny</code> since it works much faster.</p><p>Note: The length of any of the <code>haystack</code> string must be less than 232 bytes otherwise the exception is thrown. This restriction takes place because of hyperscan API.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">multiMatchAny(string, [pattern_1, pattern_2, …, pattern_n])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li><li><code>pattern</code> – The pattern for matching</li></ul><p><strong>Returned value</strong></p><ul><li>Returns 0 if it does not match, or 1 if it matches.</li></ul><p>Type: <code>UInt8</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT multiMatchAny(&#x27;abc&lt;regex1&gt;abc&lt;regex2&gt;abc&#x27;,[&#x27;&lt;.*?&gt;&#x27;,&#x27;error_patten&#x27;]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─multiMatchAny(&#x27;abc&lt;regex1&gt;abc&lt;regex2&gt;abc&#x27;, [&#x27;&lt;.*?&gt;&#x27;, &#x27;error_patten&#x27;])─┐</span><br><span class="line">│ 1                                                                     │</span><br><span class="line">└───────────────────────────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="multiMatchAnyIndex"><a href="#multiMatchAnyIndex" class="headerlink" title="multiMatchAnyIndex"></a>multiMatchAnyIndex</h2><p>The same as <code>multiMatchAny</code> , but returns any index that matches the string.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">multiMatchAnyIndex(string, [pattern_1, pattern_2, …, pattern_n])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li><li><code>pattern</code> – The pattern for matching</li></ul><p><strong>Returned value</strong></p><ul><li>Returns any index that matches the string.</li></ul><p>Type: <code>UInt64</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT multiMatchAnyIndex(&#x27;abc&lt;regex1&gt;abc&lt;regex2&gt;abc&#x27;,[&#x27;error_patten&#x27;, &#x27;&lt;.*?&gt;&#x27;]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─multiMatchAnyIndex(&#x27;abc&lt;regex1&gt;abc&lt;regex2&gt;abc&#x27;, [&#x27;error_patten&#x27;, &#x27;&lt;.*?&gt;&#x27;])─┐</span><br><span class="line">│ 2                                                                          │</span><br><span class="line">└────────────────────────────────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="multiSearchAllPositions"><a href="#multiSearchAllPositions" class="headerlink" title="multiSearchAllPositions"></a>multiSearchAllPositions</h2><p>The same as position but returns <code>Array</code> of positions of the found corresponding substrings in the string. Positions are indexed starting from 0.</p><p>The search is performed on sequences of bytes without respect to string encoding and collation.</p><ul><li>For case-insensitive ASCII search, use the function <code>multiSearchAllPositionsCaseInsensitive</code> .</li><li>For search in UTF-8, use the function <a href="https://bytedance.feishu.cn/docs/doccnUTIuxNrSuriPrZLQgGzmob#multiSearchAllPositionsUTF8">multiSearchAllPositionsUTF8</a> .</li><li>For case-insensitive UTF-8 search, use the function multiSearchAllPositionsCaseInsensitiveUTF8.</li></ul><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">multiSearchAllPositions(string, [substring_1, substring_2, ..., Substring_n])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> — The string, in which substring will to be searched. String .</li><li><code>substring</code> — Substring to be searched. String .</li></ul><p><strong>Returned values</strong></p><ul><li>Array of starting positions in (counting from 1), if the corresponding substring was found and 0 if not found.</li></ul><p>Type: <code>Array(UInt64)</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT multiSearchAllPositions(&#x27;Hello, World!&#x27;, [&#x27;hello&#x27;, &#x27;!&#x27;, &#x27;world&#x27;]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─multiSearchAllPositions(&#x27;Hello, World!&#x27;, [&#x27;hello&#x27;, &#x27;!&#x27;, &#x27;world&#x27;])─┐</span><br><span class="line">│ [0, 13, 0]                                                        │</span><br><span class="line">└───────────────────────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="multiSearchAllPositionsUTF8"><a href="#multiSearchAllPositionsUTF8" class="headerlink" title="multiSearchAllPositionsUTF8"></a>multiSearchAllPositionsUTF8</h2><p>Please refer to <code>multiSearchAllPositions</code> .## multiSearchAny<br>Returns 1, if at least one string needle_i matches the string <code>string</code> and 0 otherwise.</p><p>For a case-insensitive search or&#x2F;and in UTF-8 format use functions <code>multiSearchAnyCaseInsensitive, multiSearchAnyUTF8, multiSearchAnyCaseInsensitiveUTF8</code>.</p><p>Note:</p><p>In all <code>multiSearch*</code> functions the number of patterns should be less than 28 because of implementation specification.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">multiSearchAny(string, [pattern_1, pattern_2, …, pattern_n]) </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li><li><code>pattern</code> – The pattern for matching</li></ul><p><strong>Returned value</strong></p><ul><li>Returns 1, if at least one pattern matches the string <code>string</code> and 0 otherwise.</li></ul><p>Type: <code>UInt8</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT multiSearchAny(&#x27;can_you_find_CNCH?&#x27;,[&#x27;abc&#x27;,&#x27;CNCH&#x27;]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─multiSearchAny(&#x27;can_you_find_CNCH?&#x27;, [&#x27;abc&#x27;, &#x27;CNCH&#x27;])─┐</span><br><span class="line">│ 1                                                     │</span><br><span class="line">└───────────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="multiSearchFirstIndex"><a href="#multiSearchFirstIndex" class="headerlink" title="multiSearchFirstIndex"></a>multiSearchFirstIndex</h2><p>Returns the index <code>i</code> (starting from 1) of the leftmost found pattern_i in the <code>string</code> and 0 otherwise.</p><p>For a case-insensitive search or&#x2F;and in UTF-8 format use functions <code>multiSearchFirstIndexCaseInsensitive, multiSearchFirstIndexUTF8, multiSearchFirstIndexCaseInsensitiveUTF8</code> .</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">multiSearchFirstIndex(string, [pattern_1, pattern_2, …, pattern_n]) </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li><li><code>pattern</code> – The pattern for matching</li></ul><p><strong>Returned value</strong></p><ul><li>Returns the index <code>i</code> (starting from 1) of the leftmost found pattern_i in the <code>string</code> and 0 otherwise.</li></ul><p>Type: <code>UInt8</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT multiSearchFirstIndex(&#x27;which_pattern_matchs_CNCH?&#x27;,[&#x27;abc&#x27;,&#x27;CNCH&#x27;]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─multiSearchFirstIndex(&#x27;which_pattern_matchs_CNCH?&#x27;, [&#x27;abc&#x27;, &#x27;CNCH&#x27;])─┐</span><br><span class="line">│ 2                                                                    │</span><br><span class="line">└──────────────────────────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="multiSearchFirstPosition"><a href="#multiSearchFirstPosition" class="headerlink" title="multiSearchFirstPosition"></a>multiSearchFirstPosition</h2><p>The same as <code>position</code> but returns the leftmost offset of the string that is matched to some of the substring.</p><p>For a case-insensitive search or&#x2F;and in UTF-8 format use functions <code>multiSearchFirstPositionCaseInsensitive, multiSearchFirstPositionUTF8, multiSearchFirstPositionCaseInsensitiveUTF8</code> .</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">multiSearchFirstPosition(string, [pattern_1, pattern_2, …, pattern_n]) </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li><li><code>substring</code> – The substring for matching.</li></ul><p><strong>Returned value</strong></p><ul><li>Returns the index <code>i</code> (starting from 1) of the leftmost found pattern_i in the <code>string</code> and 0 otherwise.</li></ul><p>Type: <code>UInt8</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT multiSearchFirstPosition(&#x27;123_abc_abc_CNCH?&#x27;,[&#x27;abc&#x27;,&#x27;CNCH&#x27;]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─multiSearchFirstPosition(&#x27;123_abc_abc_CNCH?&#x27;, [&#x27;abc&#x27;, &#x27;CNCH&#x27;])─┐</span><br><span class="line">│ 5                                                              │</span><br><span class="line">└────────────────────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ngramDistance"><a href="#ngramDistance" class="headerlink" title="ngramDistance"></a>ngramDistance</h2><p>Calculates the 4-gram distance between <code>string</code> and <code>substring</code> : counts the symmetric difference between two multisets of 4-grams and normalizes it by the sum of their cardinalities. Returns float number from 0 to 1 – the closer to zero, the more strings are similar to each other. If the constant <code>substring</code> or <code>substring</code> is more than 32Kb, throws an exception. If some of the non-constant <code>substring</code> or <code>substring</code> strings are more than 32Kb, the distance is always one.</p><p>For case-insensitive search or&#x2F;and in UTF-8 format use functions <code>ngramDistanceCaseInsensitive, ngramDistanceUTF8, ngramDistanceCaseInsensitiveUTF8</code> .</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ngramDistance(string, [substring_1, substring_2, …, substring_n]) </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li><li><code>substring</code> – The substring for matching.</li></ul><p><strong>Returned value</strong></p><ul><li>Returns the index <code>i</code> (starting from 1) of the leftmost found substring_i in the <code>string</code> and 0 otherwise.</li></ul><p>Type: <code>Float32</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT ngramDistance(&#x27;abc123ascCNCH_83q&#x27;,&#x27;CNCH&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─ngramDistance(&#x27;abc123ascCNCH_83q&#x27;, &#x27;CNCH&#x27;)─┐</span><br><span class="line">│ 8.666667e-01                               │</span><br><span class="line">└────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="not"><a href="#not" class="headerlink" title="not"></a>not</h2><p>Calculates the result of the logical negation of the value. Corresponds to Logical Negation Operator .</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">not(val);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>val</code> — The value. Int , UInt , Float or Nullable .</li></ul><p><strong>Returned value</strong></p><ul><li><code>1</code> , if the <code>val</code> is <code>0</code> .</li><li><code>0</code> , if the <code>val</code> is a non-zero value.</li><li><code>NULL</code> , if the <code>val</code> is a <code>NULL</code> value.</li></ul><p>Type: UInt8 or Nullable ( UInt8.</p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT NOT(1);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─not(1)─┐</span><br><span class="line">│ 0      │</span><br><span class="line">└────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="notEmpty"><a href="#notEmpty" class="headerlink" title="notEmpty"></a>notEmpty</h2><p>Returns 0 for an empty <code>string</code> or 1 for a non-empty <code>string</code>.</p><p>The function also works for arrays.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notEmpty(string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>s</code> – The string.</li></ul><p><strong>Returned value</strong></p><ul><li>Returns 1 for an empty string or 0 for a non-empty string.</li></ul><p>Type: <code>UInt8</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT notEmpty(&#x27;test&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─notEmpty(&#x27;test&#x27;)─┐</span><br><span class="line">│ 1                │</span><br><span class="line">└──────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Other example</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT notEmpty(&#x27;&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─notEmpty(&#x27;&#x27;)─┐</span><br><span class="line">│ 0            │</span><br><span class="line">└──────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="notLike"><a href="#notLike" class="headerlink" title="notLike"></a>notLike</h2><p>notLike(string, pattern), string NOT LIKE pattern operator.</p><p>The same thing as ‘like’, but negative.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notLike(string, pattern)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li><li><code>pattern</code> – The pattern for matching.</li></ul><p><strong>Returned value</strong></p><ul><li>Returns 0 if it does not match, or 1 if it matches.</li></ul><p>Type: <code>UInt8</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT notLike(&#x27;test1&#x27;,&#x27;test2&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─notLike(&#x27;test1&#x27;, &#x27;test2&#x27;)─┐</span><br><span class="line">│ 1                         │</span><br><span class="line">└───────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="position"><a href="#position" class="headerlink" title="position"></a>position</h2><p>Searches for the <code>substring</code> in the <code>string</code>.</p><p>Returns the position of the found substring in the string, starting from 1.</p><p>Note: The search is case-sensitive by default, for a case-insensitive search, use the function positionCaseInsensitive .</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">position(substring IN string)</span><br><span class="line"></span><br><span class="line">position(string, substring[, start_pos])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Alias: <code>locate(string, substring[, start_pos])</code> .</p><p>Note: Syntax of <code>position(substring IN string)</code> provides SQL-compatibility, the function works the same way as to <code>position(string, substring)</code> .</p><p><strong>Arguments</strong></p><ul><li><code>string</code> – The String, in which substring will to be searched.String .</li><li><code>substring</code> – The Substring to be searched.String</li><li><code>start_pos</code> – The Optional parameter, position of the first character in the string to start search.UInt</li></ul><p><strong>Returned values</strong></p><ul><li>Returns the position of the found substring in the string, starting from 1.</li></ul><p>Type: <code>Integer</code></p><p><strong>Examples</strong></p><p>The phrase “Hello, world!” contains a set of bytes representing a single-byte encoded text. The function returns some expected result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT position(&#x27;Hello, world!&#x27;, &#x27;!&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─position(&#x27;Hello, world!&#x27;, &#x27;!&#x27;)─┐</span><br><span class="line">│ 13                             │</span><br><span class="line">└────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>TODO: need to verify it after resolved [Locate does not support start_pos] <a href="https://jira-sg.bytedance.net/browse/BYT-3176">https://jira-sg.bytedance.net/browse/BYT-3176</a>, this task will be postpone till the final document on function part is ready</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT position(&#x27;Hello, world!&#x27;, &#x27;o&#x27;, 1),position(&#x27;Hello, world!&#x27;, &#x27;o&#x27;, 7);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">┌─position(&#x27;Hello, world!&#x27;, &#x27;o&#x27;, 1)─┬─position(&#x27;Hello, world!&#x27;, &#x27;o&#x27;, 7)─┐</span><br><span class="line"></span><br><span class="line">│                                 5 │                                 9 │</span><br><span class="line"></span><br><span class="line">└───────────────────────────────────┴───────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>The same phrase in Russian contains characters which can’t be represented using a single byte. The function returns some unexpected result (use <a href="https://bytedance.feishu.cn/docs/doccnUTIuxNrSuriPrZLQgGzmob#positionutf8">positionUTF8</a> function for multi-byte encoded text):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT position(&#x27;Привет, мир!&#x27;, &#x27;!&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─position(&#x27;Привет, мир!&#x27;, &#x27;!&#x27;)─┐</span><br><span class="line">│                            21 │</span><br><span class="line">└───────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Examples for position(substring IN string) syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT 3 = position(&#x27;c&#x27; IN &#x27;abc&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─equals(3, position(&#x27;abc&#x27;, &#x27;c&#x27;))─┐</span><br><span class="line">│                               1 │</span><br><span class="line">└─────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Query:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT 6 = position(&#x27;/&#x27; IN s) FROM (SELECT &#x27;Hello/World&#x27; AS s);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─equals(6, position(s, &#x27;/&#x27;))─┐</span><br><span class="line">│                           1 │</span><br><span class="line">└─────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="positionCaseInsensitive"><a href="#positionCaseInsensitive" class="headerlink" title="positionCaseInsensitive"></a>positionCaseInsensitive</h2><p>The same as position returns the position of the found substring in the string, starting from 1. Use the function for a case-insensitive search.</p><p>Works under the assumption that the string contains a set of bytes representing a single-byte encoded text. If this assumption is not met and a character can’t be represented using a single byte, the function does not throw an exception and returns some unexpected result. If character can be represented using two bytes, it will use two bytes and so on.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">positionCaseInsensitive(string, substring[, start_pos])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The String, in which substring will to be searched.String .</li><li><code>substring</code> – The Substring to be searched.String</li><li><code>start_pos</code> – The Optional parameter, position of the first character in the string to start search.UInt</li></ul><p><strong>Returned values</strong></p><ul><li>Starting position in bytes (counting from 1), if substring was found.</li><li>0, if the substring was not found.</li></ul><p>Type: <code>Integer</code> .</p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT positionCaseInsensitive(&#x27;Hello, world!&#x27;, &#x27;hello&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─positionCaseInsensitive(&#x27;Hello, world!&#x27;, &#x27;hello&#x27;)─┐</span><br><span class="line">│ 1                                                 │</span><br><span class="line">└───────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>TODO: need to verify it after resolved [Locate does not support start_pos] <a href="https://jira-sg.bytedance.net/browse/BYT-3176">https://jira-sg.bytedance.net/browse/BYT-3176</a>, this task will be postpone till the final document on function part is ready</p><h2 id="positionCaseInsensitiveUTF8"><a href="#positionCaseInsensitiveUTF8" class="headerlink" title="positionCaseInsensitiveUTF8"></a>positionCaseInsensitiveUTF8</h2><p>The same as positionUTF8 , but is case-insensitive. Returns the position (in Unicode points) of the found <code>substring</code> in the <code>string</code>, starting from 1.</p><p>Works under the assumption that the string contains a set of bytes representing a UTF-8 encoded text. If this assumption is not met, the function does not throw an exception and returns some unexpected result. If character can be represented using two Unicode points, it will use two and so on.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">positionCaseInsensitiveUTF8(string, substring[, start_pos])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The String, in which substring will to be searched.String .</li><li><code>substring</code> – The Substring to be searched.String</li><li><code>start_pos</code> – The Optional parameter, position of the first character in the string to start search.UInt</li></ul><p><strong>Returned value</strong></p><ul><li>Starting position in Unicode points (counting from 1), if substring was found.</li><li>0, if the substring was not found.</li></ul><p>Type: <code>Integer</code> .</p><p><strong>Example</strong></p><p>Query:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT positionCaseInsensitiveUTF8(&#x27;Привет, мир!&#x27;, &#x27;Мир&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─positionCaseInsensitiveUTF8(&#x27;Привет, мир!&#x27;, &#x27;Мир&#x27;)─┐</span><br><span class="line">│ 9                                                  │</span><br><span class="line">└────────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="positionUTF8"><a href="#positionUTF8" class="headerlink" title="positionUTF8"></a>positionUTF8</h2><p>Returns the position (in Unicode points) of the found <code>substring</code> in the <code>string</code>, starting from 1.</p><p>Works under the assumption that the string contains a set of bytes representing a UTF-8 encoded text. If this assumption is not met, the function does not throw an exception and returns some unexpected result. If character can be represented using two Unicode points, it will use two and so on.</p><p>For a case-insensitive search, use the function positionCaseInsensitiveUTF8 .</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">positionUTF8(string, substring[, start_pos])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The String, in which substring will to be searched.String .</li><li><code>substring</code> – The Substring to be searched.String</li><li><code>start_pos</code> – The Optional parameter, position of the first character in the string to start search.UInt</li></ul><p><strong>Returned values</strong></p><ul><li>Starting position in Unicode points (counting from 1), if substring was found.</li><li>0, if the substring was not found.</li></ul><p>Type: <code>Integer</code> .</p><p><strong>Examples</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT positionUTF8(&#x27;Привет, мир!&#x27;, &#x27;!&#x27;) as example;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>The phrase “Hello, world!” in Russian contains a set of Unicode points representing a single-point encoded text. The function returns some expected result:</p><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─example─┐</span><br><span class="line">│ 12      │</span><br><span class="line">└─────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>TODO: Xinghe: below sentences will be deleted due to two query returns the same result.</p><p>The phrase “Salut, étudiante!”, where character <code>é</code> can be represented using a one point ( <code>U+00E9</code> ) or two points ( <code>U+0065U+0301</code> ) the function can be returned some unexpected result:</p><p>Query for the letter <code>é</code> , which is represented one Unicode point <code>U+00E9</code> :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT positionUTF8(&#x27;Salut, étudiante!&#x27;, &#x27;!&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─positionUTF8(&#x27;Salut, étudiante!&#x27;, &#x27;!&#x27;)─┐</span><br><span class="line">│                                     17 │</span><br><span class="line">└────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Query for the letter <code>é</code> , which is represented two Unicode points <code>U+0065U+0301</code> :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT positionUTF8(&#x27;Salut, étudiante!&#x27;, &#x27;!&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─positionUTF8(&#x27;Salut, étudiante!&#x27;, &#x27;!&#x27;)─┐</span><br><span class="line">│                                     18 │</span><br><span class="line">└────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="regexpQuoteMeta"><a href="#regexpQuoteMeta" class="headerlink" title="regexpQuoteMeta"></a>regexpQuoteMeta</h2><p>The function adds a backslash before some predefined characters in the <code>string</code>.</p><p>Predefined characters: <code>\0</code> , <code>|</code> , <code>(</code> , <code>)</code> , <code>^</code> , <code>$</code> , <code>.</code> , <code>[</code> , <code>]</code> , <code>?</code> , <code>*</code> , <code>+</code> , <code>&#123;</code> , <code>:</code> , <code>-</code> .</p><p>TODO: Note: i have deleted <code>\\</code> in predefined characters because it’s not working.</p><p>This implementation slightly differs from re2::RE2::QuoteMeta. It escapes zero byte as <code>\0</code> instead of <code>\x00</code> and it escapes only required characters.</p><p>For more information, see the link: <a href="https://github.com/google/re2/blob/master/re2/re2.cc#L473">RE2</a></p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">regexpQuoteMeta(string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li></ul><p><strong>Returned value</strong></p><p>– The string.</p><p>Type: <code>string</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT regexpQuoteMeta(&#x27; | , ( , ) , ^ , $ , . , [ , ] , ? ,&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─regexpQuoteMeta(&#x27; | , ( , ) , ^ , $ , . , [ , ] , ? ,&#x27;)─┐</span><br><span class="line">│  \| , \( , \) , \^ , \$ , \. , \[ , \] , \? ,           │</span><br><span class="line">└─────────────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h2><p>Replaces all occurrences of the <code>substring</code> in <code>string</code> with the <code>replacement</code>.</p><p>Alias to replaceAll</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">replace(string, substring, replacement)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> — The String, in which substring will to be searched.</li><li><code>substring</code> — The Substring to be searched.</li><li><code>replacement</code> — The replacement string to replace matched substring.</li></ul><p><strong>Returned value</strong></p><ul><li>Replaces all occurrences of the <code>substring</code> in <code>string</code> with the <code>replacement</code>.</li></ul><p>Type: <code>string</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT replace(&#x27;test target_string test&#x27;,&#x27;target_string&#x27;,&#x27;CNCH&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─replace(&#x27;test target_string test&#x27;, &#x27;target_string&#x27;, &#x27;CNCH&#x27;)─┐</span><br><span class="line">│ test CNCH test                                              │</span><br><span class="line">└─────────────────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="replaceAll"><a href="#replaceAll" class="headerlink" title="replaceAll"></a>replaceAll</h2><p>Replaces all occurrences of the <code>substring</code> in <code>string</code> with the <code>replacement</code>.</p><p>Please refer to replace</p><h2 id="replaceOne"><a href="#replaceOne" class="headerlink" title="replaceOne"></a>replaceOne</h2><p>Replaces the first occurrence, if it exists, of the <code>substring</code> in <code>string</code> with the <code>replacement</code>.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">replaceOne(string, substring, replacement)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The String, in which substring will to be searched.String .</li><li><code>substring</code> – The Substring to be searched.String</li><li><code>start_pos</code> – The Optional parameter, position of the first character in the string to start search.UInt</li></ul><p><strong>Returned value</strong></p><ul><li>Replaces first occurrences of the substring in string with the replacement.</li></ul><p>Type: <code>string</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT replaceOne(&#x27;test target_string test target_string&#x27;,&#x27;target_string&#x27;,&#x27;CNCH&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─replaceOne(&#x27;test target_string test target_string&#x27;, &#x27;target_string&#x27;, &#x27;CNCH&#x27;)─┐</span><br><span class="line">│ test CNCH test target_string                                                 │</span><br><span class="line">└──────────────────────────────────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="replaceRegexpAll"><a href="#replaceRegexpAll" class="headerlink" title="replaceRegexpAll"></a>replaceRegexpAll</h2><p>This does the same thing like replaceAll, but using regular expression.</p><ul><li>A pattern can be specified as ‘replacement’. This pattern can include substitutions <code>\0-\9</code> .</li><li>The substitution <code>\0</code> includes the entire regular expression. Substitutions <code>\1-\9</code> correspond to the subpattern numbers.To use the <code>\</code> character in a template, escape it using <code>\</code> .</li></ul><p>Noted: Replacement using the re2 regular expression.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">replaceRegexpAll(string, pattern, replacement)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li><li><code>pattern</code> – The pattern for matching.</li><li><code>replacement</code> — The replacement string to replace matched substring.</li></ul><p><strong>Returned value</strong></p><ul><li>Replaces all occurrences of the substring in string with the replacement.</li></ul><p>Type: <code>string</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT replaceRegexpAll(&#x27;Hello, World!&#x27;, &#x27;.&#x27;, &#x27;\\0\\0&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─replaceRegexpAll(&#x27;Hello, World!&#x27;, &#x27;.&#x27;, &#x27;\\0\\0&#x27;)─┐</span><br><span class="line">│ HHeelllloo,,  WWoorrlldd!!                       │</span><br><span class="line">└──────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>As an exception, if a regular expression worked on an empty substring, the replacement is not made more than once.</p><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT replaceRegexpAll(&#x27;Hello, World!&#x27;, &#x27;^&#x27;, &#x27;here: &#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─replaceRegexpAll(&#x27;Hello, World!&#x27;, &#x27;^&#x27;, &#x27;here: &#x27;)─┐</span><br><span class="line">│ here: Hello, World!                              │</span><br><span class="line">└──────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="replaceRegexpOne"><a href="#replaceRegexpOne" class="headerlink" title="replaceRegexpOne"></a>replaceRegexpOne</h2><p>Replaces only the first occurrence, if it exists.</p><p>Noted: Replacement using the pattern regular expression. A re2 regular expression.</p><p>A pattern can be specified as ‘replacement’. This pattern can include substitutions <code>\0-\9</code> .</p><p>The substitution <code>\0</code> includes the entire regular expression. Substitutions <code>\1-\9</code> correspond to the subpattern numbers.To use the <code>\</code> character in a template, escape it using <code>\</code> .</p><p>Also keep in mind that a string literal requires an extra escape.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">replaceRegexpOne(string, pattern, replacement)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li><li><code>pattern</code> – The pattern for matching.</li><li><code>replacement</code> — The replacement string to replace matched substring.</li></ul><p><strong>Returned value</strong></p><ul><li>Replaces first occurrences of the substring in string with the replacement.</li></ul><p>Type: <code>string</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT replaceRegexpOne(&#x27;test &lt;target_string&gt; test &lt;target_string&gt;&#x27;,&#x27;&lt;.*?&gt;&#x27;,&#x27;CNCH&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─replaceRegexpOne(&#x27;test &lt;target_string&gt; test &lt;target_string&gt;&#x27;, &#x27;&lt;.*?&gt;&#x27;, &#x27;CNCH&#x27;)─┐</span><br><span class="line">│ test CNCH test &lt;target_string&gt;                                                 │</span><br><span class="line">└────────────────────────────────────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>other example</strong></p><p>Example 1. Converting the date to American format:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select &#x27;2014-03-17&#x27;, replaceRegexpOne(toString(&#x27;2014-03-17&#x27;), &#x27;(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)&#x27;, &#x27;\\2/\\3/\\1&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─&#x27;2014-03-17&#x27;─┬─replaceRegexpOne(toString(&#x27;2014-03-17&#x27;), &#x27;(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)&#x27;, &#x27;\\2/\\3/\\1&#x27;)─┐</span><br><span class="line">│ 2014-03-17   │ 03/17/2014                                                                            │</span><br><span class="line">└──────────────┴───────────────────────────────────────────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Example 2. Copying a string ten times:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT replaceRegexpOne(&#x27;Hello, World!&#x27;, &#x27;.*&#x27;, &#x27;\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─replaceRegexpOne(&#x27;Hello, World!&#x27;, &#x27;.*&#x27;, &#x27;\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0&#x27;)──────────────────────────────────────────────────────────┐</span><br><span class="line">│ Hello, World!Hello, World!Hello, World!Hello, World!Hello, World!Hello, World!Hello, World!Hello, World!Hello, World!Hello, World! │</span><br><span class="line">└────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><p>Reverses the string (as a sequence of bytes).</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reverse(string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li></ul><p><strong>Returned value</strong></p><ul><li>The reversed string.</li></ul><p>Type: <code>string</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT reverse(&#x27;abcd1234&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─reverse(&#x27;abcd1234&#x27;)─┐</span><br><span class="line">│ 4321dcba            │</span><br><span class="line">└─────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="reverseUTF8"><a href="#reverseUTF8" class="headerlink" title="reverseUTF8"></a>reverseUTF8</h2><p>Reverses a sequence of Unicode code points, assuming that the string contains a set of bytes representing a UTF-8 text. Otherwise, it does something else (it does not throw an exception).</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reverseUTF8(string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The UTF8 string.</li></ul><p><strong>Returned value</strong></p><ul><li>The reversed string.</li></ul><p>Type: <code>string</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT reverseUTF8(&#x27;\x61\x62\x63\x64\x31\x32\x33\x34&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Note: ‘\x61\x62\x63\x64\x31\x32\x33\x34’ is ‘abcd1234’ in UTF8 format.</p><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─reverseUTF8(&#x27;abcd1234&#x27;)─┐</span><br><span class="line">│ 4321dcba                │</span><br><span class="line">└─────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="size"><a href="#size" class="headerlink" title="size"></a>size</h2><p>Returns the length of a string in bytes (not in characters, and not in code points).</p><p>Noted: The function also works for arrays.</p><p>Alias to length</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">size(x)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The string or array.</li></ul><p><strong>Returned value</strong></p><ul><li>The length of a string or array.</li></ul><p>Type: <code>UInt64</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT size(&#x27;Hello&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─size(&#x27;Hello&#x27;)─┐</span><br><span class="line">│ 5             │</span><br><span class="line">└───────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Other example</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT size([1,2,3,4]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─size([1, 2, 3, 4])─┐</span><br><span class="line">│ 4                  │</span><br><span class="line">└────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="splitByChar"><a href="#splitByChar" class="headerlink" title="splitByChar"></a>splitByChar</h2><p>Splits a string into substrings separated by a specified character. It uses a constant string <code>separator</code> which consisting of exactly one character.</p><p>Returns an array of selected substrings. Empty substrings may be selected if the separator occurs at the beginning or end of the string, or if there are multiple consecutive separators.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">splitByChar(separator, string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>separator</code> — The separator which should contain exactly one character. String .</li><li><code>string</code> — The string to split. String .</li></ul><p><strong>Returned value</strong></p><p>Returns an array of selected substrings. Empty substrings may be selected when:</p><ul><li>A separator occurs at the beginning or end of the string;</li><li>There are multiple consecutive separators;</li><li>The original string <code>string</code> is empty.</li></ul><p>Type: <code>array</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT splitByChar(&#x27;,&#x27;, &#x27;1,2,3,abcde&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─splitByChar(&#x27;,&#x27;, &#x27;1,2,3,abcde&#x27;)─┐</span><br><span class="line">│ [1, 2, 3, abcde]                │</span><br><span class="line">└─────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="splitByString"><a href="#splitByString" class="headerlink" title="splitByString"></a>splitByString</h2><p>Splits a string into substrings separated by a string. It uses a constant string <code>separator</code> of multiple characters as the separator. If the string <code>separator</code> is empty, it will split the <code>string</code> into an array of single characters.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">splitByString(separator, string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>separator</code> — The separator which should contain a string. String .</li><li><code>string</code> — The string to split. String .</li></ul><p><strong>Returned value</strong></p><p>Returns an array of selected substrings. Empty substrings may be selected when:</p><ul><li>A separator occurs at the beginning or end of the string;</li><li>There are multiple consecutive separators;</li><li>The original string <code>string</code> is empty.</li></ul><p>Type: <code>array</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT splitByString(&#x27;test&#x27;, &#x27;abctestCNCHtestdef&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─splitByString(&#x27;test&#x27;, &#x27;abctestCNCHtestdef&#x27;)─┐</span><br><span class="line">│ [abc, CNCH, def]                            │</span><br><span class="line">└─────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="startsWith"><a href="#startsWith" class="headerlink" title="startsWith"></a>startsWith</h2><p>Returns 1 whether <code>string</code> starts with the specified <code>prefix</code>, otherwise it returns 0.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">startsWith(string, prefix)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> — The string .</li><li><code>prefix</code> — The prefix for matching.</li></ul><p><strong>Returned values</strong></p><ul><li>1, if the string starts with the specified prefix.</li><li>0, if the string does not start with the specified prefix.</li></ul><p>Type: <code>UInt8</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT startsWith(&#x27;Hello, world!&#x27;, &#x27;He&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─startsWith(&#x27;Hello, world!&#x27;, &#x27;He&#x27;)─┐</span><br><span class="line">│ 1                                 │</span><br><span class="line">└───────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="substr"><a href="#substr" class="headerlink" title="substr"></a>substr</h2><p>Please refer to substring## substring<br>Returns a substring starting with the byte from the <code>offset</code> index that is <code>length</code> bytes long. Character indexing starts from one (as in standard SQL).</p><p>Note: The <code>offset</code> and <code>length</code> arguments must be constants.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">substring(string, offset, length)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li><li><code>offset</code> – The substring starting offset.</li><li><code>length</code> – The length of substring.</li></ul><p><strong>Returned value</strong></p><ul><li>The substring.</li></ul><p>Type: <code>string</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT substring(&#x27;Hello CNCH&#x27;, 7, 4);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─substr(&#x27;Hello CNCH&#x27;, 7, 4)─┐</span><br><span class="line">│ CNCH                       │</span><br><span class="line">└────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="substringUTF8"><a href="#substringUTF8" class="headerlink" title="substringUTF8"></a>substringUTF8</h2><p>The same as substring, but for Unicode code points. Works under the assumption that the string contains a set of bytes representing a UTF-8 encoded text.</p><p>Note: If this assumption is not met, it returns some result (it does not throw an exception).</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">substringUTF8(string, offset, length)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li><li><code>offset</code> – The substring starting offset.</li><li><code>length</code> – The length of substring.</li></ul><p><strong>Returned value</strong></p><ul><li>The substring.</li></ul><p>Type: <code>string</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT substringUTF8(&#x27;\x48\x65\x6c\x6c\x6f\x20\x43\x4e\x43\x48H&#x27;, 7, 4);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─substringUTF8(&#x27;Hello CNCHH&#x27;, 7, 4)─┐</span><br><span class="line">│ CNCH                               │</span><br><span class="line">└────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="trimBoth"><a href="#trimBoth" class="headerlink" title="trimBoth"></a>trimBoth</h2><p>Removes all consecutive occurrences of common whitespace (ASCII character 32) from both ends of a string. It does not remove other kinds of whitespace characters (tab, no-break space, etc.).</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">trimBoth(string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Alias: <code>trim(string)</code> .</p><p><strong>Arguments</strong></p><ul><li><code>string</code> — string to trim. String .</li></ul><p><strong>Returned value</strong></p><ul><li>A string without leading and trailing common whitespaces.</li></ul><p>Type: <code>String</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT trimBoth(&#x27;     Hello, world!     &#x27;) as a;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─a─────────────┐</span><br><span class="line">│ Hello, world! │</span><br><span class="line">└───────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="trimLeft"><a href="#trimLeft" class="headerlink" title="trimLeft"></a>trimLeft</h2><p>Removes all consecutive occurrences of common whitespace (ASCII character 32) from the beginning of a string. It does not remove other kinds of whitespace characters (tab, no-break space, etc.).</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">trimLeft(string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Alias: <code>trim(string)</code> .</p><p><strong>Arguments</strong></p><ul><li><code>string</code> — string to trim. String .</li></ul><p><strong>Returned value</strong></p><ul><li>A string without leading common whitespaces.</li></ul><p>Type: <code>String</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT trimLeft(&#x27;     Hello, world!     &#x27;) as example;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─example────────────┐</span><br><span class="line">│ Hello, world!      │</span><br><span class="line">└────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="trimRight"><a href="#trimRight" class="headerlink" title="trimRight"></a>trimRight</h2><p>Removes all consecutive occurrences of common whitespace (ASCII character 32) from the end of a string. It does not remove other kinds of whitespace characters (tab, no-break space, etc.).</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">trimRight(string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Alias: <code>trim(string)</code> .</p><p><strong>Arguments</strong></p><ul><li><code>string</code> — string to trim. String .</li></ul><p><strong>Returned value</strong></p><ul><li>A string without trailing common whitespaces.</li></ul><p>Type: <code>String</code></p><p><strong>Example</strong></p><p>TODO： below query will trims characters…. i have feedbacked to byteyard on call</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT trimRight(&#x27;     Hello, world!     &#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─trimLeft(&#x27;     Hello, world!     &#x27;)─┐</span><br><span class="line">│ Hello, world!                       │</span><br><span class="line">└─────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="tryBase64Decode"><a href="#tryBase64Decode" class="headerlink" title="tryBase64Decode"></a>tryBase64Decode</h2><p>Similar to base64Decode, but in case of error an empty string would be returned.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tryBase64Decode(string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The base64 encoded string.</li></ul><p><strong>Returned value</strong></p><ul><li>The decoded string.</li></ul><p>Type: <code>string</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT tryBase64Decode(&#x27;SGVsbG8gV29ybGQh&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Note: ‘SGVsbG8gV29ybGQh’ is the encoded base64 format of ‘Hello World! ‘</p><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─tryBase64Decode(&#x27;SGVsbG8gV29ybGQh&#x27;)─┐</span><br><span class="line">│ Hello World!                        │</span><br><span class="line">└─────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ucase"><a href="#ucase" class="headerlink" title="ucase"></a>ucase</h2><p>Converts ASCII Latin symbols in a string to uppercase.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ucase(string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li></ul><p><strong>Returned value</strong></p><ul><li>The string in uppercase letter.</li></ul><p>Type: <code>string</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT ucase(&#x27;ABCdef&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─ucase(&#x27;ABCdef&#x27;)─┐</span><br><span class="line">│ ABCDEF          │</span><br><span class="line">└─────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="upper"><a href="#upper" class="headerlink" title="upper"></a>upper</h2><p>Converts ASCII Latin symbols in a string to uppercase.</p><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">upper(string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The string.</li></ul><p><strong>Returned value</strong></p><ul><li>The string in uppercase letter.</li></ul><p>Type: <code>string</code></p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT upper(&#x27;ABCdef&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─upper(&#x27;ABCdef&#x27;)─┐</span><br><span class="line">│ ABCDEF          │</span><br><span class="line">└─────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="upperUTF8"><a href="#upperUTF8" class="headerlink" title="upperUTF8"></a>upperUTF8</h2><p>Converts a string to uppercase, assuming the string contains a set of bytes that make up a UTF-8 encoded text.</p><ul><li>It does not detect the language. So for Turkish the result might not be exactly correct.</li><li>If the length of the UTF-8 byte sequence is different for upper and lower case of a code point, the result may be incorrect for this code point.</li><li>If the string contains a set of bytes that is not UTF-8, then the behavior is undefined.</li></ul><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">upperUTF8(string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – The UTF8 string.</li></ul><p><strong>Returned value</strong></p><ul><li>The string in uppercase letter.</li></ul><p>Type: <code>string</code></p><p><strong>Example</strong></p><p>encode ‘hello world ！’ to UTF8 ‘\x68\x65\x6c\x6c\x6f\x20\x77\x6f\x72\x6c\x64\x20\xef\xbc\x81’</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT upperUTF8(&#x27;\x68\x65\x6c\x6c\x6f\x20\x77\x6f\x72\x6c\x64\x20\xef\xbc\x81&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─upperUTF8(&#x27;hello world ！&#x27;)─┐</span><br><span class="line">│ HELLO WORLD ！                │</span><br><span class="line">└──────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> SQL_Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>URLs</title>
      <link href="/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/urls/"/>
      <url>/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/urls/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Notice:<br>Some of the examples below are referenced from <a href="https://clickhouse.com/docs/en/sql-reference/functions/">ClickHouse Documentation</a> but have been adapted and modified to work in ByteHouse.</p></blockquote><h2 id="URLHierarchy"><a href="#URLHierarchy" class="headerlink" title="URLHierarchy"></a>URLHierarchy</h2><p>Returns an array containing the URL, truncated at the end by the symbols &#x2F;,? in the path and query-string. Consecutive separator characters are counted as one. The cut is made in the position after all the consecutive separator characters.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">URLHierarchy(URL)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>URL</code> — URL. Type: String.</li></ul><p><strong>Returned values</strong></p><ul><li>an array containing the URL</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> URLHierarchy(<span class="string">&#x27;https://example.com/browse/CONV-6788&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─URLHierarchy(&#x27;https://example.com/browse/CONV-6788&#x27;)────────────────────────────────────────────┐</span><br><span class="line">│ [&#x27;https://example.com/&#x27;, &#x27;https://example.com/browse/&#x27;, &#x27;https://example.com/browse/CONV-6788&#x27;] │</span><br><span class="line">└─────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="URLPathHierarchy"><a href="#URLPathHierarchy" class="headerlink" title="URLPathHierarchy"></a>URLPathHierarchy</h2><p>The same as above, but without the protocol and host in the result. The &#x2F; element (root) is not included.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">URLPathHierarchy(URL)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>URL</code> — URL. Type: String.</li></ul><p><strong>Returned values</strong></p><ul><li>an array containing the URL</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> URLPathHierarchy(<span class="string">&#x27;https://example.com/browse/CONV-6788&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─URLPathHierarchy(&#x27;https://example.com/browse/CONV-6788&#x27;)─┐</span><br><span class="line">│ [&#x27;/browse/&#x27;, &#x27;/browse/CONV-6788&#x27;]                        │</span><br><span class="line">└──────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="cutFragment"><a href="#cutFragment" class="headerlink" title="cutFragment"></a>cutFragment</h2><p>Removes the fragment identifier. The number sign is also removed.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cutFragment(URL)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>URL</code> – url string</li></ul><p><strong>Returned value</strong></p><ul><li>url without fragment</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cutFragment(<span class="string">&#x27;http://example.com#fragment&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─cutFragment(&#x27;http://example.com#fragment&#x27;)─┐</span><br><span class="line">│ http://example.com                         │</span><br><span class="line">└────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="cutQueryString"><a href="#cutQueryString" class="headerlink" title="cutQueryString"></a>cutQueryString</h2><p>Removes query string. The question mark is also removed.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cutQueryString(URL)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>URL</code> – url string</li></ul><p><strong>Returned value</strong></p><ul><li>url without query</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cutQueryString(<span class="string">&#x27;http://example.com/?page=1&amp;lr=213&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─cutQueryString(&#x27;http://example.com/?page=1&amp;lr=213&#x27;)─┐</span><br><span class="line">│ http://example.com/                                 │</span><br><span class="line">└─────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="cutQueryStringAndFragment"><a href="#cutQueryStringAndFragment" class="headerlink" title="cutQueryStringAndFragment"></a>cutQueryStringAndFragment</h2><p>Removes the query string and fragment identifier. The question mark and number sign are also removed.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cutQueryStringAndFragment(URL)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>URL</code> – url string</li></ul><p><strong>Returned value</strong></p><ul><li>url string without query string and fragment</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cutQueryStringAndFragment(<span class="string">&#x27;http://example.com/?page=1&amp;lr=213#fragment&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─cutQueryStringAndFragment(&#x27;http://example.com/?page=1&amp;lr=213#fragment&#x27;)─┐</span><br><span class="line">│ http://example.com/                                                     │</span><br><span class="line">└─────────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="cutToFirstSignificantSubdomain"><a href="#cutToFirstSignificantSubdomain" class="headerlink" title="cutToFirstSignificantSubdomain"></a>cutToFirstSignificantSubdomain</h2><p>Returns the part of the domain that includes top-level subdomains up to the “first significant subdomain”.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cutToFirstSignificantSubdomain(URL)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>URL</code> – url string</li></ul><p><strong>Returned value</strong></p><ul><li>subdomains string</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cutToFirstSignificantSubdomain(<span class="string">&#x27;https://www.example.com.cn/&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─cutToFirstSignificantSubdomain(&#x27;https://www.example.com.cn/&#x27;)─┐</span><br><span class="line">│ example.com.cn                                                │</span><br><span class="line">└───────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><!-- TODO: GATEWAY-CLIENT not work as expected<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cutToFirstSignificantSubdomain(<span class="string">&#x27;www.tr&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">┌─cutToFirstSignificantSubdomain(&#x27;www.tr&#x27;)─┐</span><br><span class="line">│ tr                                       │</span><br><span class="line">└──────────────────────────────────────────┘</span><br><span class="line">``` --&gt;## cutURLParameter</span><br><span class="line">Removes the ‘name’ URL parameter, if present. This function works under the assumption that the parameter name is encoded in the URL exactly the same way as in the passed argument.</span><br><span class="line"></span><br><span class="line">**Syntax**</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">cutURLParameter(URL, name)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>URL</code> – url string</li><li><code>name</code> - parameter name</li></ul><p><strong>Returned value</strong></p><ul><li>url string</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cutURLParameter(<span class="string">&#x27;http://example.com/?page=1&amp;lr=213&#x27;</span>,<span class="string">&#x27;page&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─cutURLParameter(&#x27;http://example.com/?page=1&amp;lr=213&#x27;, &#x27;page&#x27;)─┐</span><br><span class="line">│ http://example.com/?lr=213                                   │</span><br><span class="line">└──────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="cutWWW"><a href="#cutWWW" class="headerlink" title="cutWWW"></a>cutWWW</h2><p>Removes no more than one ‘www.’ from the beginning of the URL’s domain, if present.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cutWWW(URL)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>URL</code> – url string</li><li><code>name</code> - parameter name</li></ul><p><strong>Returned value</strong></p><ul><li>url string</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cutWWW(<span class="string">&#x27;http://www.example.com/?page=1&amp;lr=213&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─cutWWW(&#x27;http://www.example.com/?page=1&amp;lr=213&#x27;)─┐</span><br><span class="line">│ http://example.com/?page=1&amp;lr=213               │</span><br><span class="line">└─────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="decodeURLComponent"><a href="#decodeURLComponent" class="headerlink" title="decodeURLComponent"></a>decodeURLComponent</h2><p>Returns the decoded URL.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">decodeURLComponent(URL) </span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>URL</code> – url string</li></ul><p><strong>Returned value</strong></p><ul><li>decoded url string</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> decodeURLComponent(<span class="string">&#x27;http://127.0.0.1:8123/?query=SELECT%201%3B&#x27;</span>) <span class="keyword">AS</span> DecodedURL;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─DecodedURL─────────────────────────────┐</span><br><span class="line">│ http://127.0.0.1:8123/?query=SELECT 1; │</span><br><span class="line">└────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="domain"><a href="#domain" class="headerlink" title="domain"></a>domain</h2><p>Extracts the hostname from a URL.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">domain(url)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>url</code> — URL. Type: String.<br>The URL can be specified with or without a scheme. Examples:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">svn+ssh://some.svn-hosting.com:80/repo/trunk</span><br><span class="line">some.svn-hosting.com:80/repo/trunk</span><br><span class="line">https://yandex.com/time/</span><br></pre></td></tr></table></figure><p>For these examples, the <code>domain</code> function returns the following results:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">some.svn-hosting.com</span><br><span class="line">some.svn-hosting.com</span><br><span class="line">yandex.com</span><br></pre></td></tr></table></figure><p><strong>Returned values</strong></p><ul><li>Host name. If ByteHouse can parse the input string as a URL. </li><li>Empty string. If ByteHouse can’t parse the input string as a URL.<br>Type: <code>String</code> .</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> domain(<span class="string">&#x27;svn+ssh://some.svn-hosting.com:80/repo/trunk&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─domain(&#x27;svn+ssh://some.svn-hosting.com:80/repo/trunk&#x27;)─┐</span><br><span class="line">│ some.svn-hosting.com                                   │</span><br><span class="line">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="domainWithoutWWW"><a href="#domainWithoutWWW" class="headerlink" title="domainWithoutWWW"></a>domainWithoutWWW</h2><p>Returns the domain and removes no more than one ‘www.’ from the beginning of it, if present.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">domainWithoutWWW(url)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>url</code> — URL. Type: String.</li></ul><p><strong>Returned values</strong></p><ul><li>Host name. If ByteHouse can parse the input string as a URL. </li><li>Empty string. If ByteHouse can’t parse the input string as a URL.<br>Type: <code>String</code> .</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> domainWithoutWWW(<span class="string">&#x27;http://www.example.com#fragment&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─domainWithoutWWW(&#x27;http://www.example.com#fragment&#x27;)─┐</span><br><span class="line">│ example.com                                         │</span><br><span class="line">└─────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="extractURLParameter"><a href="#extractURLParameter" class="headerlink" title="extractURLParameter"></a>extractURLParameter</h2><p>Returns the value of the ‘name’ parameter in the URL, if present. Otherwise, an empty string. If there are many parameters with this name, it returns the first occurrence. This function works under the assumption that the parameter name is encoded in the URL exactly the same way as in the passed argument.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extractURLParameter(URL, name)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>URL</code> – url string</li><li><code>name</code> - parameter name</li></ul><p><strong>Returned value</strong></p><ul><li>parameter value</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> extractURLParameter(<span class="string">&#x27;http://example.com/?page=1&amp;lr=213&#x27;</span>,<span class="string">&#x27;page&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─extractURLParameter(&#x27;http://example.com/?page=1&amp;lr=213&#x27;, &#x27;page&#x27;)─┐</span><br><span class="line">│ 1                                                                │</span><br><span class="line">└──────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="extractURLParameterNames"><a href="#extractURLParameterNames" class="headerlink" title="extractURLParameterNames"></a>extractURLParameterNames</h2><p>Returns an array of name strings corresponding to the names of URL parameters. The values are not decoded in any way.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extractURLParameterNames(URL)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>URL</code> – url string</li></ul><p><strong>Returned value</strong></p><ul><li>a list of parameter names</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> extractURLParameterNames(<span class="string">&#x27;http://example.com/?page=1&amp;lr=213&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─extractURLParameterNames(&#x27;http://example.com/?page=1&amp;lr=213&#x27;)─┐</span><br><span class="line">│ [&#x27;page&#x27;, &#x27;lr&#x27;]                                                │</span><br><span class="line">└───────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="extractURLParameters"><a href="#extractURLParameters" class="headerlink" title="extractURLParameters"></a>extractURLParameters</h2><p>Returns an array of name&#x3D;value strings corresponding to the URL parameters. The values are not decoded in any way.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extractURLParameters(URL)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>URL</code> – url string</li></ul><p><strong>Returned value</strong></p><ul><li>a list of parameters</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> extractURLParameters(<span class="string">&#x27;http://example.com/?page=1&amp;lr=213&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─extractURLParameters(&#x27;http://example.com/?page=1&amp;lr=213&#x27;)─┐</span><br><span class="line">│ [&#x27;page=1&#x27;, &#x27;lr=213&#x27;]                                      │</span><br><span class="line">└───────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="firstSignificantSubdomain"><a href="#firstSignificantSubdomain" class="headerlink" title="firstSignificantSubdomain"></a>firstSignificantSubdomain</h2><p>Returns the “first significant subdomain”. This is a non-standard concept specific to Yandex.Metrica. The first significant subdomain is a second-level domain if it is ‘com’, ‘net’, ‘org’, or ‘co’. Otherwise, it is a third-level domain.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firstSignificantSubdomain(URL)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>URL</code> – url string</li></ul><p><strong>Returned value</strong></p><ul><li>first significant subdomain</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> firstSignificantSubdomain(<span class="string">&#x27;https://www.example.com.cn/&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─firstSignificantSubdomain(&#x27;https://www.example.com.cn/&#x27;)─┐</span><br><span class="line">│ example                                                  │</span><br><span class="line">└──────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><!-- TODO: GATEWAY-CLIENT not work as expected<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> firstSignificantSubdomain(<span class="string">&#x27;www.tr&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">┌─firstSignificantSubdomain(&#x27;www.tr&#x27;)─┐</span><br><span class="line">│ tr                                  │</span><br><span class="line">└─────────────────────────────────────┘</span><br><span class="line">``` --&gt;## fragment</span><br><span class="line">Returns the fragment identifier. fragment does not include the initial hash symbol.</span><br><span class="line"></span><br><span class="line">**Syntax**</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">fragment(URL)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>URL</code> – url string</li></ul><p><strong>Returned value</strong></p><ul><li>fragment string</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> fragment(<span class="string">&#x27;http://example.com#fragment&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─fragment(&#x27;http://example.com#fragment&#x27;)─┐</span><br><span class="line">│ fragment                                │</span><br><span class="line">└─────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="path"><a href="#path" class="headerlink" title="path"></a>path</h2><p>Returns the path. Example: <code>/top/news.html</code> The path does not include the query string.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(URL)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>URL</code> – url string</li></ul><p><strong>Returned value</strong></p><ul><li>path string</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> path(<span class="string">&#x27;http://example.com/top/news.html&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─path(&#x27;http://example.com/top/news.html&#x27;)─┐</span><br><span class="line">│ /top/news.html                           │</span><br><span class="line">└──────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="protocol"><a href="#protocol" class="headerlink" title="protocol"></a>protocol</h2><p>Extracts the protocol from a URL.<br>Examples of typical returned values: http, https, ftp, mailto, tel, magnet…</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protocol(URL)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>URL</code> – url string</li></ul><p><strong>Returned value</strong></p><ul><li>protocol string</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> protocol(<span class="string">&#x27;http://example.com&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─protocol(&#x27;http://example.com&#x27;)─┐</span><br><span class="line">│ http                           │</span><br><span class="line">└────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="queryString"><a href="#queryString" class="headerlink" title="queryString"></a>queryString</h2><p>Returns the query string. Example: page&#x3D;1&amp;lr&#x3D;213. query-string does not include the initial question mark, as well as # and everything after #.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryString(URL)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>URL</code> – url string</li></ul><p><strong>Returned value</strong></p><ul><li>query string</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> queryString(<span class="string">&#x27;http://example.com/?page=1&amp;lr=213&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─queryString(&#x27;http://example.com/?page=1&amp;lr=213&#x27;)─┐</span><br><span class="line">│ page=1&amp;lr=213                                    │</span><br><span class="line">└──────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="queryStringAndFragment"><a href="#queryStringAndFragment" class="headerlink" title="queryStringAndFragment"></a>queryStringAndFragment</h2><p>Returns the query string and fragment identifier. Example: page&#x3D;1#29390.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryStringAndFragment(URL)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>URL</code> – url string</li></ul><p><strong>Returned value</strong></p><ul><li>query and fragment string</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> queryStringAndFragment(<span class="string">&#x27;http://example.com/?page=1&amp;lr=213#fragment&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─queryStringAndFragment(&#x27;http://example.com/?page=1&amp;lr=213#fragment&#x27;)─┐</span><br><span class="line">│ page=1&amp;lr=213#fragment                                               │</span><br><span class="line">└──────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="topLevelDomain"><a href="#topLevelDomain" class="headerlink" title="topLevelDomain"></a>topLevelDomain</h2><p>Extracts the the top-level domain from a URL.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">topLevelDomain(url)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>url</code> — URL. Type: String.<br>The URL can be specified with or without a scheme. Examples:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">svn+ssh://some.svn-hosting.com:80/repo/trunk</span><br><span class="line">some.svn-hosting.com:80/repo/trunk</span><br><span class="line">https://yandex.com/time/</span><br></pre></td></tr></table></figure><p><strong>Returned values</strong></p><ul><li>Domain name. If ByteHouse can parse the input string as a URL. </li><li>Empty string. If ByteHouse cannot parse the input string as a URL.<br>Type: <code>String</code> .</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> topLevelDomain(<span class="string">&#x27;svn+ssh://www.some.svn-hosting.com:80/repo/trunk&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─topLevelDomain(&#x27;svn+ssh://www.some.svn-hosting.com:80/repo/trunk&#x27;)─┐</span><br><span class="line">│ com                                                                │</span><br><span class="line">└────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> SQL_Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 搭建 ByConity 开发环境</title>
      <link href="/zh-cn/docs/%E5%8F%82%E4%B8%8E%E7%A4%BE%E5%8C%BA/Linux%20%E6%90%AD%E5%BB%BA%20ByConity%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/zh-cn/docs/%E5%8F%82%E4%B8%8E%E7%A4%BE%E5%8C%BA/Linux%20%E6%90%AD%E5%BB%BA%20ByConity%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-搭建-ByConity-开发环境"><a href="#Linux-搭建-ByConity-开发环境" class="headerlink" title="Linux 搭建 ByConity 开发环境"></a>Linux 搭建 ByConity 开发环境</h1><h1 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h1><p>从源码编译 ByConity 需要安装以下组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Git</span><br><span class="line">CMake 3.17 or newer</span><br><span class="line">Ninja</span><br><span class="line">C++ compiler: clang-11 or clang-12</span><br><span class="line">Linker: lld</span><br><span class="line">Third-Party Library: openssl</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Linux-开发环境"><a href="#Linux-开发环境" class="headerlink" title="Linux 开发环境"></a>Linux 开发环境</h1><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>Debian 11 (Bullseye) 示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install git cmake ccache python3 ninja-build libssl-dev</span><br><span class="line"></span><br><span class="line"># install llvm 12</span><br><span class="line">sudo apt install lsb-release wget software-properties-common gnupg # pre-requisites of llvm.sh</span><br><span class="line">wget https://apt.llvm.org/llvm.sh</span><br><span class="line">chmod +x llvm.sh</span><br><span class="line">sudo ./llvm.sh 12</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="编译-ByConity"><a href="#编译-ByConity" class="headerlink" title="编译 ByConity"></a>编译 ByConity</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git clone --recursive &lt;ByConity Repository URL&gt; byconity</span><br><span class="line"></span><br><span class="line">cd byconity</span><br><span class="line">mkdir build &amp;&amp; cd build</span><br><span class="line">export CC=clang-12</span><br><span class="line">export CXX=clang++-12</span><br><span class="line">cmake ..</span><br><span class="line">ninja</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可执行文件在 programs 目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">clickhouse-client    # byconity client</span><br><span class="line">clickhouse-server    # byconity server</span><br><span class="line">clickhouse-worker    # byconity worker</span><br><span class="line">tso_server           # byconity tso</span><br><span class="line">daemon_manager       # byconity daemon manager</span><br><span class="line">resource_manager     # byconity resource manager</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> Community </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>社区行为准则</title>
      <link href="/zh-cn/docs/%E5%8F%82%E4%B8%8E%E7%A4%BE%E5%8C%BA/%E7%A4%BE%E5%8C%BA%E8%A1%8C%E4%B8%BA%E5%87%86%E5%88%99%20Community%20Code%20of%20Conduct/"/>
      <url>/zh-cn/docs/%E5%8F%82%E4%B8%8E%E7%A4%BE%E5%8C%BA/%E7%A4%BE%E5%8C%BA%E8%A1%8C%E4%B8%BA%E5%87%86%E5%88%99%20Community%20Code%20of%20Conduct/</url>
      
        <content type="html"><![CDATA[<h1 id="社区行为准则-Community-Code-of-Conduct"><a href="#社区行为准则-Community-Code-of-Conduct" class="headerlink" title="社区行为准则 Community Code of Conduct"></a>社区行为准则 Community Code of Conduct</h1><h1 id="贡献者公约"><a href="#贡献者公约" class="headerlink" title="贡献者公约"></a>贡献者公约</h1><h2 id="我们的承诺"><a href="#我们的承诺" class="headerlink" title="我们的承诺"></a>我们的承诺</h2><p>身为社区成员、贡献者和领袖，我们承诺使社区参与者不受骚扰，无论其年龄、体型、可见或不可见的缺陷、族裔、性征、性别认同和表达、经验水平、教育程度、社会与经济地位、国籍、相貌、种族、种姓、肤色、宗教信仰、性倾向或性取向如何。</p><p>我们承诺以有助于建立开放、友善、多样化、包容、健康社区的方式行事和互动。</p><h2 id="我们的准则"><a href="#我们的准则" class="headerlink" title="我们的准则"></a>我们的准则</h2><p>有助于为我们的社区创造积极环境的行为例子包括但不限于：</p><ul><li>表现出对他人的同情和善意</li><li>尊重不同的主张、观点和感受</li><li>提出和大方接受建设性意见</li><li>承担责任并向受我们错误影响的人道歉</li><li>注重社区共同诉求，而非个人得失</li></ul><p>不当行为例子包括：</p><ul><li>使用情色化的语言或图像，及性引诱或挑逗</li><li>嘲弄、侮辱或诋毁性评论，以及人身或政治攻击</li><li>公开或私下的骚扰行为</li><li>未经他人明确许可，公布他人的私人信息，如物理或电子邮件地址</li><li>其他有理由认定为违反职业操守的不当行为</li></ul><h2 id="责任和权力"><a href="#责任和权力" class="headerlink" title="责任和权力"></a>责任和权力</h2><p>社区领袖有责任解释和落实我们所认可的行为准则，并妥善公正地对他们认为不当、威胁、冒犯或有害的任何行为采取纠正措施。</p><p>社区领导有权力和责任删除、编辑或拒绝或拒绝与本行为准则不相符的评论（comment）、提交（commits）、代码、维基（wiki）编辑、议题（issues）或其他贡献，并在适当时机知采取措施的理由。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>本行为准则适用于所有社区场合，也适用于在公共场所代表社区时的个人。</p><p>代表社区的情形包括使用官方电子邮件地址、通过官方社交媒体帐户发帖或在线上或线下活动中担任指定代表。</p><h2 id="监督"><a href="#监督" class="headerlink" title="监督"></a>监督</h2><p>辱骂、骚扰或其他不可接受的行为可发送邮件到 [<a href="mailto:&#98;&#121;&#x63;&#x6f;&#110;&#105;&#x74;&#x79;&#x40;&#98;&#x79;&#116;&#101;&#x64;&#97;&#110;&#x63;&#101;&#x2e;&#99;&#x6f;&#109;">&#98;&#121;&#x63;&#x6f;&#110;&#105;&#x74;&#x79;&#x40;&#98;&#x79;&#116;&#101;&#x64;&#97;&#110;&#x63;&#101;&#x2e;&#99;&#x6f;&#109;</a>] 向负责监督的社区领袖报告。</p><p>所有投诉都将得到及时和公平的审查和调查。</p><p>所有社区领袖都有义务尊重任何事件报告者的隐私和安全。</p><h2 id="处理方针"><a href="#处理方针" class="headerlink" title="处理方针"></a>处理方针</h2><p>社区领袖将遵循下列社区处理方针来明确他们所认定违反本行为准则的行为的处理方式：</p><h3 id="1-纠正"><a href="#1-纠正" class="headerlink" title="1. 纠正"></a>1. 纠正</h3><p><strong>社区影响</strong>：使用不恰当的语言或其他在社区中被认定为不符合职业道德或不受欢迎的行为。</p><p><strong>处理意见</strong>：由社区领袖发出非公开的书面警告，明确说明违规行为的性质，并解释举止如何不妥。或将要求公开道歉。</p><h3 id="2-警告"><a href="#2-警告" class="headerlink" title="2. 警告"></a>2. 警告</h3><p><strong>社区影响</strong>：单个或一系列违规行为。</p><p><strong>处理意见</strong>：警告并对连续性行为进行处理。在指定时间内，不得与相关人员互动，包括主动与行为准则执行者互动。这包括避免在社区场所和外部渠道中的互动。违反这些条款可能会导致临时或永久封禁。</p><h3 id="3-临时封禁"><a href="#3-临时封禁" class="headerlink" title="3. 临时封禁"></a>3. 临时封禁</h3><p><strong>社区影响</strong>: 严重违反社区准则，包括持续的不当行为。</p><p><strong>处理意见</strong>: 在指定时间内，暂时禁止与社区进行任何形式的互动或公开交流。在此期间，不得与相关人员进行公开或私下互动，包括主动与行为准则执行者互动。违反这些条款可能会导致永久封禁。</p><h3 id="4-永久封禁"><a href="#4-永久封禁" class="headerlink" title="4. 永久封禁"></a>4. 永久封禁</h3><p><strong>社区影响</strong>：行为模式表现出违反社区准则，包括持续的不当行为、骚扰个人或攻击或贬低某个类别的个体。</p><p><strong>处理意见</strong>：永久禁止在社区内进行任何形式的公开互动。</p><h2 id="参见"><a href="#参见" class="headerlink" title="参见"></a>参见</h2><p>本行为准则改编自 Contributor Covenant 2.1 版, 参见 <a href="https://www.contributor-covenant.org/version/2/1/code_of_conduct.html">https://www.contributor-covenant.org/version/2/1/code_of_conduct.html</a>。</p><p>社区处理方针灵感来源于 Mozilla’s code of conduct enforcement ladder。</p><p>有关本行为准则的常见问题的答案，参见 <a href="https://www.contributor-covenant.org/faq">https://www.contributor-covenant.org/faq</a>。</p><p>其他语言翻译参见 <a href="https://www.contributor-covenant.org/translations">https://www.contributor-covenant.org/translations</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> Community </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>导入数据</title>
      <link href="/zh-cn/docs/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE/"/>
      <url>/zh-cn/docs/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h1><p>文档类型：教程型</p><p>文档结构：教程目的，前置准备，分步骤讲解原理 &amp; 示例，相关文档推荐；</p><p>内容提要：</p><ol><li>支持哪些方式导入数据，导入方式上是否有建议（比如直接写入和合并 part 文件后 attach）</li><li>如何连接上游支持的数据源</li><li>如何查看数据导入情况</li><li>常见的导入报错该做什么</li></ol><h1 id="支持的数据源"><a href="#支持的数据源" class="headerlink" title="支持的数据源"></a>支持的数据源</h1><p>提供多种数据导入方案，可以针对不同的数据源进行选择不同的数据导入方式。</p><h2 id="按场景划分"><a href="#按场景划分" class="headerlink" title="按场景划分"></a>按场景划分</h2><p>数据源</p><p>导入方式</p><p>本地文件</p><p>流式导入数据(本地文件及内存数据)</p><p>HDFS</p><p>通过外部存储数据导入</p><p>Kafka</p><p>通过 Kafka 导入数据</p><p>通过 spark 导入</p><p>通过 Spark 导入外部数据</p><p>Mysql、Hive</p><p>通过 ByConity 访问外部数据源</p><h2 id="支持的数据格式"><a href="#支持的数据格式" class="headerlink" title="支持的数据格式"></a>支持的数据格式</h2><p>导入方式</p><p>支持的数据格式</p><p>HDFS</p><p>Parquet，ORC，csv，gzip</p><p>本地文件以及内存数据</p><p>snappy 压缩格式</p><p>json, csv, TSKV，Parquet，ORC</p><p>Kafka</p><p>csv, gzip,json</p><h1 id="导入方式"><a href="#导入方式" class="headerlink" title="导入方式"></a>导入方式</h1><h2 id="流式导入数据-本地文件及内存数据"><a href="#流式导入数据-本地文件及内存数据" class="headerlink" title="流式导入数据(本地文件及内存数据)"></a>流式导入数据(本地文件及内存数据)</h2><h3 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h3><p>方式一使用 VALUES 格式的常规语法，适合临时插入少量的数据用来测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO [db.]table [(c1, c2, c3...)] VALUES (v11, v12, v13), (v21, v22, v23), ...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中，c1、c2、c3 是列字段声明，可忽略。VALUES 后紧跟的是由元组组成的代写入的数据，通过下标位与列字段声明一一对应。数据支持批量声明写入，多行数据之间使用逗号分隔。</p><p>例如，考虑该表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE test.insert_select_testtable</span><br><span class="line">(</span><br><span class="line">    `a` Int8,</span><br><span class="line">    `b` String,</span><br><span class="line">    `c` Int8,</span><br><span class="line">    `date` Date</span><br><span class="line">)</span><br><span class="line">ENGINE = CnchMergeTree()</span><br><span class="line">PARTITION by toYYYYMM(date)</span><br><span class="line">ORDER BY tuple()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO insert_select_testtable VALUES (1, &#x27;a&#x27;, 1,&#x27;2022-11-10&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在使用 VALUES 格式的语法写入数据时，支持加入表达式或者函数，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO insert_select_testtable VALUES (1, &#x27;a&#x27;, 1, now());</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h3><p>方式二是使用指定格式的语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO [db.]table [(c1, c2, c3...)] FORMAT format_name data_set</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ByConity 支持多种数据格式，以常用的 CSV 格式写入为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO insert_select_testtable FORMAT CSV \</span><br><span class="line">1, &#x27;a&#x27;, 1, &#x27;2022-11-10&#x27;\</span><br><span class="line">2, &#x27;b&#x27;, 2, &#x27;2022-11-11&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同时，还支持从文件向表中插入数据。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO [db.]table [(c1, c2, c3)] FORMAT format_name INFILE file_name</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用上面的语句可以从客户端的文件上读取数据并插入表中，file_name 和 type 都是 String 类型，输入文件的格式一定要在 FORMAT 语句中设置。</p><h3 id="方式三："><a href="#方式三：" class="headerlink" title="方式三："></a>方式三：</h3><p>方式三是使用 SELECT 子句的形式，适合需要保存某张表结果并供后续查询的情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO [db.]table [(c1, c2, c3...)] SELECT ...</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">写入时与SELECT的列的对应关系是使用位置来进行对应的，尽管在SELECT表达式与INSERT中的名称是不同的。如果需要，会进行对应的类型转换。</span><br></pre></td></tr></table></figure><p>通过 SELECT 子句可将查询结果写入数据表，假设需要将 insert_select_testtable_1 的数据写入 insert_select_testtable，则可以使用下面的语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO insert_select_testtable SELECT * from insert_select_testtable_1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在通过 SELECT 子句写入数据的时候，同样也支持加入表达式或者函数，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO insert_select_testtable SELECT 1, &#x27;a&#x27;, 1, now();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>虽然 VALUES 和 SELECT 子句的形式都支持声明表达式或函数，但是表达式和函数会带来额外的性能开销，从而导致写入性能下降。所以如果追求极致的写入性能。所以如果追求极致的写入性能，就应该避免使用它们。</p><h2 id="通过外部存储数据导入"><a href="#通过外部存储数据导入" class="headerlink" title="通过外部存储数据导入"></a>通过外部存储数据导入</h2><p>ByConity 同样支持从本地或者 HDFS 上导入数据，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO [db.]table [(c1, c2, c3)] FORMAT format_name INFILE &#x27;hdfs://ip:port/file_name&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用-kakfa-导入数据"><a href="#使用-kakfa-导入数据" class="headerlink" title="使用 kakfa 导入数据"></a>使用 kakfa 导入数据</h2><h3 id="功能定义"><a href="#功能定义" class="headerlink" title="功能定义"></a>功能定义</h3><p>CnchKafka 是 ByteHouse 基于社区 ClickHouse Kafka 表引擎自研实现的适配云原生架构的表引擎，用于高效快速地将用户数据从 Apache Kafka 实时导入 ByteHouse；其设计与实现既适配了云原生新架构，同时在社区实现基础上增强了部分功能。</p><p>CnchKafka 主要功能特点包括：</p><ul><li>提供基于云原生架构优势的自动容错能力，降低运维成本；</li><li>可扩展的消费能力：支持通过 SYSTEM 命令调节消费者数目，最高适配 topic 对应的 partition 数；</li><li>增强消费语义：依赖 Transaction 保证，通过引擎管理 offset 实现 Exactly-Once 消费语义；</li><li>消费性能：很大程度依赖用户表的 schema 复杂度，通常经验值 2k-2M 条&#x2F;秒，吞吐 15MiB&#x2F;s 左右；</li><li>支持多种数据类型，包括但不限于 Json、ProtoBuf、CSV 等；</li><li>支持记录消费日志，既方便排查问题，也提供了数据审计的能力。</li></ul><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>CnchKafka 继承了社区的基本设计，即通过一个 &lt;CnchKafka 消费表、Materialized View 物化视图表、存储表 &gt; 三元组实现整个消费链路，其中：</p><ul><li>CnchKafka 消费表：负责订阅 Kafka topic 并消费消息；将得到的消息解析后写为 Block；</li><li>Materialized View 物化视图表：构建从消费表到存储表的数据通路，将 CnchKafka 消费的 Block 写入存储表，并提供简单的过滤功能；</li><li>存储表：支持 Cnch 多种 MergeTree 存储表。</li></ul><p>基本数据通路如下：</p><p><img src="/static/boxcnbeMipMsWmYggoqbR4DT88c.png"></p><p>图中各组件是 ByteHouse 云原生架构部分涉及 CnchKafka 的组件，为避免读者不了解，此处对各组件做简单说明；但限于篇幅和重点，更详细的架构设计细节请参考架构文档。</p><ul><li><strong>Server</strong></li><li>应用接入层，所有查询和导入任务的入口；</li><li>轻量级设计，本身不做具体查询和导入，主要负责任务调度转发和元数据访问，包括：</li><li>预处理查询请求，从 Catalog 读取元数据，将原数据和查询 sql 下发查询节点，将查询结果返回上层（调用接口或用户等）；</li><li>管理导入任务：选择导入节点执行导入任务；</li><li>和 Catalog 交互，查询或更新元数据；</li><li>和 Resource Manager 交互，选择任务执行节点保证负载均衡；</li><li><strong>Virtual WareHouse</strong></li><li>计算层，所有查询和导入任务的执行节点，无状态服务；</li><li>支持租户独享，实现资源和数据隔离；</li><li>支持读写分离，查询和导入可创建和指定不同 Virtual WareHouse；</li><li><strong>Catalog</strong></li><li>KV 数据库，用于元数据管理，包括数据库表元信息、part 元信息等；</li><li>CnchKafka 消费 offset 也存储在 catalog；</li><li><strong>VFS</strong></li><li>底层存储，支持多种存储系统，包括 HDFS、S3 等。</li></ul><h4 id="KafkaConsumeManager"><a href="#KafkaConsumeManager" class="headerlink" title="KafkaConsumeManager"></a>KafkaConsumeManager</h4><p>每张 CnchKafka 消费表会在 Server 层启动一个 Manager 负责调度和管理所有的消费者任务。Manager 本身是 Server 端的一个常驻线程，通过 Server 的高可用和 DaemonManager 保证其服务稳定。</p><p>KafkaConsumeManager 主要实现和功能包括：</p><ul><li>根据配置的 consumer 数目将 topic partition 均匀分发到每个 consumer；</li><li>与 Catalog 交互，获取 partition 消费的 offset；</li><li>调度 consumer 到配置的 Virtual Warehouse 节点执行：</li><li>节点选择支持多种策略配置，保证负载均衡；</li><li>定期探活每个 consumer 任务，保证任务执行的稳定性。</li></ul><h4 id="KafkaConsumer"><a href="#KafkaConsumer" class="headerlink" title="KafkaConsumer"></a>KafkaConsumer</h4><p>每个 KafkaConsumer 实现为一个常驻线程在 Virtual Warehouse 节点执行，负责从指定的 topic partition 消费数据，转换为 part 写入 VFS，并将元信息提交回 Server 端写入 Catalog。主要特点：</p><ul><li>继承社区的攒批写入模式（每次消费周期默认 8 秒）；</li><li>每次消费过程通过 Transaction 保证原子性：</li><li>通过与 Server RPC 交互创建事务；</li><li>事务提交会同时提交写入的 part 元信息以及最新消费的 offset。</li></ul><p>单次消费执行流程可参考下图：</p><p><img src="/static/boxcnlEuwS4ogryA87WHPdDK1Md.png"></p><h4 id="Exactly-Once"><a href="#Exactly-Once" class="headerlink" title="Exactly-Once"></a>Exactly-Once</h4><p>与社区实现相比，CnchKafka 实现增强了消费语义，即从社区的 At-Least-Once 语义，升级为 Exactly-Once 语义。这主要得益于新架构 Transaction 事务的保证。</p><p>由于每轮消费都会通过事务管理，且每次提交数据元信息的同时提交对应的 offset。由于事务保证了提交的原子性，那么数据元信息和 offset 要么同时提交成功，要么都提交失败。</p><p>这样就保证了数据和 offset 始终一致，每次消费重启都从上次提交的 offset 位置继续消费，从而实现了 Exactly-Once。</p><h4 id="自动容错实现"><a href="#自动容错实现" class="headerlink" title="自动容错实现"></a>自动容错实现</h4><p>CnchKafka 整体容错策略采取<strong>快速失败</strong>方式，即：</p><ul><li>KafkaConsumeManager 定期探活 consumer 任务，探活失败，立即拉起一个新的 consumer；</li><li>KafkaConsumer 每次执行中，与 Server RPC 的两次交互（创建事务和提交事务）都会向 Manager 校验自身的有效性，如果校验失败（比如 Manager 已经拉起了一个新的 consumer 等），会主动 kill 自己。</li></ul><h3 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h3><h4 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h4><p>创建 CnchKafka 消费表和社区原生建 Kafka 表类似，需要通过 Setting 参数配置 Kafka 数据源及消费参数。示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE kafka_test.cnch_kafka_consume</span><br><span class="line">(</span><br><span class="line">    `i` Int64,</span><br><span class="line">    `ts` DateTime</span><br><span class="line">)</span><br><span class="line">ENGINE = CnchKafka()</span><br><span class="line">SETTINGS </span><br><span class="line">kafka_broker_list = &#x27;10.10.10.10:9092&#x27;,  -- replace with your own broker list</span><br><span class="line">kafka_topic_list = &#x27;my_kafka_test_topic&#x27;, -- topic name to subcribe</span><br><span class="line">kafka_group_name = &#x27;hansome_boy_consume_group&#x27;, -- your consumer-group name</span><br><span class="line">kafka_format = &#x27;JSONEachRow&#x27;, -- always be json</span><br><span class="line">kafka_row_delimiter = &#x27;\n&#x27;, -- always be \n</span><br><span class="line">kafka_num_consumers = 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（Setting 参数说明及其他更多参数支持请参考下方说明）</p><p>由于 Kafka 消费设计需要三张表，所以还需要同步创建另外两张表。</p><p>首先创建存储表（以 CnchMergeTree 为例）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE kafka_test.cnch_store_kafka</span><br><span class="line">(</span><br><span class="line">    `i` Int64,</span><br><span class="line">    `ts` DateTime</span><br><span class="line">)</span><br><span class="line">ENGINE = CnchMergeTree</span><br><span class="line">PARTITION BY toDate(ts)</span><br><span class="line">ORDER BY ts</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后创建物化视图表（必须 Kafka 表和存储表创建成功后才能创建）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE MATERIALIZED VIEW kafka_test.cnch_kafka_view</span><br><span class="line">TO kafka_test.cnch_store_kafka</span><br><span class="line">(</span><br><span class="line">    `i` Int64,</span><br><span class="line">    `ts` DateTime</span><br><span class="line">)</span><br><span class="line">AS</span><br><span class="line">SELECT * -- you can add virtual columns here if you need</span><br><span class="line">FROM kafka_test.cnch_kafka_consume</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果你有对应 topic 的消费权限，那么三张表创建好以后，消费就会自动开始执行。</p><h4 id="虚拟列支持"><a href="#虚拟列支持" class="headerlink" title="虚拟列支持"></a>虚拟列支持</h4><p>有时候业务需要获取 Kafka 消息的元数据（e.g. 消息的 partition, offset 等）。此时可以使用 virtual columns 功能来满足这个需求。virtual columns 不需要在建表的时候指定，是表引擎本身的属性。可以放到 VIEW 表的 SELECT 语句中存储到底表中（当底表添加了对应列）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    _topic,    -- String</span><br><span class="line">    _partition,    -- UInt64</span><br><span class="line">    _key,    -- String</span><br><span class="line">    _offset,    -- UInt64</span><br><span class="line">    _content,  -- String: 完整的消息内容 </span><br><span class="line">    *    -- 正常列可以通过*展开，虚拟列则不能</span><br><span class="line">FROM kafka_test.cnch_kafka_consume</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Setting-参数说明"><a href="#Setting-参数说明" class="headerlink" title="Setting 参数说明"></a>Setting 参数说明</h4><p><strong>参数名</strong></p><p><strong>类型</strong></p><p><strong>必填&#x2F;默认值</strong></p><p><strong>说明</strong></p><p>kafka_cluster &#x2F; kafka_broker_list</p><p>String</p><p>必填</p><p>公司内部 Kafka 集群；</p><p>社区版本 Kafka 请使用 <code>kafka_broker_list</code> 参数</p><p>kafka_topic_list</p><p>String</p><p>必填</p><p>可以多个，逗号分隔</p><p>kafka_group_name</p><p>String</p><p>必填</p><p>consumer group name，消费组</p><p>kafka_format</p><p>String</p><p>必填</p><p>消息格式；目前最常用 JSONEachRow</p><p>kafka_row_delimiter</p><p>String</p><p>‘\0’</p><p>一般使用 ‘\n’</p><p>kafka_num_consumers</p><p>UInt64</p><p>1</p><p>消费者个数，建议不超过 topic 中最大 partition 数目</p><p>kafka_max_block_size</p><p>UInt64</p><p>65536</p><p>写入 block_size，上限 1M</p><p>kafka_max_poll_interval_ms</p><p>Milliseconds</p><p>7500</p><p>the max time to poll from broker each iteration</p><p>kafka_schema</p><p>String</p><p>“”</p><p>schema 文件设置参数，以文件名 + 冒号 + 消息名格式设置</p><p>如： <code>schema.proto:MyMessage</code></p><p>kafka_format_schema_path</p><p>String</p><p>“”</p><p>远端 schema 文件路径(不含文件名)设置参数，目前只支持 hdfs.</p><p>（如果没有设置这个参数，将从配置文件设置的默认路径读取）</p><p>kafka_protobuf_enable_multiple_message</p><p>bool</p><p>true</p><p>设置为 true，表示可以从一条 kafka 消息中读取多个 protobuf 的 message，彼此以各自长度为间隔</p><p>kafka_protobuf_default_length_parser</p><p>bool</p><p>false</p><p>仅在 <code>kafka_protobuf_enable_multiple_message</code> 为 true 生效：true 表示消息头部有变量记录长度；false 表示用一个固定的 8 字节作为头部记录长度。</p><p>kafka_extra_librdkafka_config</p><p>Json format string</p><p>“”</p><p>(More params refer to <a href="https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md#:~:text=see%20dedicated%20API-,ssl.ca.location,-*">here</a>)</p><p>其他 rdkafka 支持的参数，通常用于鉴权</p><ul><li><strong>SCRAM</strong>: “{“sasl.mechanisms”:”SCRAM-SHA-512”,”sasl.password”:”***”,”sasl.username”:”bytehouse-dev”,”security.protocol”:”sasl_ssl”,”ssl.ca.location”:”**”}”</li><li><strong>PLAIN</strong>: “{“sasl.mechanisms”:”PLAIN”,”sasl.password”:”admin”,”sasl.username”:”admin”,”security.protocol”:”sasl_plaintext”}”</li></ul><p>cnch_vw_write</p><p>String</p><p>“vw_write”</p><p>配置消费使用 Virtual WareHouse，consumer 任务将被调度到配置的 Virtual Warehouse 节点执行</p><p>kafka_cnch_schedule_mode</p><p>String</p><p>“random”</p><p>ConsumeManager 调度 consumer 任务时候采取的调度策略，目前支持：random, hash, and <strong>least_consumers；</strong>如果是独立 vw 或消费者数目大于 10，推荐使用** least_consumers**</p><h4 id="修改消费参数"><a href="#修改消费参数" class="headerlink" title="修改消费参数"></a>修改消费参数</h4><p>支持通过 ALTER 命令快速修改 Setting 参数，主要用于调整消费者数目等提升消费能力。</p><p>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE &lt;cnch_kafka_name&gt; MODIFY SETTING &lt;name1&gt; = &lt;value1&gt;, &lt;name2&gt; = &lt;value2&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该命令执行会自动重启消费任务。</p><h4 id="手动启停消费"><a href="#手动启停消费" class="headerlink" title="手动启停消费"></a>手动启停消费</h4><p>在一些场景中用户可能需要手动停止消费，随后手动恢复；我们提供了对应的 SYSTEM 命令实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SYSTEM START/STOP/RESTART CONSUME &lt;cnch_kafka_name&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：START&#x2F;STOP 命令会将对应状态持久化到 Catalog，因此在执行 STOP 命令后，如果不执行 START，即使服务重启，消费任务也不会恢复。</p><h4 id="重置-offset"><a href="#重置-offset" class="headerlink" title="重置 offset"></a>重置 offset</h4><p>由于 CnchKafka 的 offset 由引擎自身管理和保存，当用户需要重启 offset 时，我们同样实现了 SYSTEM 命令操作。具体支持以下三种方式：</p><h5 id="A-重置到特殊位置：最新位置-x2F-起始位置"><a href="#A-重置到特殊位置：最新位置-x2F-起始位置" class="headerlink" title="A 重置到特殊位置：最新位置&#x2F;起始位置"></a>A 重置到特殊位置：最新位置&#x2F;起始位置</h5><p>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SYSTEM RESET CONSUME OFFSET &#x27;&#123;&quot;database_name&quot;:&quot;XXX&quot;, &quot;table_name&quot;: &quot;XXX&quot;, &quot;offset_value&quot;:-1&#125;&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可能的特殊位置的 value 值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">enum Offset &#123;</span><br><span class="line">    OFFSET_BEGINNING = -2,</span><br><span class="line">    OFFSET_END = -1,</span><br><span class="line">    OFFSET_STORED = -1000,</span><br><span class="line">    OFFSET_INVALID = -1001</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="B-按时间戳重置"><a href="#B-按时间戳重置" class="headerlink" title="B 按时间戳重置"></a>B 按时间戳重置</h5><p>（版本要求 &gt;&#x3D; cnch-1.4）命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SYSTEM RESET CONSUME OFFSET &#x27;&#123;&quot;database_name&quot;:&quot;XXX&quot;, &quot;table_name&quot;: &quot;XXX&quot;, &quot;timestamp&quot;:1646125258000&#125;&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中 timestamp 的值应该为 Kafka 侧数据有效期内的某个时间的时间戳，且为毫秒级。</p><h5 id="C-指定-offset-具体-value"><a href="#C-指定-offset-具体-value" class="headerlink" title="C 指定 offset 具体 value"></a>C 指定 offset 具体 value</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">system reset consume offset &#x27;&#123;&quot;database_name&quot;:&quot;XXX&quot;, &quot;table_name&quot;: &quot;XXX&quot;, &quot;topic_name&quot;: &quot;XXX&quot;, &quot;offset_values&quot;:[&#123;&quot;partition&quot;:0, &quot;offset&quot;:100&#125;, &#123;&quot;partition&quot;:10, &quot;offset&quot;:101&#125;]&#125;&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>指定特定 topic partition 到特定 offset value，比较少见。</p><h3 id="运维手册"><a href="#运维手册" class="headerlink" title="运维手册"></a>运维手册</h3><h4 id="常见消费性能调优"><a href="#常见消费性能调优" class="headerlink" title="常见消费性能调优"></a>常见消费性能调优</h4><p>当消费持续出现 lag，通常为消费能力不足。CnchKafka 建表默认 1 个消费，单次消费写入最大 block size 为 65536. 当消费能力不足时，优先调整消费者和 block-size 参数。调整方式参考上文<strong>修改消费参数</strong></p><h5 id="调整-max-block-size"><a href="#调整-max-block-size" class="headerlink" title="调整 max-block-size"></a>调整 max-block-size</h5><ul><li>该参数直接影响消费内存使用，值越大所需内存越大。对于一些单条数据较大的消费表，谨慎调整该参数，避免爆内存。（上限为 1M）</li><li>当用户对数据延时要求不高，且数据量大 内存充足时，可同步调整此参数以及“kafka_max_poll_interval_ms”参数，让每一轮消费时间增加，每次写入的 part 变大，降低 MERGE 压力，提升查询性能。</li></ul><h5 id="调整-num-consumers"><a href="#调整-num-consumers" class="headerlink" title="调整 num_consumers"></a>调整 num_consumers</h5><ul><li>该参数上限为消费 topic 对应的 partition 数目。</li><li>在消费无 lag 情况下，尽可能减少此参数（即避免无意义增大此参数），减少资源使用，同时避免消费产生过多碎 part，增大 MERGE 压力，且不利于查询。</li></ul><h4 id="用于辅助排查的系统表"><a href="#用于辅助排查的系统表" class="headerlink" title="用于辅助排查的系统表"></a>用于辅助排查的系统表</h4><h5 id="消费事件：cnch-system-cnch-kafka-log"><a href="#消费事件：cnch-system-cnch-kafka-log" class="headerlink" title="消费事件：cnch_system.cnch_kafka_log"></a>消费事件：cnch_system.cnch_kafka_log</h5><p>kakfa_log 表记录了一些消费的基本事件，开启需要在 config.xml 中配置 kafka_log 项（server&amp;worker 均需配置），重启之后生效。</p><p>kafka_log 在 Virtual Warehouse 由 consumer 任务写入，实时汇聚到全局的 cnch_system.cnch_kafka_log 表中，实现从 Server 段查看所有消费表的消费记录。</p><p><strong>字段说明</strong></p><p><strong>列名</strong></p><p><strong>类型</strong></p><p><strong>说明</strong></p><p>event_type</p><p>Enum8</p><p>见下表</p><p>event_date</p><p>Date</p><p>时间发生日期。分区字段，建议每次查询都带上。</p><p>event_time</p><p>DateTime</p><p>时间发生时间，单位秒</p><p>duration_ms</p><p>UInt64</p><p>事件持续时间，单位秒</p><p>cnch_database</p><p>String</p><p>CnchKafka 库名</p><p>cnch_table</p><p>String</p><p>CnchKafka 表名</p><p>database</p><p>String</p><p>consumer 任务库名（目前同 cnch_database）</p><p>table</p><p>String</p><p>consumer 任务表名（通常为 cnch_table 加时间戳及消费者编号后缀）</p><p>consumer</p><p>String</p><p>消费者编号</p><p>metric</p><p>UInt64</p><p>消费行数</p><p>has_error</p><p>UInt8</p><p>1 代表有异常；0 代表无异常。</p><p>exception</p><p>String</p><p>异常说明，</p><p><strong>事件说明</strong></p><p><strong>UInt8 值</strong></p><p><strong>String 值</strong></p><p><strong>说明</strong></p><p>1</p><p>POLL</p><p>metric 表示消费了多少条数据，duration_ms 覆盖了一次完整的消费流程，包含 WRITE 的时间。</p><p>2</p><p>PARSE_ERROR</p><p>metric 表示解析出错的消费条数，如果有多条解析出错，仅挑选一条打印出来。</p><p>3</p><p>WRITE</p><p>metric 表示写入数据的行数，duration_ms 基本上等同于数据持久化的时间</p><p>4</p><p>EXCEPTION</p><p>消费过程的异常。常见的有：鉴权异常，数据持久化失败，VIEW SELECT 执行失败。</p><p>5</p><p>EMPTY_MESSAGE</p><p>空消息条数。</p><p>6</p><p>FILTER</p><p>写入阶段被过滤的数据。</p><p>7</p><p>COMMIT</p><p>最后事务提交记录，只有该条记录才表示数据写入成功，可作为数据审计标准</p><h5 id="消费状态：system-cnch-kafka-tables"><a href="#消费状态：system-cnch-kafka-tables" class="headerlink" title="消费状态：system.cnch_kafka_tables"></a>消费状态：system.cnch_kafka_tables</h5><p>kafka_tables 记录了 CnchKafka 表的实时状态，默认开始，为内存表；</p><p><strong>字段说明</strong></p><p><strong>字段名</strong></p><p><strong>数据类型</strong></p><p><strong>说明</strong></p><p>database</p><p>String</p><p>数据库名</p><p>name</p><p>String</p><p>Kafka 表名</p><p>uuid</p><p>String</p><p>kafka 表唯一标识 UUID</p><p>kafka_cluster</p><p>String</p><p>kafka 集群</p><p>topics</p><p>Array(String)</p><p>消费 topic 列表</p><p>consumer_group</p><p>String</p><p>所属消费组</p><p>num_consumers</p><p>UInt32</p><p>当前实际正在执行的消费者数目</p><p>consumer_tables</p><p>Array(String)</p><p>各个消费者对应的数据表名</p><p>consumer_hosts</p><p>Array(String)</p><p>各个消费者分发到的执行节点</p><p>consuemr_partitions</p><p>Array(String)</p><p>各个消费者分配到的需要消费的 partition</p><h4 id="常见排查消费异常记录"><a href="#常见排查消费异常记录" class="headerlink" title="常见排查消费异常记录"></a>常见排查消费异常记录</h4><h5 id="查看-CnchKafka-消费表实时状态"><a href="#查看-CnchKafka-消费表实时状态" class="headerlink" title="查看 CnchKafka 消费表实时状态"></a>查看 CnchKafka 消费表实时状态</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM system.cnch_kafka_tables</span><br><span class="line">WHERE database = &lt;database_name&gt; AND name = &lt;cnch_kafka_table&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="查看最近消费记录"><a href="#查看最近消费记录" class="headerlink" title="查看最近消费记录"></a>查看最近消费记录</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM cnch_system.cnch_kafka_log</span><br><span class="line">WHERE event_date = today()</span><br><span class="line"> AND cnch_database = &lt;database_name&gt;</span><br><span class="line"> AND cnch_table = &lt;cnch_kafka_table&gt;</span><br><span class="line"> AND event_time &gt; now() - 600 -- 最近十分钟</span><br><span class="line">ORDER BY event_time</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="按小时统计当天消费记录"><a href="#按小时统计当天消费记录" class="headerlink" title="按小时统计当天消费记录"></a>按小时统计当天消费记录</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line"> toHour(event_time) as hour,</span><br><span class="line"> sumIf(metric, event_type = &#x27;POLL&#x27;) as poll_rows,</span><br><span class="line"> sumIf(metric, event_type = &#x27;PARSE_ERROR&#x27;) as error_rows,</span><br><span class="line"> sumIf(metric, event_type = &#x27;COMMIT&#x27;) as commit_rows</span><br><span class="line">FROM cnch_system.cnch_kafka_log</span><br><span class="line">WHERE event_date = today()</span><br><span class="line"> AND cnch_database = &lt;database_name&gt;</span><br><span class="line"> AND cnch_table = &lt;cnch_kafka_table&gt;</span><br><span class="line">GROUP BY hour</span><br><span class="line">ORDER BY hour</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="通过-Spark-导入外部数据"><a href="#通过-Spark-导入外部数据" class="headerlink" title="通过 Spark 导入外部数据"></a>通过 Spark 导入外部数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用part writer工具导入ByConity，part writer工具可以不经过ByConity引擎，直接将数据文件转化为part文件。使用part writer可以实现ByConity查询与构建分离，一定程度缓解数据导入和查询的资源竞争，提高查询性能。目前，part writer及ByConity对应的加载part文件功能的开发基本完成，下面介绍如何使用part writer将数据导入到ByConity。</span><br><span class="line"></span><br><span class="line"> （1）使用part writer生成part文件</span><br></pre></td></tr></table></figure><p>part writer 接收一个 sql 语句作为参数，用户通过 sql 语句指定源数据文件、数据文件格式、数据 schema、part 文件保存路径等详细信息，使用方式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./part_writer &quot;load CSV file &#x27;/path/to/data/test.csv&#x27; as table db.tablename(col1 UInt64, col2 String, col3 Nullable(String)) partition by col1 order by (col2, col3) location &#x27;/path/to/dest/&#x27;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>示例 SQL 中，</p><ol><li>‘CSV’指定源数据文件格式；此外，part writer 还可使用 CSVWithNames， JSONEachRow 等多种 clickhouse 原生支持的数据文件格式。</li><li>‘&#x2F;path&#x2F;to&#x2F;data&#x2F;test.csv’ 指定了源数据文件；支持从本地和 hdfs 读取源数据。如使用 hdfs 数据文件，指定路径为：‘hdfs:&#x2F;&#x2F;host:port&#x2F;path&#x2F;to&#x2F;data&#x2F;file’;</li><li>‘&#x2F;path&#x2F;to&#x2F;dest&#x2F;‘指定 part 文件写入的目标文件夹；支持将 part 文件直接写到 hdfs 上，ByConity 可以从 hdfs 上拉取并加载 part 文件。</li><li>as table 指定了插入数据的 schema 信息</li><li>partition by 和 order by 分别指定了数据表的分区键和排序键，多个键之间使用逗号进行分割并且需要用圆括号包裹， 如: partition by (name, id)。</li><li>ByConity 特殊选项，settings cnch&#x3D;1，用于将生成的 part 直接 dump 成 ByConity 的 part 格式并写入 location 选项指定的 hdfs 路径。</li></ol><p>（2）part 文件导入 ByConity</p><p>生成好的 part 文件可以直接 copy 到 ByConity 表对应的数据文件路径下，然后通过重启 ByConity server 加载；</p><p>也可以将 part 文件目录 copy 到表的 detached 目录下，通过 attach 命令加载 part 文件, 如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table test attach part &#x27;partfile&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果使用 part writer 生成 part 文件时指定了直接上传到 hdfs，可以执行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">system fetch parts into db.table &#x27;hdfs://host:port/path/to/part/&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ByConity 将自动从 hdfs 路径下拉取 part 文件并进行加载。</p><p>ByConity attach 语法：</p><p>用于将 dump 到 hdfs 的 parts 导入到目标表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table test attach parts from &#x27;/hdfs/path/to/dumped/dir&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同时，形式四还支持 spark 导入：</p><p>实际应用场景下，需要往 ByConity 集群导入大量数据，可以考虑使用 spark。首先从外部将数据读入 spark dataset；然后根据 sharding key 对 dataset 进行 repartition，保证将要发送到不同 ByConity 节点到数据落在不同的 partition 上（可能需要根据实际情况，调整 spark.sql.shuffle.partitions 参数使 partition 不小于 ByConity 主节点数）；对于每个 partition， 首先通过调用 part writer 生成 part 文件，并指定 part 文件上传到 hdfs，然后通过向对应 ByConity 节点发送 http 请求，通知 ByConity 加载 part 文件。数据流图如下：</p><p><img src="/static/boxcnlSkMX0zkWno7WT7250zU1f.png"></p><h2 id="通过-ByConity-访问外部数据源"><a href="#通过-ByConity-访问外部数据源" class="headerlink" title="通过 ByConity 访问外部数据源"></a>通过 ByConity 访问外部数据源</h2><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p><code>MySQL</code> 引擎允许用户通过 ByConity 访问 MySQL 表，并可以进行 SELECT 和 INSERT 查询。</p><h4 id="在-MySQL-中创建表"><a href="#在-MySQL-中创建表" class="headerlink" title="在 MySQL 中创建表"></a>在 MySQL 中创建表</h4><ul><li>创建 database</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE db1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在 mysql 中创建表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE db1.table1(</span><br><span class="line">    id Int,</span><br><span class="line">    column1 VARCHAR(255)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>插入一些数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO db1.table1 </span><br><span class="line">    (id, column1)</span><br><span class="line">values</span><br><span class="line">    (1, &#x27;mysql-ab&#x27;),</span><br><span class="line">    (2, &#x27;mysql-cd&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在 mysql 中创建 user 以在 ByConity 中连接 mysql</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;mysql_byconity&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;Password123!&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>授予权限。(这里为了展示，授予了 <code>mysql_byconity</code> 用户 admin 权限)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;mysql_byconity&#x27;@&#x27;%&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="在-ByConity-中创建-MySQL-表"><a href="#在-ByConity-中创建-MySQL-表" class="headerlink" title="在 ByConity 中创建 MySQL 表"></a>在 ByConity 中创建 MySQL 表</h4><p>Now let’s create a ByConity table that uses the <strong>MySQL</strong> table engine:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE mysql_table1 (</span><br><span class="line">  id UInt64,</span><br><span class="line">  column1 String</span><br><span class="line">)</span><br><span class="line">ENGINE = MySQL(&#x27;mysql-host.domain.com&#x27;,&#x27;db1&#x27;,&#x27;table1&#x27;,&#x27;mysql_byconity&#x27;,&#x27;Password123!&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>MySQL</code> 引擎的参数如下表：</p><p>参数</p><p>描述</p><p>例子</p><p>host</p><p>域名或 IP:Port</p><p>mysql-host.domain.com</p><p>database</p><p>mysql 数据库名</p><p>db1</p><p>tabele</p><p>mysql 表名</p><p>table1</p><p>user</p><p>连接 mysql 的用户</p><p>mysql_byconity</p><p>password</p><p>连接 mysql 的密码</p><p>Password123!</p><h4 id="在-ByConity-中测试连接-mysql-表"><a href="#在-ByConity-中测试连接-mysql-表" class="headerlink" title="在 ByConity 中测试连接 mysql 表"></a>在 ByConity 中测试连接 mysql 表</h4><ul><li>测试 SELECT 查询</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from mysql_table1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/static/boxcnJv89B9UChc3nI0EPHoba6c.png"></p><ul><li>测试 INSERT 查询</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO mysql_table1</span><br><span class="line">    (id, column1)</span><br><span class="line">VALUES </span><br><span class="line">    (3, &#x27;byconity-test&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在 MySQL 中验证从 ByConity 中插入的数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select id, column1 from db1.table1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/static/boxcnQdV8Jpg8jcqEKwAOjONxkh.png"></p><h3 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CnchHive为ByConity提供的一种表引擎，支持使用外表的方式进行联邦查询，用户无需通过数据导入，可以直接进行数据查询加速。</span><br></pre></td></tr></table></figure><h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><h4 id="实例-1：构建-hive-表的全集"><a href="#实例-1：构建-hive-表的全集" class="headerlink" title="实例 1：构建 hive 表的全集"></a>实例 1：构建 hive 表的全集</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">--创建hive外表</span><br><span class="line">CREATE TABLE t</span><br><span class="line">(</span><br><span class="line">  client_ip   String,</span><br><span class="line">  request     String,</span><br><span class="line">  status_code INT,</span><br><span class="line">  object_size INT,</span><br><span class="line">  date String</span><br><span class="line">)</span><br><span class="line">ENGINE = CnchHive(&#x27;psm&#x27;, &#x27;hive_database_name&#x27;, &#x27;hive_table_name&#x27;)</span><br><span class="line">PARTITION BY date;</span><br><span class="line"></span><br><span class="line">--参数说明：</span><br><span class="line">--psm：hivemetastore psm</span><br><span class="line">--hive_database_name：hive表database name</span><br><span class="line">--hive_table_name：hive表table name</span><br><span class="line"></span><br><span class="line">--查询hive外表</span><br><span class="line">select * from  t where xxx;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="实例-2：构建-hive-表的子集"><a href="#实例-2：构建-hive-表的子集" class="headerlink" title="实例 2：构建 hive 表的子集"></a>实例 2：构建 hive 表的子集</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t</span><br><span class="line">(</span><br><span class="line">  client_ip   String,</span><br><span class="line">  request     String,</span><br><span class="line">  date String</span><br><span class="line">)</span><br><span class="line">ENGINE = CnchHive(&#x27;psm&#x27;, &#x27;hive_database_name&#x27;, &#x27;hive_table_name&#x27;)</span><br><span class="line">PARTITION BY date</span><br><span class="line"></span><br><span class="line">--参数说明：</span><br><span class="line">--psm：hivemetastore psm</span><br><span class="line">--hive_database_name：hive表database name</span><br><span class="line">--hive_table_name：hive表table name</span><br><span class="line"></span><br><span class="line">--查询hive外表</span><br><span class="line">select * from  t where xxx;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="实例-3：hive-bucket-表构建"><a href="#实例-3：hive-bucket-表构建" class="headerlink" title="实例 3：hive bucket 表构建"></a>实例 3：hive bucket 表构建</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t</span><br><span class="line">(</span><br><span class="line">  client_ip   String,</span><br><span class="line">  request     String,</span><br><span class="line">  device_id   String,</span><br><span class="line">  server_time String,</span><br><span class="line">  date String</span><br><span class="line">)</span><br><span class="line">ENGINE = CnchHive(&#x27;psm&#x27;, &#x27;hive_database_name&#x27;, &#x27;hive_table_name&#x27;)</span><br><span class="line">PARTITION BY date</span><br><span class="line">CLUSTER BY device_id INTO 65536 BUCKETS </span><br><span class="line">ORDER BY server_time</span><br><span class="line">SETTINGS cnch_vw_default =&#x27;vw_default&#x27;</span><br><span class="line"></span><br><span class="line">--参数说明：</span><br><span class="line">--psm：hivemetastore psm</span><br><span class="line">--hive_database_name：hive表database name</span><br><span class="line">--hive_table_name：hive表table name</span><br><span class="line"></span><br><span class="line">--查询hive外表</span><br><span class="line">select * from  t where xxx;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>外表列</li><li>列名需要与 hive 表一一对应</li><li>列的顺序不需要与 hive 一一对应</li><li>可以只选择 hive 表中的部分列，但分区列必须要全部包含。</li><li>外表列的分区需要通过 partition by 语句指定，同时需要与普通列一样定义到描述列表中。</li><li>当 Hive 表为 bucket 表时，建 CnchHive 引擎时需指定分桶列以及分桶数量。（CLUSTER BY xxx INTO xxx BUCKETS ）</li><li>当 Hive 表中有 ORDER BY 字段，建 CnchHive 引擎时需指定 ORDER BY 字段。</li><li>ENGINE 指定为 CnchHive</li><li>引擎参数</li><li>psm：hivemetastore psm</li><li>hive_database_name：指定 hive 中的数据库</li><li>hive_table_name：指定 hive 中的表，不支持 view。</li><li>支持的列类型对应关系如下表：</li></ul><p>hive 列类型</p><p>CnchHive 列类型</p><p>描述</p><p>INT&#x2F;INTERGER</p><p>INT&#x2F;INTERGER</p><p>BIGINT</p><p>BIGINT</p><p>TIMESTAMP</p><p>DateTime</p><p>STRING</p><p>String</p><p>VARCHAR</p><p>FixedString</p><p>内部转换为 FixedString</p><p>CHAR</p><p>FixedString</p><p>内部转换为 FixedString</p><p>DOUBLE</p><p>DOUBLE</p><p>FLOAT</p><p>FLOAT</p><p>DECIMAL</p><p>DECIMAL</p><p>MAP</p><p>Map</p><p>ARRAY</p><p>Array</p><p>说明：</p><ul><li>hive 表 schema 变更不会自动同步，需要在 Clickhouse 中重建 hive 外表</li><li>当前 hive 存储格式仅支持 Parquet</li><li>当前 CnchHive 不支持 insert、alter 操作</li></ul><h4 id="SETTINGS"><a href="#SETTINGS" class="headerlink" title="SETTINGS"></a>SETTINGS</h4><p>cnch_vw_default：用于指定 vw。</p><p>max_read_row_group_threads：用于指定并发读取 Parquet row group 的并发数量。</p><h4 id="运维手册-1"><a href="#运维手册-1" class="headerlink" title="运维手册"></a>运维手册</h4><p>关键字</p><p>解决办法</p><p>DB::Exception: Can not insert NULL data into non-nullable column “name”</p><p>列字段添加 Nullable 属性。</p><p>DB::Exception: The hive type is not match in cnch.</p><p>CnchHive schema type 与 Hive schema 不匹配。</p><p>DB::Exception: column name xxx doesn’t match.</p><p>CnchHive schema name 与 Hive schema 不匹配。</p><p>DB::Exception: CnchHive only support parquet format. Current format is org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat.</p><p>CnchHive 目前仅支持存储格式为 Parquet。</p><p>DB::Exception: No available nnproxy xxx.</p><p>HiveMetastore 的 psm 有问题，需 check HiveMetastore psm 是否可访问。</p><h1 id="常见报错及处理"><a href="#常见报错及处理" class="headerlink" title="常见报错及处理"></a>常见报错及处理</h1><p>关键字</p><p>原因</p><p>解决办法</p><p>Too many map keys in table</p><p>(more than 10000)</p><p>Map 列中 key 种类超 10000</p><p>超 10000 则无法导入，请导入数据减少 map key 数量</p><p>Memory limit (total)</p><p>导入过程中内存超限制</p><p>Cannot parse JSON</p><p>json 中数据类型与 clickhouse 的不符</p><p>请用户检查上游生成数据类型是否匹配；</p><p>Duplicate field found while parsing JSONEachRow format: hour</p><p>json 数据有字段重复，这里的重复字段是 hour，即”format:”后的就是重复字段</p><p>检查上游数据是否正确，配置是否正确</p><p>HDFS json size xxx &gt; 1099511627776</p><p>导入数据太大(1T)，禁止导入</p><p>减少导入数据量</p><p>Unable to parse hdfs json file</p><p>hdfs 中数据格式错误</p><p>请用户检查 hdfs 中文件是否为合法的 json</p><p>DB::Exception: Error while reading parquet data: IOError: definition level exceeds maximum. Stack trace</p><p>hdsf 文件错误读取错误，多数为丢块等造成。</p><p>需要重新生产 HDFS 文件</p><p>DB::Exception: Cannot parse string ‘time&#x3D;”2021-11-12’ as Date: syntax error at position 10 (parsed just ‘time&#x3D;”2021’). Note: there are toDateOrZero and toDateOrNull functions, which returns zero&#x2F;NULL instead of throwing exception.: while pushing to view</p><p>这种情况是用户 topic 中有脏数据；Kafka 表消费的时候按 string 正常解析；但是写入底表通过 toDate 等函数转换发现不合法，导致写入失败阻塞消费</p><p>1.临时可修改 VIEW 表，过滤脏数据；</p><p>2.用户上游添加数据清洗和保护机制</p><p>3.Kafka 表解析与底表保持一致，不建议在写入阶段再转换，Kafka 解析失败可以丢弃脏数据，不阻塞整个消费</p><p>Code: 1001, type: cppkafka::Exception, e.what() &#x3D; Failed to create consumer handle: consumer regist error, please check output!</p><p>打开 trace 日志，查看 Kafka 侧具体报错信息</p><p>根据报错信息处理</p><p>Code: 49, e.displayText() &#x3D; DB::Exception: Check dependencies failed for</p><p>VIEW 表找不到</p><p>重建 VIEW 表</p><p>Code: 6001. DB::Exception: DB::Exception: Cannot get metadata of table XXX by UUID : XXX.</p><p>执行 ALTER TABLE 命令时报错，cnch 表是和 server 绑定，这个是由于没在表对应 server 执行导致</p><p>先查询 system.cnch_table_host 获得该表对应的 server，然后在对应 server 执行</p><p>No space left on device: while pushing to view</p><p>磁盘用满</p><p>清理磁盘</p><h1 id="导入参数调优"><a href="#导入参数调优" class="headerlink" title="导入参数调优"></a>导入参数调优</h1><h2 id="直接写入方式调优"><a href="#直接写入方式调优" class="headerlink" title="直接写入方式调优"></a>直接写入方式调优</h2><p>在使用 INSERT VALUES, INSERT INFILE 或者 PartWriter 工具写入时，最后生成的 Part 数量会影响写入 HDFS 的次数进而影响写入整体的耗时，因此应当尽量减少 Part 的数量。直接写入的流程如下：</p><ul><li>读取部分文件数据</li><li>将这部分数据按照 PartitionBy 进行切分</li><li>将这部分数据按照 ClusterBy 进行切分</li><li>将切分完的数据写成新的 Part 并写入 HDFS</li></ul><p>调优手段：</p><ol><li>为了减少 Part 的数量，我们可以将文件中具有相同的分区和 Bucket 的数据排列在一起，这样每次读取一些新的数据后，生成的 Part 数量会尽可能少。可以将数据按照分区相同，分区内 Bucket 相同的要求进行排序，Bucket 的计算规则是：</li></ol><ul><li>如果没有指定 SPLIT_NUMBER，会将 ClusterByKey 所使用的列计算 SipHash 后对 BucketNumber 取模得到 BucketNumber</li><li>如果指定了 SPLIT_NUMBER</li><li>计算 SplitValue</li><li>如果 ClusterBy 某一列，利用 dtspartition 函数计算出对应的 SplitValue</li><li>如果 ClusterBy 多列，则将这些列利用 SipHash 计算出对应的 SplitValue</li><li>计算 BucketNumber</li><li>如果是 WithRange，则用 SplitValue * BucketCount &#x2F; SplitNumber 计算对应 BucketNumber</li><li>如果不是 WithRange，则用 SplitValue % BucketCount 计算对应 BucketNumber</li></ul><ol><li>读取文件时</li><li>如果每行数据大小并不大，可以通过调大 max_insert_block_size 来一次读取更大的 Block，从而生成更大的 Part</li><li>如果读取的文件不是 HDFS&#x2F;CFS 的，同时使用通配符匹配了多个文件，也可以同时调大 min_insert_block_size_rows 和 min_insert_block_size_bytes</li></ol>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> Getting_Started </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>导出数据</title>
      <link href="/zh-cn/docs/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE/"/>
      <url>/zh-cn/docs/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h1><p>文档类型：教程型</p><p>文档格式：教程目的，前置准备，分步骤讲解原理 &amp; 示例，相关文档推荐；</p><p>内容提要：</p><ol><li>支持将表的数据导出到哪些文件系统或者数据库，如何导出</li><li>是否支持导出查询结果，如何导出</li></ol><p>ByConity 支持将查询结果重定向到客户 SELECT 端的文件，这里的文件可以是本地文件，也可以是 HDFS 上的文件。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT &lt;expr_list&gt; INTO OUTFILE file_name FORMAT format_name</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中，file_name、format_name 均为字符串类型。</p><h2 id="导出到本地"><a href="#导出到本地" class="headerlink" title="导出到本地"></a>导出到本地</h2><p>例如，考虑该表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE test.select_outfile_testtable</span><br><span class="line">(</span><br><span class="line">    `a` Int8,</span><br><span class="line">    `b` String,</span><br><span class="line">    `c` Int8,</span><br><span class="line">    `date` Date</span><br><span class="line">)</span><br><span class="line">ENGINE = CnchMergeTree()</span><br><span class="line">PARTITION by toYYYYMM(date)</span><br><span class="line">ORDER BY tuple()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>insert 部分数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO test.select_outfile_testtable VALUES (1, &#x27;a&#x27;, 1,&#x27;2022-11-10&#x27;), (2, &#x27;b&#x27;, 2,&#x27;2022-11-11&#x27;), (3, &#x27;c&#x27;, 3,&#x27;2022-11-12&#x27;), (4, &#x27;d&#x27;, 4,&#x27;2022-11-13&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将 SELECT 结果导出到本地文件（以 CSV 为例）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM test.select_outfile_testtable INTO OUTFILE &#x27;select.csv&#x27; FORMAT CSV</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ cat select.csv</span><br><span class="line">1,&quot;a&quot;,1,&quot;2022-11-10&quot;</span><br><span class="line">2,&quot;b&quot;,2,&quot;2022-11-11&quot;</span><br><span class="line">3,&quot;c&quot;,3,&quot;2022-11-12&quot;</span><br><span class="line">4,&quot;d&quot;,4,&quot;2022-11-13&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="导出到-HDFS"><a href="#导出到-HDFS" class="headerlink" title="导出到 HDFS"></a>导出到 HDFS</h2><p>使用 INTO OUTFILE 子句，示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT &lt;expr_list&gt; INTO OUTFILE &#x27;hdfs://ip:port/user/tiger/test/test.gz &#x27; FORMAT format_name</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中 hdfs:&#x2F;&#x2F;ip:port&#x2F;user&#x2F;tiger&#x2F;test&#x2F;test.gz 为上传的 HDFS 地址，格式为：</p><ol><li>hdfs:&#x2F;&#x2F;为固定前缀，表明是上传到 HDFS；ip 是 hdfs namenode 服务地址。</li><li>&#x2F;user&#x2F;tiger&#x2F;test&#x2F;test.gz 即为输出文件的路径，需要注意的是 hdfs 目录路径必须是可用的。</li></ol><p>同时，支持常见格式导出到 HDFS，比如 CSV、Parquet、JSON 等，为减少网络传输量，默认开启 gzip 压缩。</p>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> Getting_Started </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据可视化</title>
      <link href="/zh-cn/docs/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
      <url>/zh-cn/docs/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h1><h2 id="教程目标："><a href="#教程目标：" class="headerlink" title="教程目标："></a>教程目标：</h2><p>本文档用来指导用户通过常见的开源和商业的数据可视化工具，连接并使用 Byconity。</p><h2 id="前置准备："><a href="#前置准备：" class="headerlink" title="前置准备："></a>前置准备：</h2><p>用户需要获取到 Byconity 服务的 <code>HOST</code> 和 <code>PORT(TCP/HTTP)</code></p><h2 id="目前支持的工具"><a href="#目前支持的工具" class="headerlink" title="目前支持的工具"></a>目前支持的工具</h2><p>目前支持的可视化工具包括：</p><ul><li><a href="%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.md">Grafana</a></li><li><a href="%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.md">Metabase</a></li><li><a href="%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.md">SuperSet</a></li><li><a href="%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.md">Tableau</a></li><li><a href="%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.md">其他</a></li></ul><h2 id="连接方法："><a href="#连接方法：" class="headerlink" title="连接方法："></a>连接方法：</h2><h3 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a>Grafana</h3><p>同连接开源 clickhouse 方法是一致的，参考：：</p><p>连接方法：<a href="https://clickhouse.com/docs/en/connect-a-ui/grafana-and-clickhouse">https://clickhouse.com/docs/en/connect-a-ui/grafana-and-clickhouse</a></p><p>Grafana 安装方法：<a href="https://grafana.com/docs/grafana/v9.0/setup-grafana/installation/">https://grafana.com/docs/grafana/v9.0/setup-grafana/installation/</a></p><p><img src="/static/boxcnPWwcVS2PP0ScJ1DABrY5Gb.png"></p><p><img src="/static/boxcnUlfPZA9ubTQw2MiKV0eOSc.png"></p><h3 id="Metabase"><a href="#Metabase" class="headerlink" title="Metabase"></a>Metabase</h3><p>同连接开源 clickhouse 方法是一致的，参考：</p><p><a href="https://clickhouse.com/docs/en/connect-a-ui/metabase-and-clickhouse">https://clickhouse.com/docs/en/connect-a-ui/metabase-and-clickhouse</a></p><p><img src="/static/boxcnzLODLCibKe4uefhtK3bPMh.png"></p><h3 id="SuperSet"><a href="#SuperSet" class="headerlink" title="SuperSet:"></a>SuperSet:</h3><p>同连接开源 clickhouse 方法是一致的，参考：</p><p>连接方法：<a href="https://clickhouse.com/docs/en/connect-a-ui/superset-and-clickhouse">https://clickhouse.com/docs/en/connect-a-ui/superset-and-clickhouse</a></p><p>SuperSet 安装方法：<a href="https://superset.apache.org/docs/installation/installing-superset-using-docker-compose">https://superset.apache.org/docs/installation/installing-superset-using-docker-compose</a></p><p><img src="/static/boxcnLpId4cqZ0REcyCFlZYxPqh.png"></p><p><img src="/static/boxcnG3sMOmptJiaYGlugaznN3f.png"></p><h3 id="Tableau"><a href="#Tableau" class="headerlink" title="Tableau"></a>Tableau</h3><p>同连接开源 clickhouse 方法是一致的，参考</p><p>连接方法： <a href="https://clickhouse.com/docs/en/connect-a-ui/tableau-and-clickhouse/">https://clickhouse.com/docs/en/connect-a-ui/tableau-and-clickhouse/</a></p><p>Tableau 安装方法：<a href="https://www.tableau.com/products/desktop/download">https://www.tableau.com/products/desktop/download</a></p><p><img src="/static/boxcnLhKBy77zRRuwIKvGNEpdad.png"></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>由于 Byconity 对开源的 clickhouse driver(go&#x2F;java&#x2F;python)是完全兼容的，因此使用其他开源可视化工具连接 Byconity 时，和可以参考其连接 clickhouse 的方法。</p>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> Getting_Started </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据类型</title>
      <link href="/zh-cn/docs/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/zh-cn/docs/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>文档类型：说明型</p><p>内容提要：</p><ol><li>byconity 支持哪些数据类型</li><li>对比 clickhouse 缺少哪些数据类型</li></ol><h1 id="差异概要"><a href="#差异概要" class="headerlink" title="差异概要"></a>差异概要</h1><p>byconity 缺少 Date32 类型，Boolean 类型，Geo 类型（需要 allow_experimental_geo_types &#x3D;1 才能使用）</p><p>byconity 的 Map 有 KV&#x2F;Byte&#x2F;CompactByte 三种模式，其中 KV 模式和开源 ClickHouse 兼容</p><h1 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h1><p>固定长度的整型，包括有符号整型或无符号整型。</p><p>创建表时，可以为整数设置类型参数 (例如. <strong>TINYINT(8)</strong>, <strong>SMALLINT(16)</strong>, <strong>INT(32)</strong>, <strong>BIGINT(64)</strong>), 但 byconity 会忽略它们.</p><h2 id="整型范围"><a href="#整型范围" class="headerlink" title="整型范围"></a>整型范围</h2><ul><li><strong>Int8</strong> — [-128 : 127]</li><li><strong>Int16</strong> — [-32768 : 32767]</li><li><strong>Int32</strong> — [-2147483648 : 2147483647]</li><li><strong>Int64</strong> — [-9223372036854775808 : 9223372036854775807]</li><li><strong>Int128</strong> — [-170141183460469231731687303715884105728 : 170141183460469231731687303715884105727]</li><li><strong>Int256</strong> — [-57896044618658097711785492504343953926634992332820282019728792003956564819968 : 57896044618658097711785492504343953926634992332820282019728792003956564819967]</li></ul><p>别名：</p><ul><li><strong>Int8</strong> — <strong>TINYINT</strong>, <strong>BOOL</strong>, <strong>BOOLEAN</strong>, <strong>INT1</strong>.</li><li><strong>Int16</strong> — <strong>SMALLINT</strong>, <strong>INT2</strong>.</li><li><strong>Int32</strong> — <strong>INT</strong>, <strong>INT4</strong>, <strong>INTEGER</strong>.</li><li><strong>Int64</strong> — <strong>BIGINT</strong>.</li></ul><h2 id="无符号整型范围"><a href="#无符号整型范围" class="headerlink" title="无符号整型范围"></a>无符号整型范围</h2><ul><li><strong>UInt8</strong> — [0 : 255]</li><li><strong>UInt16</strong> — [0 : 65535]</li><li><strong>UInt32</strong> — [0 : 4294967295]</li><li><strong>UInt64</strong> — [0 : 18446744073709551615]</li><li><strong>UInt128</strong> — [0 : 340282366920938463463374607431768211455]</li><li><strong>UInt256</strong> — [0 : 115792089237316195423570985008687907853269984665640564039457584007913129639935]</li></ul><h1 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h1><p>通用唯一标识符(UUID)是一个 16 字节的数字，用于标识记录。有关 UUID 的详细信息, 参见<a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">维基百科</a>。</p><p>UUID 类型值的示例如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ec282515-a492-46d8-808c-8f3bd899b1b1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果在插入新记录时未指定 UUID 列的值，则 UUID 值将用零填充:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00000000-0000-0000-0000-000000000000</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="如何生成"><a href="#如何生成" class="headerlink" title="如何生成"></a>如何生成</h2><p>要生成 UUID 值，byconity 提供了 <a href="https://clickhouse.com/docs/zh/sql-reference/functions/uuid-functions">generateuidv4</a> 函数。</p><h2 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h2><p><strong>示例 1</strong></p><p>这个例子演示了创建一个具有 UUID 类型列的表，并在表中插入一个值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t_uuid (x UUID, y String) ENGINE=Memory</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO t_uuid SELECT generateUUIDv4(), &#x27;Example 1&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM t_uuid</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌────────────────────────────────────x─┬─y─────────┐</span><br><span class="line">│ 136091bf-474c-496c-a743-bcd531e12563 │ Example 1 │</span><br><span class="line">└──────────────────────────────────────┴───────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><p>在这个示例中，插入新记录时未指定 UUID 列的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO t_uuid (y) VALUES (&#x27;Example 2&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM t_uuid</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">┌────────────────────────────────────x─┬─y─────────┐</span><br><span class="line">│ 136091bf-474c-496c-a743-bcd531e12563 │ Example 1 │</span><br><span class="line">│ 00000000-0000-0000-0000-000000000000 │ Example 2 │</span><br><span class="line">└──────────────────────────────────────┴───────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><p>UUID 数据类型只支持 <a href="https://clickhouse.com/docs/zh/sql-reference/data-types/string">字符串</a> 数据类型也支持的函数(比如, <a href="https://clickhouse.com/docs/zh/sql-reference/aggregate-functions/reference/min#agg_function-min">min</a>, <a href="https://clickhouse.com/docs/zh/sql-reference/aggregate-functions/reference/max#agg_function-max">max</a>, 和 <a href="https://clickhouse.com/docs/zh/sql-reference/aggregate-functions/reference/count#agg_function-count">count</a>)。</p><p>算术运算不支持 UUID 数据类型（例如, <a href="https://clickhouse.com/docs/zh/sql-reference/functions/arithmetic-functions#arithm_func-abs">abs</a>）或聚合函数，例如 <a href="https://clickhouse.com/docs/zh/sql-reference/aggregate-functions/reference/sum#agg_function-sum">sum</a> 和 <a href="https://clickhouse.com/docs/zh/sql-reference/aggregate-functions/reference/avg#agg_function-avg">avg</a>.</p><h1 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h1><p><a href="https://en.wikipedia.org/wiki/IEEE_754">浮点数</a>。</p><p>类型与以下 C 语言中类型是相同的：</p><ul><li><strong>Float32</strong> - <strong>float</strong></li><li><strong>Float64</strong> - <strong>double</strong></li></ul><p>我们建议您尽可能以整数形式存储数据。例如，将固定精度的数字转换为整数值，例如货币数量或页面加载时间用毫秒为单位表示</p><h2 id="使用浮点数"><a href="#使用浮点数" class="headerlink" title="使用浮点数"></a>使用浮点数</h2><ul><li>对浮点数进行计算可能引起四舍五入的误差。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT 1 - 0.9</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌───────minus(1, 0.9)─┐</span><br><span class="line">│ 0.09999999999999998 │</span><br><span class="line">└─────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>计算的结果取决于计算方法（计算机系统的处理器类型和体系结构）</li><li>浮点计算结果可能是诸如无穷大（<strong>INF</strong>）和«非数字»（<strong>NaN</strong>）。对浮点数计算的时候应该考虑到这点。</li><li>当一行行阅读浮点数的时候，浮点数的结果可能不是机器最近显示的数值。</li></ul><h2 id="NaN-和-Inf"><a href="#NaN-和-Inf" class="headerlink" title="NaN 和 Inf"></a>NaN 和 Inf</h2><p>与标准 SQL 相比，byconity 支持以下类别的浮点数：</p><ul><li><strong>Inf</strong> – 正无穷</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT 0.5 / 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─divide(0.5, 0)─┐</span><br><span class="line">│            inf │</span><br><span class="line">└────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>-Inf</strong> – 负无穷</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT -0.5 / 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─divide(-0.5, 0)─┐</span><br><span class="line">│            -inf │</span><br><span class="line">└─────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>NaN</strong> – 非数字</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT 0 / 0</span><br><span class="line"></span><br><span class="line">┌─divide(0, 0)─┐</span><br><span class="line">│          nan │</span><br><span class="line">└──────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以在 <a href="https://clickhouse.com/docs/zh/sql-reference/data-types/float">ORDER BY 子句</a> 查看更多关于 <strong>NaN</strong> 排序的规则。</p><h1 id="Decimal"><a href="#Decimal" class="headerlink" title="Decimal"></a>Decimal</h1><p>包括 Decimal(P,S),Decimal32(S),Decimal64(S),Decimal128(S)等类型</p><p>有符号的定点数，可在加、减和乘法运算过程中保持精度。对于除法，最低有效数字会被丢弃（不舍入）。</p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ul><li>P - 精度。有效范围：[1:38]，决定可以有多少个十进制数字（包括分数）。</li><li>S - 规模。有效范围：[0：P]，决定数字的小数部分中包含的小数位数。</li></ul><p>对于不同的 P 参数值 Decimal 表示，以下例子都是同义的： -P 从[1:9]-对于 Decimal32(S) -P 从[10:18]-对于 Decimal64(小号) -P 从[19:38]-对于 Decimal128（S)</p><h2 id="十进制值范围"><a href="#十进制值范围" class="headerlink" title="十进制值范围"></a>十进制值范围</h2><ul><li>Decimal32(S) - ( -1 * 10^(9 - S),1*10^(9-S) )</li><li>Decimal64(S) - ( -1 * 10^(18 - S),1*10^(18-S) )</li><li>Decimal128(S) - ( -1 * 10^(38 - S),1*10^(38-S) )</li></ul><p>例如，Decimal32(4) 可以表示 -99999.9999 至 99999.9999 的数值，步长为 0.0001。</p><h2 id="内部表示方式"><a href="#内部表示方式" class="headerlink" title="内部表示方式"></a>内部表示方式</h2><p>数据采用与自身位宽相同的有符号整数存储。这个数在内存中实际范围会高于上述范围，从 String 转换到十进制数的时候会做对应的检查。</p><p>由于现代 CPU 不支持 128 位数字，因此 Decimal128 上的操作由软件模拟。所以 Decimal128 的运算速度明显慢于 Decimal32&#x2F;Decimal64。</p><h2 id="运算和结果类型"><a href="#运算和结果类型" class="headerlink" title="运算和结果类型"></a>运算和结果类型</h2><p>对 Decimal 的二进制运算导致更宽的结果类型（无论参数的顺序如何）。</p><ul><li><strong>Decimal64(S1) <op> Decimal32(S2) -&gt; Decimal64(S)</strong></li><li><strong>Decimal128(S1) <op> Decimal32(S2) -&gt; Decimal128(S)</strong></li><li><strong>Decimal128(S1) <op> Decimal64(S2) -&gt; Decimal128(S)</strong></li></ul><p>精度变化的规则：</p><ul><li>加法，减法：S &#x3D; max(S1, S2)。</li><li>乘法：S &#x3D; S1 + S2。</li><li>除法：S &#x3D; S1。</li></ul><p>对于 Decimal 和整数之间的类似操作，结果是与参数大小相同的十进制。</p><p>未定义 Decimal 和 Float32&#x2F;Float64 之间的函数。要执行此类操作，您可以使用：toDecimal32、toDecimal64、toDecimal128 或 toFloat32，toFloat64，需要显式地转换其中一个参数。注意，结果将失去精度，类型转换是昂贵的操作。</p><p>Decimal 上的一些函数返回结果为 Float64（例如，var 或 stddev）。对于其中一些，中间计算发生在 Decimal 中。对于此类函数，尽管结果类型相同，但 Float64 和 Decimal 中相同数据的结果可能不同。</p><h2 id="溢出检查"><a href="#溢出检查" class="headerlink" title="溢出检查"></a>溢出检查</h2><p>在对 Decimal 类型执行操作时，数值可能会发生溢出。分数中的过多数字被丢弃（不是舍入的）。整数中的过多数字将导致异常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT toDecimal32(2, 4) AS x, x / 3</span><br><span class="line"></span><br><span class="line">┌──────x─┬─divide(toDecimal32(2, 4), 3)─┐</span><br><span class="line">│ 2.0000 │                       0.6666 │</span><br><span class="line">└────────┴──────────────────────────────┘</span><br><span class="line"></span><br><span class="line">SELECT toDecimal32(4.2, 8) AS x, x * x</span><br><span class="line"></span><br><span class="line">DB::Exception: Scale is out of bounds.</span><br><span class="line"></span><br><span class="line">SELECT toDecimal32(4.2, 8) AS x, 6 * x</span><br><span class="line"></span><br><span class="line">DB::Exception: Decimal math overflow.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>检查溢出会导致计算变慢。如果已知溢出不可能，则可以通过设置 <strong>decimal_check_overflow</strong> 来禁用溢出检查，在这种情况下，溢出将导致结果不正确：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SET decimal_check_overflow = 0;</span><br><span class="line">SELECT toDecimal32(4.2, 8) AS x, 6 * x</span><br><span class="line"></span><br><span class="line">┌──────────x─┬─multiply(6, toDecimal32(4.2, 8))─┐</span><br><span class="line">│ 4.20000000 │                     -17.74967296 │</span><br><span class="line">└────────────┴──────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>溢出检查不仅发生在算术运算上，还发生在比较运算上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT toDecimal32(1, 8) &lt; 100</span><br><span class="line"></span><br><span class="line">DB::Exception: Can&#x27;t compare.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="日期时间相关类型"><a href="#日期时间相关类型" class="headerlink" title="日期时间相关类型"></a>日期时间相关类型</h1><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>用两个字节存储，表示从 1970-01-01 (无符号) 到当前的日期值。允许存储从 Unix 纪元开始到编译阶段定义的上限阈值常量（目前上限是 2106 年，但最终完全支持的年份为 2105）。最小值输出为 1970-01-01。</p><p>值的范围: [1970-01-01, 2149-06-06]。</p><p>日期中没有存储时区信息。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a><strong>示例</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE date_test</span><br><span class="line">(</span><br><span class="line">    `timestamp` Date,</span><br><span class="line">    `event_id` UInt8</span><br><span class="line">)</span><br><span class="line">ENGINE = Memory;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO date_test VALUES (&#x27;2019-12-20&#x27;, 1);</span><br><span class="line">SELECT * FROM date_test;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌──timestamp─┬─event_id─┐</span><br><span class="line">│ 2019-12-20 │        1 │</span><br><span class="line">└────────────┴──────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="DateTime"><a href="#DateTime" class="headerlink" title="DateTime"></a>DateTime</h2><p>时间戳类型。用四个字节（无符号的）存储 Unix 时间戳）。允许存储与日期类型相同的范围内的值。最小值为 1970-01-01 00:00:00。时间戳类型值精确到秒（没有闰秒）。</p><p>值的范围: [1970-01-01 00:00:00, 2106-02-07 06:28:15]。</p><h3 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h3><p>使用启动客户端或服务器时的系统时区，时间戳是从文本（分解为组件）转换为二进制并返回。在文本格式中，有关夏令时的信息会丢失。</p><p>默认情况下，客户端连接到服务的时候会使用服务端时区。您可以通过启用客户端命令行选项 <strong>–use_client_time_zone</strong> 来设置使用客户端时间。</p><p>因此，在处理文本日期时（例如，在保存文本转储时），请记住在夏令时更改期间可能存在歧义，如果时区发生更改，则可能存在匹配数据的问题。</p><h2 id="DateTime64"><a href="#DateTime64" class="headerlink" title="DateTime64"></a>DateTime64</h2><p>此类型允许以日期（date）加时间（time）的形式来存储一个时刻的时间值，具有定义的亚秒精度</p><p>时间刻度大小（精度）：10(-精度) 秒</p><p>语法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DateTime64(precision, [timezone])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在内部，此类型以 Int64 类型将数据存储为自 Linux 纪元开始(1970-01-01 00:00:00UTC)的时间刻度数（ticks）。时间刻度的分辨率由 precision 参数确定。此外，<strong>DateTime64</strong> 类型可以像存储其他数据列一样存储时区信息，时区会影响 <strong>DateTime64</strong> 类型的值如何以文本格式显示，以及如何解析以字符串形式指定的时间数据 (‘2020-01-01 05:00:01.000’)。时区不存储在表的行中（也不在 resultset 中），而是存储在列的元数据中。详细信息请参考 <a href="https://clickhouse.com/docs/zh/sql-reference/data-types/datetime">DateTime</a> 数据类型.</p><p>值的范围: [1900-01-01 00:00:00, 2299-12-31 23:59:59.99999999] (注意: 最大值的精度是 8)。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p><strong>1.</strong> 创建一个具有 <strong>DateTime64</strong> 类型列的表，并向其中插入数据:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE dt</span><br><span class="line">(</span><br><span class="line">    `timestamp` DateTime64(3, &#x27;Asia/Istanbul&#x27;),</span><br><span class="line">    `event_id` UInt8</span><br><span class="line">)</span><br><span class="line">ENGINE = Memory</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO dt Values (1546300800000, 1), (&#x27;2019-01-01 00:00:00&#x27;, 2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM dt</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">┌───────────────timestamp─┬─event_id─┐</span><br><span class="line">│ 2019-01-01 03:00:00.000 │        1 │</span><br><span class="line">│ 2019-01-01 00:00:00.000 │        2 │</span><br><span class="line">└─────────────────────────┴──────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>将日期时间作为 integer 类型插入时，它会被视为适当缩放的 Unix 时间戳(UTC)。<strong>1546300800000</strong> （精度为 3）表示 <strong>‘2019-01-01 00:00:00’</strong> UTC. 不过，因为 <strong>timestamp</strong> 列指定了 <strong>Asia&#x2F;Istanbul</strong> （UTC+3）的时区，当作为字符串输出时，它将显示为 <strong>‘2019-01-01 03:00:00’</strong></li><li>当把字符串作为日期时间插入时，它会被赋予时区信息。 <strong>‘2019-01-01 00:00:00’</strong> 将被认为处于 <strong>Asia&#x2F;Istanbul</strong> 时区并被存储为 <strong>1546290000000</strong>.</li></ul><p><strong>2.</strong> 过滤 <strong>DateTime64</strong> 类型的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM dt WHERE timestamp = toDateTime64(&#x27;2019-01-01 00:00:00&#x27;, 3, &#x27;Asia/Istanbul&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌───────────────timestamp─┬─event_id─┐</span><br><span class="line">│ 2019-01-01 00:00:00.000 │        2 │</span><br><span class="line">└─────────────────────────┴──────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>与 <strong>DateTime</strong> 不同, <strong>DateTime64</strong> 类型的值不会自动从 <strong>String</strong> 类型的值转换过来</p><p><strong>3.</strong> 获取 <strong>DateTime64</strong> 类型值的时区信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT toDateTime64(now(), 3, &#x27;Asia/Istanbul&#x27;) AS column, toTypeName(column) AS x</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌──────────────────column─┬─x──────────────────────────────┐</span><br><span class="line">│ 2019-10-16 04:12:04.000 │ DateTime64(3, &#x27;Asia/Istanbul&#x27;) │</span><br><span class="line">└─────────────────────────┴────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>4.</strong> 时区转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">toDateTime64(timestamp, 3, &#x27;Europe/London&#x27;) as lon_time,</span><br><span class="line">toDateTime64(timestamp, 3, &#x27;Asia/Istanbul&#x27;) as mos_time</span><br><span class="line">FROM dt</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">┌───────────────lon_time──┬────────────────mos_time─┐</span><br><span class="line">│ 2019-01-01 00:00:00.000 │ 2019-01-01 03:00:00.000 │</span><br><span class="line">│ 2018-12-31 21:00:00.000 │ 2019-01-01 00:00:00.000 │</span><br><span class="line">└─────────────────────────┴─────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="枚举类型（Enum8-Enum16）"><a href="#枚举类型（Enum8-Enum16）" class="headerlink" title="枚举类型（Enum8,Enum16）"></a>枚举类型（Enum8,Enum16）</h1><p>包括 <strong>Enum8</strong> 和 <strong>Enum16</strong> 类型。<strong>Enum</strong> 保存 <strong>‘string’&#x3D; integer</strong> 的对应关系。在 byconity 中，尽管用户使用的是字符串常量，但所有含有 <strong>Enum</strong> 数据类型的操作都是按照包含整数的值来执行。这在性能方面比使用 <strong>String</strong> 数据类型更有效。</p><ul><li><strong>Enum8</strong> 用 <strong>‘String’&#x3D; Int8</strong> 对描述。</li><li><strong>Enum16</strong> 用 <strong>‘String’&#x3D; Int16</strong> 对描述。</li></ul><h2 id="用法示例-1"><a href="#用法示例-1" class="headerlink" title="用法示例"></a>用法示例</h2><p>创建一个带有一个枚举 <strong>Enum8(‘hello’ &#x3D; 1, ‘world’ &#x3D; 2)</strong> 类型的列：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t_enum</span><br><span class="line">(</span><br><span class="line">    x Enum8(&#x27;hello&#x27; = 1, &#x27;world&#x27; = 2)</span><br><span class="line">)</span><br><span class="line">ENGINE = Memory</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个 <strong>x</strong> 列只能存储类型定义中列出的值：**’hello’<strong>或</strong>‘world’**。如果您尝试保存任何其他值，byconity 抛出异常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">:) INSERT INTO t_enum VALUES (&#x27;hello&#x27;), (&#x27;world&#x27;), (&#x27;hello&#x27;)</span><br><span class="line"></span><br><span class="line">INSERT INTO t_enum VALUES</span><br><span class="line"></span><br><span class="line">Ok.</span><br><span class="line"></span><br><span class="line">3 rows in set. Elapsed: 0.002 sec.</span><br><span class="line"></span><br><span class="line">:) insert into t_enum values(&#x27;a&#x27;)</span><br><span class="line"></span><br><span class="line">INSERT INTO t_enum VALUES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exception on client:</span><br><span class="line">Code: 49. DB::Exception: Unknown element &#x27;a&#x27; for type Enum8(&#x27;hello&#x27; = 1, &#x27;world&#x27; = 2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当您从表中查询数据时，byconity 从 <strong>Enum</strong> 中输出字符串值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM t_enum</span><br><span class="line"></span><br><span class="line">┌─x─────┐</span><br><span class="line">│ hello │</span><br><span class="line">│ world │</span><br><span class="line">│ hello │</span><br><span class="line">└───────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果需要看到对应行的数值，则必须将 <strong>Enum</strong> 值转换为整数类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT CAST(x, &#x27;Int8&#x27;) FROM t_enum</span><br><span class="line"></span><br><span class="line">┌─CAST(x, &#x27;Int8&#x27;)─┐</span><br><span class="line">│               1 │</span><br><span class="line">│               2 │</span><br><span class="line">│               1 │</span><br><span class="line">└─────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在查询中创建枚举值，您还需要使用 <strong>CAST</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT toTypeName(CAST(&#x27;a&#x27;, &#x27;Enum8(\&#x27;a\&#x27; = 1, \&#x27;b\&#x27; = 2)&#x27;))</span><br><span class="line"></span><br><span class="line">┌─toTypeName(CAST(&#x27;a&#x27;, &#x27;Enum8(\&#x27;a\&#x27; = 1, \&#x27;b\&#x27; = 2)&#x27;))─┐</span><br><span class="line">│ Enum8(&#x27;a&#x27; = 1, &#x27;b&#x27; = 2)                              │</span><br><span class="line">└──────────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="规则及用法"><a href="#规则及用法" class="headerlink" title="规则及用法"></a>规则及用法</h2><p><strong>Enum8</strong> 类型的每个值范围是 <strong>-128 … 127</strong>，<strong>Enum16</strong> 类型的每个值范围是 <strong>-32768 … 32767</strong>。所有的字符串或者数字都必须是不一样的。允许存在空字符串。如果某个 Enum 类型被指定了（在表定义的时候），数字可以是任意顺序。然而，顺序并不重要。</p><p><strong>Enum</strong> 中的字符串和数值都不能是 <a href="https://clickhouse.com/docs/zh/sql-reference/data-types/enum">NULL</a>。</p><p><strong>Enum</strong> 包含在 <a href="https://clickhouse.com/docs/zh/sql-reference/data-types/nullable">可为空</a> 类型中。因此，如果您使用此查询创建一个表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t_enum_nullable</span><br><span class="line">(</span><br><span class="line">    x Nullable( Enum8(&#x27;hello&#x27; = 1, &#x27;world&#x27; = 2) )</span><br><span class="line">)</span><br><span class="line">ENGINE = TinyLog</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不仅可以存储 <strong>‘hello’</strong> 和 <strong>‘world’</strong> ，还可以存储 <strong>NULL</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO t_enum_nullable Values(&#x27;hello&#x27;),(&#x27;world&#x27;),(NULL)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在内存中，<strong>Enum</strong> 列的存储方式与相应数值的 <strong>Int8</strong> 或 <strong>Int16</strong> 相同。</p><p>当以文本方式读取的时候，byconity 将值解析成字符串然后去枚举值的集合中搜索对应字符串。如果没有找到，会抛出异常。当读取文本格式的时候，会根据读取到的字符串去找对应的数值。如果没有找到，会抛出异常。</p><p>当以文本形式写入时，byconity 将值解析成字符串写入。如果列数据包含垃圾数据（不是来自有效集合的数字），则抛出异常。Enum 类型以二进制读取和写入的方式与 <strong>Int8</strong> 和 <strong>Int16</strong> 类型一样的。</p><p>隐式默认值是数值最小的值。</p><p>在 <strong>ORDER BY</strong>，<strong>GROUP BY</strong>，<strong>IN</strong>，<strong>DISTINCT</strong> 等等中，Enum 的行为与相应的数字相同。例如，按数字排序。对于等式运算符和比较运算符，Enum 的工作机制与它们在底层数值上的工作机制相同。</p><p>枚举值不能与数字进行比较。枚举可以与常量字符串进行比较。如果与之比较的字符串不是有效 Enum 值，则将引发异常。可以使用 IN 运算符来判断一个 Enum 是否存在于某个 Enum 集合中，其中集合中的 Enum 需要用字符串表示。</p><p>大多数具有数字和字符串的运算并不适用于 Enums；例如，Enum 类型不能和一个数值相加。但是，Enum 有一个原生的 <strong>toString</strong> 函数，它返回它的字符串值。</p><p>Enum 值使用 <strong>toT</strong> 函数可以转换成数值类型，其中 T 是一个数值类型。若 <strong>T</strong> 恰好对应 Enum 的底层数值类型，这个转换是零消耗的。</p><p>Enum 类型可以被 <strong>ALTER</strong> 无成本地修改对应集合的值。可以通过 <strong>ALTER</strong> 操作来增加或删除 Enum 的成员（只要表没有用到该值，删除都是安全的）。作为安全保障，改变之前使用过的 Enum 成员将抛出异常。</p><p>通过 <strong>ALTER</strong> 操作，可以将 <strong>Enum8</strong> 转成 <strong>Enum16</strong>，反之亦然，就像 <strong>Int8</strong> 转 <strong>Int16</strong> 一样。</p><h1 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h1><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>字符串可以任意长度的。它可以包含任意的字节集，包含空字节。因此，字符串类型可以代替其他 DBMSs 中的 VARCHAR、BLOB、CLOB 等类型。</p><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>byconity 没有编码的概念。字符串可以是任意的字节集，按它们原本的方式进行存储和输出。 若需存储文本，我们建议使用 UTF-8 编码。至少，如果你的终端使用 UTF-8（推荐），这样读写就不需要进行任何的转换了。 同样，对不同的编码文本 byconity 会有不同处理字符串的函数。 比如，<strong>length</strong> 函数可以计算字符串包含的字节数组的长度，然而 <strong>lengthUTF8</strong> 函数是假设字符串以 UTF-8 编码，计算的是字符串包含的 Unicode 字符的长度。</p><h2 id="FixString"><a href="#FixString" class="headerlink" title="FixString"></a>FixString</h2><p>固定长度 N 的字符串（N 必须是严格的正自然数）。</p><p>您可以使用下面的语法对列声明为 <strong>FixedString</strong> 类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;column_name&gt; FixedString(N)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中 <strong>N</strong> 表示自然数。</p><p>当数据的长度恰好为 N 个字节时，<strong>FixedString</strong> 类型是高效的。 在其他情况下，这可能会降低效率。</p><p>可以有效存储在 <strong>FixedString</strong> 类型的列中的值的示例：</p><ul><li>二进制表示的 IP 地址（IPv6 使用 **FixedString(16)**）</li><li>语言代码（ru_RU, en_US … ）</li><li>货币代码（USD, RUB … ）</li><li>二进制表示的哈希值（MD5 使用 **FixedString(16)**，SHA256 使用 **FixedString(32)**）</li></ul><p>请使用 <a href="https://clickhouse.com/docs/zh/sql-reference/data-types/uuid">UUID</a> 数据类型来存储 UUID 值，。</p><p>当向 byconity 中插入数据时,</p><ul><li>如果字符串包含的字节数少于 &#96;N’,将对字符串末尾进行空字节填充。</li><li>如果字符串包含的字节数大于 <strong>N</strong>,将抛出**Too large value for FixedString(N)**异常。</li></ul><p>当做数据查询时，byconity 不会删除字符串末尾的空字节。 如果使用 <strong>WHERE</strong> 子句，则须要手动添加空字节以匹配 <strong>FixedString</strong> 的值。 以下示例阐明了如何将 <strong>WHERE</strong> 子句与 <strong>FixedString</strong> 一起使用。</p><p>考虑带有**FixedString（2)**列的表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─name──┐</span><br><span class="line">│ b     │</span><br><span class="line">└───────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查询语句 <strong>SELECT * FROM FixedStringTable WHERE a &#x3D; ‘b’</strong> 不会返回任何结果。请使用空字节来填充筛选条件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM FixedStringTable</span><br><span class="line">WHERE a = &#x27;b\0&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─a─┐</span><br><span class="line">│ b │</span><br><span class="line">└───┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这种方式与 MySQL 的 <strong>CHAR</strong> 类型的方式不同（MySQL 中使用空格填充字符串，并在输出时删除空格）。</p><p>请注意，<strong>FixedString(N)<strong>的长度是个常量。仅由空字符组成的字符串，函数 <a href="https://clickhouse.com/docs/zh/sql-reference/functions/array-functions#array_functions-length">length</a> 返回值为</strong> N</strong>,而函数 <a href="https://clickhouse.com/docs/zh/sql-reference/functions/string-functions#empty">empty</a> 的返回值为 <strong>1</strong>。</p><h1 id="嵌套数据结构"><a href="#嵌套数据结构" class="headerlink" title="嵌套数据结构"></a>嵌套数据结构</h1><h2 id="Nested-Name1-Type1-Name2-Type2-…"><a href="#Nested-Name1-Type1-Name2-Type2-…" class="headerlink" title="Nested(Name1 Type1, Name2 Type2, …)"></a>Nested(Name1 Type1, Name2 Type2, …)</h2><p>嵌套数据结构类似于嵌套表。嵌套数据结构的参数（列名和类型）与 CREATE 查询类似。每个表可以包含任意多行嵌套数据结构。</p><p>示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE nested_test (s String, nest Nested(x UInt8, y UInt32)) ENGINE = Memory;</span><br><span class="line">INSERT INTO nested_test VALUES (&#x27;Hello&#x27;, [1,2], [10,20]), (&#x27;World&#x27;, [3,4,5], [30,40,50]), (&#x27;Goodbye&#x27;, [], []);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM nested_test;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">┌─s───────┬─nest.x──┬─nest.y─────┐</span><br><span class="line">│ Hello   │ [1,2]   │ [10,20]    │</span><br><span class="line">│ World   │ [3,4,5] │ [30,40,50] │</span><br><span class="line">│ Goodbye │ []      │ []         │</span><br><span class="line">└─────────┴─────────┴────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以可以简单地把嵌套数据结构当做是所有列都是相同长度的多列数组。</p><p>SELECT 查询只有在使用 ARRAY JOIN 的时候才可以指定整个嵌套数据结构的名称。更多信息，参考 «ARRAY JOIN 子句»。示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT s, nest.x, nest.y FROM nested_test ARRAY JOIN nest;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">┌─s─────┬─nest.x─┬─nest.y─┐</span><br><span class="line">│ Hello │      1 │     10 │</span><br><span class="line">│ Hello │      2 │     20 │</span><br><span class="line">│ World │      3 │     30 │</span><br><span class="line">│ World │      4 │     40 │</span><br><span class="line">│ World │      5 │     50 │</span><br><span class="line">└───────┴────────┴────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不能对整个嵌套数据结构执行 SELECT。只能明确列出属于它一部分列。</p><p>对于 INSERT 查询，可以单独地传入所有嵌套数据结构中的列数组（假如它们是单独的列数组）。在插入过程中，系统会检查它们是否有相同的长度。</p><p>对于 DESCRIBE 查询，嵌套数据结构中的列会以相同的方式分别列出来。</p><p>ALTER 查询对嵌套数据结构的操作非常有限。</p><h1 id="元组类型（Tuple）"><a href="#元组类型（Tuple）" class="headerlink" title="元组类型（Tuple）"></a>元组类型（Tuple）</h1><p>元组，其中每个元素都有单独的 <a href="https://clickhouse.com/docs/zh/sql-reference/data-types/#data_types">类型</a>。</p><p>不能在表中存储元组（除了内存表）。它们可以用于临时列分组。在查询中，IN 表达式和带特定参数的 lambda 函数可以来对临时列进行分组。更多信息，请参阅 <a href="https://clickhouse.com/docs/zh/sql-reference/data-types/tuple">IN 操作符</a> 和 <a href="https://clickhouse.com/docs/zh/sql-reference/data-types/tuple">高阶函数</a>。</p><p>元组可以是查询的结果。在这种情况下，对于 JSON 以外的文本格式，括号中的值是逗号分隔的。在 JSON 格式中，元组作为数组输出（在方括号中）。</p><h2 id="创建元组"><a href="#创建元组" class="headerlink" title="创建元组"></a>创建元组</h2><p>可以使用函数来创建元组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tuple(T1, T2, ...)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建元组的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">:) SELECT tuple(1,&#x27;a&#x27;) AS x, toTypeName(x)</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">    (1, &#x27;a&#x27;) AS x,</span><br><span class="line">    toTypeName(x)</span><br><span class="line"></span><br><span class="line">┌─x───────┬─toTypeName(tuple(1, &#x27;a&#x27;))─┐</span><br><span class="line">│ (1,&#x27;a&#x27;) │ Tuple(UInt8, String)      │</span><br><span class="line">└─────────┴───────────────────────────┘</span><br><span class="line"></span><br><span class="line">1 rows in set. Elapsed: 0.021 sec.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="元组中的数据类型"><a href="#元组中的数据类型" class="headerlink" title="元组中的数据类型"></a>元组中的数据类型</h2><p>在动态创建元组时，byconity 会自动为元组的每一个参数赋予最小可表达的类型。如果参数为 <a href="https://clickhouse.com/docs/zh/sql-reference/data-types/tuple#null-literal">NULL</a>，那这个元组对应元素是 <a href="https://clickhouse.com/docs/zh/sql-reference/data-types/nullable">可为空</a>。</p><p>自动数据类型检测示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SELECT tuple(1, NULL) AS x, toTypeName(x)</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">    (1, NULL) AS x,</span><br><span class="line">    toTypeName(x)</span><br><span class="line"></span><br><span class="line">┌─x────────┬─toTypeName(tuple(1, NULL))──────┐</span><br><span class="line">│ (1,NULL) │ Tuple(UInt8, Nullable(Nothing)) │</span><br><span class="line">└──────────┴─────────────────────────────────┘</span><br><span class="line"></span><br><span class="line">1 rows in set. Elapsed: 0.002 sec.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="低基数类型"><a href="#低基数类型" class="headerlink" title="低基数类型"></a>低基数类型</h1><p>把其它数据类型转变为字典编码类型。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LowCardinality(data_type)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li><strong>data_type</strong> — String, FixedString, Date, DateTime，包括数字类型，但是 Decimal 除外。对一些数据类型来说，<strong>LowCardinality</strong> 并不高效，详查 <a href="https://clickhouse.com/docs/zh/operations/settings/settings#allow_suspicious_low_cardinality_types">allow_suspicious_low_cardinality_types</a> 设置描述。</li></ul><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p><strong>LowCardinality</strong> 是一种改变数据存储和数据处理方法的概念。 byconity 会把 <strong>LowCardinality</strong> 所在的列进行 <a href="https://en.wikipedia.org/wiki/Dictionary_coder">dictionary coding</a>。对很多应用来说，处理字典编码的数据可以显著的增加 <a href="https://clickhouse.com/docs/zh/sql-reference/statements/select/">SELECT</a> 查询速度。</p><p>使用 <strong>LowCarditality</strong> 数据类型的效率依赖于数据的多样性。如果一个字典包含少于 10000 个不同的值，那么 byconity 可以进行更高效的数据存储和处理。反之如果字典多于 10000，效率会表现的更差。</p><p>当使用字符类型的时候，可以考虑使用 <strong>LowCardinality</strong> 代替 Enum。 <strong>LowCardinality</strong> 通常更加灵活和高效。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>创建一个 <strong>LowCardinality</strong> 类型的列：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE lc_t</span><br><span class="line">(</span><br><span class="line">    `id` UInt16,</span><br><span class="line">    `strings` LowCardinality(String)</span><br><span class="line">)</span><br><span class="line">ENGINE = Memory</span><br><span class="line">ORDER BY id</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="域"><a href="#域" class="headerlink" title="域"></a>域</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>Domain 类型是特定实现的类型，它总是与某个现存的基础类型保持二进制兼容的同时添加一些额外的特性，以能够在维持磁盘数据不变的情况下使用这些额外的特性。目前 byconity 暂不支持自定义 domain 类型。</p><p>如果你可以在一个地方使用与 Domain 类型二进制兼容的基础类型，那么在相同的地方您也可以使用 Domain 类型，例如：</p><ul><li>使用 Domain 类型作为表中列的类型</li><li>对 Domain 类型的列进行读&#x2F;写数据</li><li>如果与 Domain 二进制兼容的基础类型可以作为索引，那么 Domain 类型也可以作为索引</li><li>将 Domain 类型作为参数传递给函数使用</li><li>其他</li></ul><h3 id="Domains-的额外特性"><a href="#Domains-的额外特性" class="headerlink" title="Domains 的额外特性"></a>Domains 的额外特性</h3><ul><li>在执行 SHOW CREATE TABLE 或 DESCRIBE TABLE 时，其对应的列总是展示为 Domain 类型的名称</li><li>在 INSERT INTO domain_table(domain_column) VALUES(…)中输入数据总是以更人性化的格式进行输入</li><li>在 SELECT domain_column FROM domain_table 中数据总是以更人性化的格式输出</li><li>在 INSERT INTO domain_table FORMAT CSV …中，实现外部源数据以更人性化的格式载入</li></ul><h3 id="Domains-类型的限制"><a href="#Domains-类型的限制" class="headerlink" title="Domains 类型的限制"></a>Domains 类型的限制</h3><ul><li>无法通过 <strong>ALTER TABLE</strong> 将基础类型的索引转换为 Domain 类型的索引。</li><li>当从其他列或表插入数据时，无法将 string 类型的值隐式地转换为 Domain 类型的值。</li><li>无法对存储为 Domain 类型的值添加约束。</li></ul><h2 id="ipv4"><a href="#ipv4" class="headerlink" title="ipv4"></a>ipv4</h2><p><strong>IPv4</strong> 是与 <strong>UInt32</strong> 类型保持二进制兼容的 Domain 类型，其用于存储 IPv4 地址的值。它提供了更为紧凑的二进制存储的同时支持识别可读性更加友好的输入输出格式。</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE hits (url String, from IPv4) ENGINE = Memory</span><br><span class="line"></span><br><span class="line">DESCRIBE TABLE hits;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">┌─name─┬─type───┬─default_type─┬─default_expression─┬─comment─┬─codec_expression─┐</span><br><span class="line">│ url  │ String │              │                    │         │                  │</span><br><span class="line">│ from │ IPv4   │              │                    │         │                  │</span><br><span class="line">└──────┴────────┴──────────────┴────────────────────┴─────────┴──────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同时您也可以使用 <strong>IPv4</strong> 类型的列作为主键：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE hits (url String, from IPv4) ENGINE = Memory;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在写入与查询时，<strong>IPv4</strong> 类型能够识别可读性更加友好的输入输出格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO hits (url, from) VALUES (&#x27;https://wikipedia.org&#x27;, &#x27;116.253.40.133&#x27;)(&#x27;https://byconity.com&#x27;, &#x27;183.247.232.58&#x27;)(&#x27;https://byconity.com/docs/en/&#x27;, &#x27;116.106.34.242&#x27;);</span><br><span class="line"></span><br><span class="line">SELECT * FROM hits;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">┌─url────────────────────────────────┬───────────from─┐</span><br><span class="line">│ https://byconity.com/docs/en/ │ 116.106.34.242 │</span><br><span class="line">│ https://wikipedia.org              │ 116.253.40.133 │</span><br><span class="line">│ https://byconity.com          │ 183.247.232.58 │</span><br><span class="line">└────────────────────────────────────┴────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同时它提供更为紧凑的二进制存储格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT toTypeName(from), hex(from) FROM hits LIMIT 1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─toTypeName(from)─┬─hex(from)─┐</span><br><span class="line">│ IPv4             │ B7F7E83A  │</span><br><span class="line">└──────────────────┴───────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不可隐式转换为除 <strong>UInt32</strong> 以外的其他类型类型。如果要将 <strong>IPv4</strong> 类型的值转换成字符串，你可以使用**IPv4NumToString()**显示的进行转换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT toTypeName(s), IPv4NumToString(from) as s FROM hits LIMIT 1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─toTypeName(IPv4NumToString(from))─┬─s──────────────┐</span><br><span class="line">│ String                            │ 183.247.232.58 │</span><br><span class="line">└───────────────────────────────────┴────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或可以使用 <strong>CAST</strong> 将它转换为 <strong>UInt32</strong> 类型:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT toTypeName(i), CAST(from as UInt32) as i FROM hits LIMIT 1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─toTypeName(CAST(from, &#x27;UInt32&#x27;))─┬──────────i─┐</span><br><span class="line">│ UInt32                           │ 3086477370 │</span><br><span class="line">└──────────────────────────────────┴────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ipv6"><a href="#ipv6" class="headerlink" title="ipv6"></a>ipv6</h2><p><strong>IPv6</strong> 是与**FixedString(16)**类型保持二进制兼容的 Domain 类型，其用于存储 IPv6 地址的值。它提供了更为紧凑的二进制存储的同时支持识别可读性更加友好的输入输出格式。</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE hits (url String, from IPv6) ENGINE = Memory;</span><br><span class="line"></span><br><span class="line">DESCRIBE TABLE hits;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">┌─name─┬─type───┬─default_type─┬─default_expression─┬─comment─┬─codec_expression─┐</span><br><span class="line">│ url  │ String │              │                    │         │                  │</span><br><span class="line">│ from │ IPv6   │              │                    │         │                  │</span><br><span class="line">└──────┴────────┴──────────────┴────────────────────┴─────────┴──────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同时您也可以使用 <strong>IPv6</strong> 类型的列作为主键：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE hits (url String, from IPv6) ENGINE = Memory;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在写入与查询时，<strong>IPv6</strong> 类型能够识别可读性更加友好的输入输出格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO hits (url, from) VALUES (&#x27;https://wikipedia.org&#x27;, &#x27;2a02:aa08:e000:3100::2&#x27;)(&#x27;https://byconity.com&#x27;, &#x27;2001:44c8:129:2632:33:0:252:2&#x27;)(&#x27;https://byconity.com/docs/en/&#x27;, &#x27;2a02:e980:1e::1&#x27;);</span><br><span class="line"></span><br><span class="line">SELECT * FROM hits;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">┌─url────────────────────────────────┬─from──────────────────────────┐</span><br><span class="line">│ https://byconity.com          │ 2001:44c8:129:2632:33:0:252:2 │</span><br><span class="line">│ https://byconity.com/docs/en/ │ 2a02:e980:1e::1               │</span><br><span class="line">│ https://wikipedia.org              │ 2a02:aa08:e000:3100::2        │</span><br><span class="line">└────────────────────────────────────┴───────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同时它提供更为紧凑的二进制存储格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT toTypeName(from), hex(from) FROM hits LIMIT 1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─toTypeName(from)─┬─hex(from)────────────────────────┐</span><br><span class="line">│ IPv6             │ 200144C8012926320033000002520002 │</span><br><span class="line">└──────────────────┴──────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不可隐式转换为除 <strong>FixedString(16)<strong>以外的其他类型类型。如果要将</strong> IPv6</strong>类型的值转换成字符串，你可以使用**IPv6NumToString()**显示的进行转换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT toTypeName(s), IPv6NumToString(from) as s FROM hits LIMIT 1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─toTypeName(IPv6NumToString(from))─┬─s─────────────────────────────┐</span><br><span class="line">│ String                            │ 2001:44c8:129:2632:33:0:252:2 │</span><br><span class="line">└───────────────────────────────────┴───────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或使用 <strong>CAST</strong> 将其转换为 **FixedString(16)**：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT toTypeName(i), CAST(from as FixedString(16)) as i FROM hits LIMIT 1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─toTypeName(CAST(from, &#x27;FixedString(16)&#x27;))─┬─i───────┐</span><br><span class="line">│ FixedString(16)                           │  ��� │</span><br><span class="line">└───────────────────────────────────────────┴─────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Map-key-value"><a href="#Map-key-value" class="headerlink" title="Map(key, value)"></a>Map(key, value)</h1><p><strong>Map(key, value)</strong> 可以存储 <strong>key:value</strong> 键值对类型的数据。</p><p><strong>参数</strong></p><ul><li><strong>key</strong> — 键值对的 key，类型可以是：<a href="https://clickhouse.com/docs/zh/sql-reference/data-types/string">String</a>, <a href="https://clickhouse.com/docs/zh/sql-reference/data-types/int-uint">Integer</a>, <a href="https://clickhouse.com/docs/zh/sql-reference/data-types/lowcardinality">LowCardinality</a>, 或者 <a href="https://clickhouse.com/docs/zh/sql-reference/data-types/fixedstring">FixedString</a>.</li><li><strong>value</strong> — 键值对的 value，类型可以是：<a href="https://clickhouse.com/docs/zh/sql-reference/data-types/string">String</a>, <a href="https://clickhouse.com/docs/zh/sql-reference/data-types/int-uint">Integer</a>, <a href="https://clickhouse.com/docs/zh/sql-reference/data-types/array">Array</a>, <a href="https://clickhouse.com/docs/zh/sql-reference/data-types/lowcardinality">LowCardinality</a>, 或者 <a href="https://clickhouse.com/docs/zh/sql-reference/data-types/fixedstring">FixedString</a>.</li></ul><p>内容比较多，参考 <a href="https://bytedance.feishu.cn/wiki/wikcnc08bHgaa8IuPODIOqeBQqc">Map 功能梳理（WIP）</a> CE 版本部分。</p><h1 id="Array-T"><a href="#Array-T" class="headerlink" title="Array(T)"></a>Array(T)</h1><p>由 <strong>T</strong> 类型元素组成的数组。</p><p><strong>T</strong> 可以是任意类型，包含数组类型。 但不推荐使用多维数组，byconity 对多维数组的支持有限。例如，不能存储在 <strong>MergeTree</strong> 表中存储多维数组。</p><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><p>您可以使用 array 函数来创建数组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array(T)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>您也可以使用方括号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建数组示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT array(1, 2) AS x, toTypeName(x)</span><br><span class="line"></span><br><span class="line">┌─x─────┬─toTypeName(array(1, 2))─┐</span><br><span class="line">│ [1,2] │ Array(UInt8)            │</span><br><span class="line">└───────┴─────────────────────────┘</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT [1, 2] AS x, toTypeName(x)</span><br><span class="line"></span><br><span class="line">┌─x─────┬─toTypeName([1, 2])─┐</span><br><span class="line">│ [1,2] │ Array(UInt8)       │</span><br><span class="line">└───────┴────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用数据类型"><a href="#使用数据类型" class="headerlink" title="使用数据类型"></a>使用数据类型</h2><p>byconity 会自动检测数组元素,并根据元素计算出存储这些元素最小的数据类型。如果在元素中存在 <a href="https://clickhouse.com/docs/zh/sql-reference/data-types/array#null-literal">NULL</a> 或存在 <a href="https://clickhouse.com/docs/zh/sql-reference/data-types/nullable#data_type-nullable">可为空</a> 类型元素，那么数组的元素类型将会变成 <a href="https://clickhouse.com/docs/zh/sql-reference/data-types/nullable">可为空</a>。</p><p>如果 byconity 无法确定数据类型，它将产生异常。当尝试同时创建一个包含字符串和数字的数组时会发生这种情况 (<strong>SELECT array(1, ‘a’)</strong>)。</p><p>自动数据类型检测示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT array(1, 2, NULL) AS x, toTypeName(x)</span><br><span class="line"></span><br><span class="line">┌─x──────────┬─toTypeName(array(1, 2, NULL))─┐</span><br><span class="line">│ [1,2,NULL] │ Array(Nullable(UInt8))        │</span><br><span class="line">└────────────┴───────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果您尝试创建不兼容的数据类型数组，byconity 将引发异常：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SELECT array(1, &#x27;a&#x27;);</span><br><span class="line"></span><br><span class="line">SELECT [1, &#x27;a&#x27;]</span><br><span class="line"></span><br><span class="line">Query id: b3b81f4d-a082-4b2f-a63a-784edf94998e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0 rows in set. Elapsed: 1.231 sec.</span><br><span class="line"></span><br><span class="line">Received exception from server (version 21.8.7):</span><br><span class="line">Code: 386. DB::Exception: Received from 0.0.0.0:30000. DB::Exception: There is no supertype for types UInt8, String because some of them are String/FixedString and some of them are not: While processing [1, &#x27;a&#x27;] SQLSTATE: HY000.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Nullable（typename"><a href="#Nullable（typename" class="headerlink" title="Nullable（typename)"></a>Nullable（typename)</h1><p>允许用特殊标记 (<a href="https://clickhouse.com/docs/zh/sql-reference/data-types/nullable">NULL</a>) 表示«缺失值»，可以与 <strong>TypeName</strong> 的正常值存放一起。例如，<strong>Nullable(Int8)</strong> 类型的列可以存储 <strong>Int8</strong> 类型值，而没有值的行将存储 <strong>NULL</strong>。</p><p>对于 <strong>TypeName</strong>，不能使用复合数据类型数组和元组。复合数据类型可以包含 <strong>Nullable</strong> 类型值，例如 **Array(Nullable(Int8))**。</p><p><strong>Nullable</strong> 类型字段不能包含在表索引中。</p><p>除非在 byconity 服务器配置中另有说明，否则 <strong>NULL</strong> 是任何 <strong>Nullable</strong> 类型的默认值。</p><h2 id="存储特性"><a href="#存储特性" class="headerlink" title="存储特性"></a>存储特性</h2><p>要在表的列中存储 <strong>Nullable</strong> 类型值，byconity 除了使用带有值的普通文件外，还使用带有 <strong>NULL</strong> 掩码的单独文件。 掩码文件中的条目允许 byconity 区分每个表行的 <strong>NULL</strong> 和相应数据类型的默认值。 由于附加了新文件，<strong>Nullable</strong> 列与类似的普通文件相比消耗额外的存储空间。</p><p>!!! 注意点 “注意点” 使用 <strong>Nullable</strong> 几乎总是对性能产生负面影响，在设计数据库时请记住这一点</p><p>掩码文件中的条目允许 byconity 区分每个表行的对应数据类型的«NULL»和默认值由于有额外的文件，«Nullable»列比普通列消耗更多的存储空间</p><h1 id="AggregateFunction-name-types-of-arguments…"><a href="#AggregateFunction-name-types-of-arguments…" class="headerlink" title="AggregateFunction(name, types_of_arguments…)"></a>AggregateFunction(name, types_of_arguments…)</h1><p>聚合函数的中间状态，可以通过聚合函数名称加**-State <strong>后缀的形式得到它。与此同时，当您需要访问该类型的最终状态数据时，您需要以相同的聚合函数名加</strong>-Merge**后缀的形式来得到最终状态数据。</p><p><strong>AggregateFunction</strong> — 参数化的数据类型。</p><p><strong>参数</strong></p><ul><li>聚合函数名</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果函数具备多个参数列表，请在此处指定其他参数列表中的值。</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>聚合函数参数的类型</li></ul><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t</span><br><span class="line">(</span><br><span class="line">    column1 AggregateFunction(uniq, UInt64),</span><br><span class="line">    column2 AggregateFunction(anyIf, String, UInt8),</span><br><span class="line">    column3 AggregateFunction(quantiles(0.5, 0.9), UInt64)</span><br><span class="line">) ENGINE = ...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述中的 <a href="https://clickhouse.com/docs/zh/sql-reference/data-types/aggregatefunction#agg_function-uniq">uniq</a>， anyIf (<a href="https://clickhouse.com/docs/zh/sql-reference/data-types/aggregatefunction#agg_function-any">任何</a> + <a href="https://clickhouse.com/docs/zh/sql-reference/data-types/aggregatefunction#agg-functions-combinator-if">如果</a>) 以及 <a href="https://clickhouse.com/docs/zh/sql-reference/data-types/aggregatefunction">分位数</a> 都为 byconity 中支持的聚合函数。</p><h2 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h2><h3 id="数据写入"><a href="#数据写入" class="headerlink" title="数据写入"></a>数据写入</h3><p>当需要写入数据时，您需要将数据包含在 <strong>INSERT SELECT</strong> 语句中，同时对于 <strong>AggregateFunction</strong> 类型的数据，您需要使用对应的以**-State**为后缀的函数进行处理。</p><p><strong>函数使用示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uniqState(UserID)</span><br><span class="line">quantilesState(0.5, 0.9)(SendTiming)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不同于 <strong>uniq</strong> 和 <strong>quantiles</strong> 函数返回聚合结果的最终值，以**-State <strong>后缀的函数总是返回</strong> AggregateFunction**类型的数据的中间状态。</p><p>对于 <strong>SELECT</strong> 而言，<strong>AggregateFunction</strong> 类型总是以特定的二进制形式展现在所有的输出格式中。例如，您可以使用 <strong>SELECT</strong> 语句将函数的状态数据转储为 <strong>TabSeparated</strong> 格式的同时使用 <strong>INSERT</strong> 语句将数据转储回去。</p><h3 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h3><p>当从 <strong>AggregatingMergeTree</strong> 表中查询数据时，对于 <strong>AggregateFunction</strong> 类型的字段，您需要使用以**-Merge <strong>为后缀的相同聚合函数来聚合数据。对于非</strong> AggregateFunction <strong>类型的字段，请将它们包含在</strong> GROUP BY**子句中。</p><p>以**-Merge <strong>为后缀的聚合函数，可以将多个</strong> AggregateFunction**类型的中间状态组合计算为最终的聚合结果。</p><p>例如，如下的两个查询返回的结果总是一致：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT uniq(UserID) FROM table</span><br><span class="line"></span><br><span class="line">SELECT uniqMerge(state) FROM (SELECT uniqState(UserID) AS state FROM table GROUP BY RegionID)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><p>请参阅 CnchAggregatingMergeTree 的说明</p><h1 id="SimpleAggregateFunction"><a href="#SimpleAggregateFunction" class="headerlink" title="SimpleAggregateFunction"></a>SimpleAggregateFunction</h1><p><strong>SimpleAggregateFunction(name, types_of_arguments…)</strong> 数据类型存储聚合函数的当前值, 并不像 <strong>AggregateFunction</strong> 那样存储其全部状态。这种优化可以应用于具有以下属性函数: 将函数 <strong>f</strong> 应用于行集合 <strong>S1 UNION ALL S2</strong> 的结果，可以通过将 <strong>f</strong> 分别应用于行集合的部分, 然后再将 <strong>f</strong> 应用于结果来获得: **f(S1 UNION ALL S2) &#x3D; f(f(S1) UNION ALL f(S2))**。 这个属性保证了部分聚合结果足以计算出合并的结果，所以我们不必存储和处理任何额外的数据。</p><p>支持以下聚合函数:</p><ul><li><strong>any</strong></li><li><strong>anyLast</strong></li><li><strong>min</strong></li><li><strong>max</strong></li><li><strong>sum</strong></li><li><strong>sumWithOverflow</strong></li><li><strong>groupBitAnd</strong></li><li><strong>groupBitOr</strong></li><li><strong>groupBitXor</strong></li><li><strong>groupArrayArray</strong></li><li><strong>groupUniqArrayArray</strong></li><li><strong>sumMap</strong></li><li><strong>minMap</strong></li><li><strong>maxMap</strong></li><li><strong>argMin</strong></li><li><strong>argMax</strong></li></ul><p>!!! note “注” <strong>SimpleAggregateFunction(func, Type)</strong> 的值外观和存储方式于 <strong>Type</strong> 相同, 所以你不需要应用带有 <strong>-Merge</strong>&#x2F;<strong>-State</strong> 后缀的函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`SimpleAggregateFunction` 的性能优于具有相同聚合函数的 `AggregateFunction` 。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li>聚合函数的名称。</li><li>聚合函数参数的类型。</li></ul><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE simple (id UInt64, val SimpleAggregateFunction(sum, Double)) ENGINE=CnchAggregatingMergeTree ORDER BY id;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="特殊数据类型"><a href="#特殊数据类型" class="headerlink" title="特殊数据类型"></a>特殊数据类型</h1><p>特殊数据类型的值既不能存在表中也不能在结果中输出，但可用于查询的中间结果。</p><h2 id="Interval-类型"><a href="#Interval-类型" class="headerlink" title="Interval 类型"></a>Interval 类型</h2><p>表示时间和日期间隔的数据类型家族。 <a href="https://clickhouse.com/docs/zh/sql-reference/operators/#operator-interval">INTERVAL</a> 运算的结果类型。</p><p>!!! warning “警告” <strong>Interval</strong> 数据类型值不能存储在表中。</p><p>结构:</p><ul><li>时间间隔作为无符号整数值。</li><li>时间间隔的类型。</li></ul><p>支持的时间间隔类型:</p><ul><li><strong>SECOND</strong></li><li><strong>MINUTE</strong></li><li><strong>HOUR</strong></li><li><strong>DAY</strong></li><li><strong>WEEK</strong></li><li><strong>MONTH</strong></li><li><strong>QUARTER</strong></li><li><strong>YEAR</strong></li></ul><p>对于每个时间间隔类型，都有一个单独的数据类型。 例如， <strong>DAY</strong> 间隔对应于 <strong>IntervalDay</strong> 数据类型:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT toTypeName(INTERVAL 4 DAY)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─toTypeName(toIntervalDay(4))─┐</span><br><span class="line">│ IntervalDay                  │</span><br><span class="line">└──────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><p>您可以在与 <a href="https://clickhouse.com/docs/zh/sql-reference/data-types/date">日期</a> 和 <a href="https://clickhouse.com/docs/zh/sql-reference/data-types/datetime">日期时间</a> 类型值的算术运算中使用 <strong>Interval</strong> 类型值。 例如，您可以将 4 天添加到当前时间:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT now() as current_date_time, current_date_time + INTERVAL 4 DAY</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌───current_date_time─┬─plus(now(), toIntervalDay(4))─┐</span><br><span class="line">│ 2019-10-23 10:58:45 │           2019-10-27 10:58:45 │</span><br><span class="line">└─────────────────────┴───────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不同类型的间隔不能合并。 你不能使用诸如 <strong>4 DAY 1 HOUR</strong> 的时间间隔. 以小于或等于时间间隔最小单位的单位来指定间隔，例如，时间间隔 <strong>1 day and an hour</strong> 可以表示为 <strong>25 HOUR</strong> 或 <strong>90000 SECOND</strong>.</p><p>你不能对 <strong>Interval</strong> 类型的值执行算术运算，但你可以向 <strong>Date</strong> 或 <strong>DateTime</strong> 数据类型的值添加不同类型的时间间隔，例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT now() AS current_date_time, current_date_time + INTERVAL 4 DAY + INTERVAL 3 HOUR</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌───current_date_time─┬─plus(plus(now(), toIntervalDay(4)), toIntervalHour(3))─┐</span><br><span class="line">│ 2019-10-23 11:16:28 │                                    2019-10-27 14:16:28 │</span><br><span class="line">└─────────────────────┴────────────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以下查询将导致异常:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select now() AS current_date_time, current_date_time + (INTERVAL 4 DAY + INTERVAL 3 HOUR)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Received exception from server (version 19.14.1):</span><br><span class="line">Code: 43. DB::Exception: Received from localhost:9000. DB::Exception: Wrong argument types for function plus: if one argument is Interval, then another must be Date or DateTime..</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><p>用于表示高阶函数中的 lambdas 表达式。</p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>可以用在 IN 表达式的右半部分。</p><h2 id="Nothing"><a href="#Nothing" class="headerlink" title="Nothing"></a>Nothing</h2><p>此数据类型的唯一目的是表示不是期望值的情况。 所以不能创建一个 <strong>Nothing</strong> 类型的值。</p><p>例如，字面量 <a href="https://clickhouse.com/docs/zh/sql-reference/syntax#null-literal">NULL</a> 的类型为 **Nullable(Nothing)**。详情请见 Nullable。</p><p><strong>Nothing</strong> 类型也可以用来表示空数组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">:) SELECT toTypeName(array())</span><br><span class="line"></span><br><span class="line">SELECT toTypeName([])</span><br><span class="line"></span><br><span class="line">┌─toTypeName(array())─┐</span><br><span class="line">│ Array(Nothing)      │</span><br><span class="line">└─────────────────────┘</span><br><span class="line"></span><br><span class="line">1 rows in set. Elapsed: 0.062 sec.</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> Getting_Started </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监控集群</title>
      <link href="/zh-cn/docs/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/%E7%9B%91%E6%8E%A7%E9%9B%86%E7%BE%A4/"/>
      <url>/zh-cn/docs/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/%E7%9B%91%E6%8E%A7%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="监控集群"><a href="#监控集群" class="headerlink" title="监控集群"></a>监控集群</h1><h1 id="常见的监控指标"><a href="#常见的监控指标" class="headerlink" title="常见的监控指标"></a>常见的监控指标</h1><h2 id="Prometheus-监控指标："><a href="#Prometheus-监控指标：" class="headerlink" title="Prometheus 监控指标："></a>Prometheus 监控指标：</h2><p>引擎在 HTTP 接口 <code>/metrics</code> 路径下吐出监控项，默认端口 8123，可以直接访问对应端口输出。</p><p>可通过 kubectl 查看对应的 metric 输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl port-forward -n cnch cnch-default-server-0 8123:8123</span><br><span class="line"># 用port-forward功能代理端口</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之后可以用浏览器打开 localhost:8123&#x2F;metrics ，可查看到如下图所示的指标显示。每一行对应一个具体指标项，符合 Prometheus 约定的指标格式。</p><p><img src="/static/boxcnMqU9e8xvq46v7IH9ORtLCf.png"></p><h2 id="VictoriaMetric-指标聚合："><a href="#VictoriaMetric-指标聚合：" class="headerlink" title="VictoriaMetric 指标聚合："></a>VictoriaMetric 指标聚合：</h2><p>对指标的存储选择 VictoriaMetric，方便进行存储的横向扩展和提供更丰富的功能。</p><p>其中重要的功能是 VMRule，可对原始指标进行聚合。因各组件吐出的原始 Prometheus 指标其中一部分可以直接使用来构建监控告警，另一部分比较复杂，不容易直接构建监控看板和告警，所以通过 VWRule 进行聚合。以下为规则配置文件 cnch-metrics.yaml：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br></pre></td><td class="code"><pre><span class="line"># Source: victoria-rules/templates/cnch-metrics.yaml</span><br><span class="line">apiVersion: operator.victoriametrics.com/v1beta1</span><br><span class="line">kind: VMRule</span><br><span class="line">metadata:</span><br><span class="line">  name: release-name-victoria-rule-cnch-metrics</span><br><span class="line">  namespace: cnch-operator-default-system</span><br><span class="line">  labels:</span><br><span class="line">    app: victoria-rules</span><br><span class="line">    </span><br><span class="line">    chart: victoria-rules-0.1.6</span><br><span class="line">    release: &quot;release-name&quot;</span><br><span class="line">    heritage: &quot;Helm&quot;</span><br><span class="line">spec:</span><br><span class="line">  groups:</span><br><span class="line">    - name: CnchMetricsLatency</span><br><span class="line">      rules:</span><br><span class="line">        # Histogram at VW level</span><br><span class="line">        - record: cnch:latency:queries_vw:pct95</span><br><span class="line">          expr: |-</span><br><span class="line">            histogram_quantile(0.95,</span><br><span class="line">              sum by (cluster, namespace, vw, le)(</span><br><span class="line">                rate(cnch_histogram_metrics_query_latency_bucket[5m])</span><br><span class="line">              )</span><br><span class="line">            )</span><br><span class="line">        # Histogram at Cluster level</span><br><span class="line">        - record: cnch:latency:queries_cluster:pct95</span><br><span class="line">          expr: |-</span><br><span class="line">            histogram_quantile(0.95,</span><br><span class="line">              sum by (cluster, namespace, le)(</span><br><span class="line">                rate(cnch_histogram_metrics_query_latency_bucket[5m])</span><br><span class="line">              )</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        # Trends Metrics</span><br><span class="line">        # Trend Latency VW level</span><br><span class="line">        - record: cnch:latency:queries_vw:pct95:avg_1d</span><br><span class="line">          expr: avg_over_time(cnch:latency:queries_vw:pct95[1d])</span><br><span class="line"></span><br><span class="line">        # Trend Latency Cluster level</span><br><span class="line">        - record: cnch:latency:queries_cluster:pct95:avg_1d</span><br><span class="line">          expr: avg_over_time(cnch:latency:queries_cluster:pct95[1d])</span><br><span class="line">        # Histogram at VW level</span><br><span class="line">        - record: cnch:latency:queries_vw:pct99</span><br><span class="line">          expr: |-</span><br><span class="line">            histogram_quantile(0.99,</span><br><span class="line">              sum by (cluster, namespace, vw, le)(</span><br><span class="line">                rate(cnch_histogram_metrics_query_latency_bucket[5m])</span><br><span class="line">              )</span><br><span class="line">            )</span><br><span class="line">        # Histogram at Cluster level</span><br><span class="line">        - record: cnch:latency:queries_cluster:pct99</span><br><span class="line">          expr: |-</span><br><span class="line">            histogram_quantile(0.99,</span><br><span class="line">              sum by (cluster, namespace, le)(</span><br><span class="line">                rate(cnch_histogram_metrics_query_latency_bucket[5m])</span><br><span class="line">              )</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        # Trends Metrics</span><br><span class="line">        # Trend Latency VW level</span><br><span class="line">        - record: cnch:latency:queries_vw:pct99:avg_1d</span><br><span class="line">          expr: avg_over_time(cnch:latency:queries_vw:pct99[1d])</span><br><span class="line"></span><br><span class="line">        # Trend Latency Cluster level</span><br><span class="line">        - record: cnch:latency:queries_cluster:pct99:avg_1d</span><br><span class="line">          expr: avg_over_time(cnch:latency:queries_cluster:pct99[1d])</span><br><span class="line"></span><br><span class="line">        # Trend Slow Q VW level</span><br><span class="line">        - record: cnch:latency:queries_vw:slow_ratio:avg_1d</span><br><span class="line">          expr: avg_over_time(cnch:latency:queries_vw:slow_ratio[1d])</span><br><span class="line"></span><br><span class="line">        # Trend Slow Q Cluster level</span><br><span class="line">        - record: cnch:latency:queries_cluster:slow_ratio:avg_1d</span><br><span class="line">          expr: avg_over_time(cnch:latency:queries_cluster:slow_ratio[1d])</span><br><span class="line"></span><br><span class="line">        # Slow Q VW level  (Percentage of query &gt; 10s)</span><br><span class="line">        - record: cnch:latency:queries_vw:slow_ratio</span><br><span class="line">          expr: |-</span><br><span class="line">            sum by (cluster, namespace, vw)(</span><br><span class="line">              rate(cnch_histogram_metrics_query_latency_count[5m])</span><br><span class="line">              - on (namespace, pod, cluster, vw, instance) rate(cnch_histogram_metrics_query_latency_bucket&#123;le=&quot;10000&quot;&#125;[5m])</span><br><span class="line">            )</span><br><span class="line">            /</span><br><span class="line">            sum by (cluster, namespace, vw)(</span><br><span class="line">              rate(cnch_histogram_metrics_query_latency_count[5m])</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        # Slow Q Cluster level (Percentage of query &gt; 10s)</span><br><span class="line">        - record: cnch:latency:queries_cluster:slow_ratio</span><br><span class="line">          expr: |-</span><br><span class="line">            sum by (cluster, namespace)(</span><br><span class="line">              rate(cnch_histogram_metrics_query_latency_count[5m])</span><br><span class="line">              - on (namespace, pod, cluster, vw, instance) rate(cnch_histogram_metrics_query_latency_bucket&#123;le=&quot;10000&quot;&#125;[5m])</span><br><span class="line">            )</span><br><span class="line">            /</span><br><span class="line">            sum by (cluster, namespace)(</span><br><span class="line">              rate(cnch_histogram_metrics_query_latency_count[5m])</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        # Slow Q Cluster level (count queries &gt; 10s) used by OP portal</span><br><span class="line">        - record: cnch:latency:queries_cluster:slow_count</span><br><span class="line">          expr: |-</span><br><span class="line">            sum by (cluster, namespace)(</span><br><span class="line">              increase(cnch_histogram_metrics_query_latency_count[1h])</span><br><span class="line">              - on (namespace, pod, cluster, vw, instance) increase(cnch_histogram_metrics_query_latency_bucket&#123;le=&quot;10000&quot;&#125;[1h])</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        # Todo check if this metric became server only</span><br><span class="line">        - record: cnch:latency:queries_timeout:rate5m</span><br><span class="line">          expr: |-</span><br><span class="line">            sum by (cluster, namespace, pod, workload) (</span><br><span class="line">              rate(cnch_profile_events_timed_out_query_total[5m])</span><br><span class="line">              * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    - name: CnchMetricsQPS</span><br><span class="line">      rules:</span><br><span class="line">        # Trend WG workload level</span><br><span class="line">        # - record: cnch:profile_events:query:total_rate5m:avg_1d</span><br><span class="line">        #   expr: avg_over_time(sum by (cluster, namespace, workload, type) (cnch:profile_events:query:total_rate5m)[1d])</span><br><span class="line"></span><br><span class="line">        # Trend VW QPS VW level. server POV only</span><br><span class="line">        - record: cnch:profile_events:labelled_query_vw:total_rate5m:avg_1d</span><br><span class="line">          expr: avg_over_time(sum by (cluster, namespace, vw, query_type) (cnch:profile_events:labelled_query_vw:total_rate5m)[1d])</span><br><span class="line"></span><br><span class="line">        # VW QPS cluster level Todo use sum(avg_1d&#123;vw != &quot;&quot;&#125;) if no similar reenable this Trend</span><br><span class="line">        - record: cnch:profile_events:labelled_query_cluster:total_rate5m:avg_1d</span><br><span class="line">          expr: |-</span><br><span class="line">            avg_over_time(sum by (cluster, namespace, query_type) (cnch:profile_events:labelled_query_vw:total_rate5m)[1d])</span><br><span class="line"></span><br><span class="line">        # Trend VW Error Ratio VW level (can&#x27;t sum burnrate % so we pre-recorded a burnrate summed at vw level)</span><br><span class="line">        - record: cnch:profile_events:labelled_query_vw_sum:error_burnrate5m:avg_1d</span><br><span class="line">          expr: |-</span><br><span class="line">            avg_over_time(cnch:profile_events:labelled_query_vw_sum:error_burnrate5m[1d])</span><br><span class="line"></span><br><span class="line">        # Number of workers in a WG that use more than 80% memory</span><br><span class="line">        - record: cnch:workers:high_mem_rss:80pct_count</span><br><span class="line">          expr: |-</span><br><span class="line">            (</span><br><span class="line">              count(</span><br><span class="line">                (sum(</span><br><span class="line">                    container_memory_rss&#123;container!=&quot;&quot;, image!=&quot;&quot;&#125;</span><br><span class="line">                  * on(namespace,pod)</span><br><span class="line">                    group_left(workload, workload_type) namespace_workload_pod:kube_pod_owner:relabel&#123;workload=~&quot;cnch.*worker.*|vw.*&quot;&#125;</span><br><span class="line">                ) by (pod, namespace, workload)</span><br><span class="line">                / sum(</span><br><span class="line">                    kube_pod_container_resource_limits&#123;resource=&quot;memory&quot;&#125;</span><br><span class="line">                  * on(namespace,pod)</span><br><span class="line">                    group_left(workload, workload_type) namespace_workload_pod:kube_pod_owner:relabel&#123;workload=~&quot;cnch.*worker.*|vw.*&quot;&#125;</span><br><span class="line">                ) by (pod, namespace, workload)) &gt; 0.80</span><br><span class="line">              ) by (namespace, workload)</span><br><span class="line">            /</span><br><span class="line">              count(namespace_workload_pod:kube_pod_owner:relabel&#123;workload=~&quot;cnch.*worker.*|vw.*&quot;&#125;) by (namespace, workload)</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        # Byteyard Usage Profiler metrics</span><br><span class="line">        - record: cnch:vw:metrics:running_queries:time_milliseconds_total</span><br><span class="line">          expr: sum by (vw_id, cluster) (increase(cnch_internal_metrics_running_queries_time_milliseconds_total[30s]))</span><br><span class="line">        - record: cnch:vw:metrics:queued_queries:time_milliseconds_total</span><br><span class="line">          expr: sum by (vw_id, cluster) (increase(cnch_internal_metrics_queued_queries_time_milliseconds_total[30s]))</span><br><span class="line"></span><br><span class="line">      # Query Error Ratio over multiple intervals aka burn rate</span><br><span class="line"></span><br><span class="line">        # Record server POV, for vw only, the unlimited are only used for few dashboard and 1 alert rule</span><br><span class="line">        # Worker POV is used in workers dashboard only</span><br><span class="line">        - record: cnch:profile_events:labelled_query_vw:total_rate5m</span><br><span class="line">          expr: |-</span><br><span class="line">            sum(rate(cnch_profile_events_labelled_query_total&#123;resource_type=&quot;vw&quot;&#125;[5m])) by (pod, cluster, namespace, query_type, vw, wg)</span><br><span class="line">            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel&#123;workload=~&quot;.*server.*&quot;&#125;</span><br><span class="line"></span><br><span class="line">        # Record workers POV, used by Byteyard autosuspend (server pov might not have direct insert) and workers graph</span><br><span class="line">        - record: cnch:profile_events:labelled_query_vw_workers:total_rate5m</span><br><span class="line">          expr: |-</span><br><span class="line">            sum(rate(cnch_profile_events_labelled_query_total&#123;resource_type=&quot;vw&quot;&#125;[5m])) by (pod, cluster, namespace)</span><br><span class="line">            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel&#123;workload!~&quot;.*server.*&quot;&#125;</span><br><span class="line">        # TEMP until byteyard support cnch:profile_events:labelled_query_vw_workers</span><br><span class="line">        # TODO remove this</span><br><span class="line">        - record: cnch:profile_event:queries_vw_only:total_rate5m</span><br><span class="line">          expr: |-</span><br><span class="line">            cnch:profile_events:labelled_query_vw_workers:total_rate5m</span><br><span class="line"></span><br><span class="line">        - record: cnch:tso:requests:total_rate5m</span><br><span class="line">          expr: |-</span><br><span class="line">            sum(rate(cnch_profile_events_tso_request_total[5m])) by (pod, cluster, namespace)</span><br><span class="line">            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel</span><br><span class="line"></span><br><span class="line">        # Err/s default to 0 if a request total exist (e.g. only success request) so it&#x27;s included in availability</span><br><span class="line">        - record: cnch:profile_events:labelled_query_vw:error_rate5m</span><br><span class="line">          expr: |</span><br><span class="line">            ((</span><br><span class="line">              sum(rate(cnch_profile_events_queries_failed_total&#123;failure_type!=&quot;QueriesFailedFromUser&quot;, resource_type=&quot;vw&quot;&#125;[5m])) by (pod, cluster, namespace, query_type, vw, wg)</span><br><span class="line">            )</span><br><span class="line">            or</span><br><span class="line">            (</span><br><span class="line">              0 * group by (pod, cluster, namespace, resource_type, query_type, vw, wg) (cnch:profile_events:labelled_query_vw:total_rate5m)</span><br><span class="line">            ))</span><br><span class="line">            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel&#123;workload=~&quot;.*server.*&quot;&#125;</span><br><span class="line">        - record: cnch:tso:requests:error_rate5m</span><br><span class="line">          expr: |</span><br><span class="line">            ((</span><br><span class="line">              sum(rate(cnch_profile_events_tso_error_total[5m])) by (pod, cluster, namespace)</span><br><span class="line">            )</span><br><span class="line">            or</span><br><span class="line">            (</span><br><span class="line">              0 * group by (pod, cluster, namespace) (cnch:tso:requests:total_rate5m)</span><br><span class="line">            ))</span><br><span class="line">            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel</span><br><span class="line"></span><br><span class="line">        # Use WG level precision</span><br><span class="line">        - record: cnch:profile_events:labelled_query_vw:error_burnrate5m</span><br><span class="line">          expr: |</span><br><span class="line">            sum(cnch:profile_events:labelled_query_vw:error_rate5m) by (workload, cluster, namespace, vw, wg)</span><br><span class="line">            /</span><br><span class="line">            sum(cnch:profile_events:labelled_query_vw:total_rate5m) by (workload, cluster, namespace, vw, wg)</span><br><span class="line"></span><br><span class="line">        - record: cnch:tso:requests:error_burnrate5m</span><br><span class="line">          expr: |</span><br><span class="line">            sum(cnch:tso:requests:error_rate5m) by (workload, cluster, namespace)</span><br><span class="line">                /</span><br><span class="line">            sum(cnch:tso:requests:total_rate5m) by (workload, cluster, namespace)</span><br><span class="line"></span><br><span class="line">        # Record server POV, for vw only, the unlimited are only used for few dashboard and 1 alert rule</span><br><span class="line">        # Worker POV is used in workers dashboard only</span><br><span class="line">        - record: cnch:profile_events:labelled_query_vw:total_rate30m</span><br><span class="line">          expr: |-</span><br><span class="line">            sum(rate(cnch_profile_events_labelled_query_total&#123;resource_type=&quot;vw&quot;&#125;[30m])) by (pod, cluster, namespace, query_type, vw, wg)</span><br><span class="line">            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel&#123;workload=~&quot;.*server.*&quot;&#125;</span><br><span class="line"></span><br><span class="line">        # Record workers POV, used by Byteyard autosuspend (server pov might not have direct insert) and workers graph</span><br><span class="line">        - record: cnch:profile_events:labelled_query_vw_workers:total_rate30m</span><br><span class="line">          expr: |-</span><br><span class="line">            sum(rate(cnch_profile_events_labelled_query_total&#123;resource_type=&quot;vw&quot;&#125;[30m])) by (pod, cluster, namespace)</span><br><span class="line">            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel&#123;workload!~&quot;.*server.*&quot;&#125;</span><br><span class="line">        # TEMP until byteyard support cnch:profile_events:labelled_query_vw_workers</span><br><span class="line">        # TODO remove this</span><br><span class="line">        - record: cnch:profile_event:queries_vw_only:total_rate30m</span><br><span class="line">          expr: |-</span><br><span class="line">            cnch:profile_events:labelled_query_vw_workers:total_rate30m</span><br><span class="line"></span><br><span class="line">        - record: cnch:tso:requests:total_rate30m</span><br><span class="line">          expr: |-</span><br><span class="line">            sum(rate(cnch_profile_events_tso_request_total[30m])) by (pod, cluster, namespace)</span><br><span class="line">            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel</span><br><span class="line"></span><br><span class="line">        # Err/s default to 0 if a request total exist (e.g. only success request) so it&#x27;s included in availability</span><br><span class="line">        - record: cnch:profile_events:labelled_query_vw:error_rate30m</span><br><span class="line">          expr: |</span><br><span class="line">            ((</span><br><span class="line">              sum(rate(cnch_profile_events_queries_failed_total&#123;failure_type!=&quot;QueriesFailedFromUser&quot;, resource_type=&quot;vw&quot;&#125;[30m])) by (pod, cluster, namespace, query_type, vw, wg)</span><br><span class="line">            )</span><br><span class="line">            or</span><br><span class="line">            (</span><br><span class="line">              0 * group by (pod, cluster, namespace, resource_type, query_type, vw, wg) (cnch:profile_events:labelled_query_vw:total_rate30m)</span><br><span class="line">            ))</span><br><span class="line">            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel&#123;workload=~&quot;.*server.*&quot;&#125;</span><br><span class="line">        - record: cnch:tso:requests:error_rate30m</span><br><span class="line">          expr: |</span><br><span class="line">            ((</span><br><span class="line">              sum(rate(cnch_profile_events_tso_error_total[30m])) by (pod, cluster, namespace)</span><br><span class="line">            )</span><br><span class="line">            or</span><br><span class="line">            (</span><br><span class="line">              0 * group by (pod, cluster, namespace) (cnch:tso:requests:total_rate30m)</span><br><span class="line">            ))</span><br><span class="line">            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel</span><br><span class="line"></span><br><span class="line">        # Use WG level precision</span><br><span class="line">        - record: cnch:profile_events:labelled_query_vw:error_burnrate30m</span><br><span class="line">          expr: |</span><br><span class="line">            sum(cnch:profile_events:labelled_query_vw:error_rate30m) by (workload, cluster, namespace, vw, wg)</span><br><span class="line">            /</span><br><span class="line">            sum(cnch:profile_events:labelled_query_vw:total_rate30m) by (workload, cluster, namespace, vw, wg)</span><br><span class="line"></span><br><span class="line">        - record: cnch:tso:requests:error_burnrate30m</span><br><span class="line">          expr: |</span><br><span class="line">            sum(cnch:tso:requests:error_rate30m) by (workload, cluster, namespace)</span><br><span class="line">                /</span><br><span class="line">            sum(cnch:tso:requests:total_rate30m) by (workload, cluster, namespace)</span><br><span class="line"></span><br><span class="line">        # Record server POV, for vw only, the unlimited are only used for few dashboard and 1 alert rule</span><br><span class="line">        # Worker POV is used in workers dashboard only</span><br><span class="line">        - record: cnch:profile_events:labelled_query_vw:total_rate1h</span><br><span class="line">          expr: |-</span><br><span class="line">            sum(rate(cnch_profile_events_labelled_query_total&#123;resource_type=&quot;vw&quot;&#125;[1h])) by (pod, cluster, namespace, query_type, vw, wg)</span><br><span class="line">            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel&#123;workload=~&quot;.*server.*&quot;&#125;</span><br><span class="line"></span><br><span class="line">        # Record workers POV, used by Byteyard autosuspend (server pov might not have direct insert) and workers graph</span><br><span class="line">        - record: cnch:profile_events:labelled_query_vw_workers:total_rate1h</span><br><span class="line">          expr: |-</span><br><span class="line">            sum(rate(cnch_profile_events_labelled_query_total&#123;resource_type=&quot;vw&quot;&#125;[1h])) by (pod, cluster, namespace)</span><br><span class="line">            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel&#123;workload!~&quot;.*server.*&quot;&#125;</span><br><span class="line">        # TEMP until byteyard support cnch:profile_events:labelled_query_vw_workers</span><br><span class="line">        # TODO remove this</span><br><span class="line">        - record: cnch:profile_event:queries_vw_only:total_rate1h</span><br><span class="line">          expr: |-</span><br><span class="line">            cnch:profile_events:labelled_query_vw_workers:total_rate1h</span><br><span class="line"></span><br><span class="line">        - record: cnch:tso:requests:total_rate1h</span><br><span class="line">          expr: |-</span><br><span class="line">            sum(rate(cnch_profile_events_tso_request_total[1h])) by (pod, cluster, namespace)</span><br><span class="line">            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel</span><br><span class="line"></span><br><span class="line">        # Err/s default to 0 if a request total exist (e.g. only success request) so it&#x27;s included in availability</span><br><span class="line">        - record: cnch:profile_events:labelled_query_vw:error_rate1h</span><br><span class="line">          expr: |</span><br><span class="line">            ((</span><br><span class="line">              sum(rate(cnch_profile_events_queries_failed_total&#123;failure_type!=&quot;QueriesFailedFromUser&quot;, resource_type=&quot;vw&quot;&#125;[1h])) by (pod, cluster, namespace, query_type, vw, wg)</span><br><span class="line">            )</span><br><span class="line">            or</span><br><span class="line">            (</span><br><span class="line">              0 * group by (pod, cluster, namespace, resource_type, query_type, vw, wg) (cnch:profile_events:labelled_query_vw:total_rate1h)</span><br><span class="line">            ))</span><br><span class="line">            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel&#123;workload=~&quot;.*server.*&quot;&#125;</span><br><span class="line">        - record: cnch:tso:requests:error_rate1h</span><br><span class="line">          expr: |</span><br><span class="line">            ((</span><br><span class="line">              sum(rate(cnch_profile_events_tso_error_total[1h])) by (pod, cluster, namespace)</span><br><span class="line">            )</span><br><span class="line">            or</span><br><span class="line">            (</span><br><span class="line">              0 * group by (pod, cluster, namespace) (cnch:tso:requests:total_rate1h)</span><br><span class="line">            ))</span><br><span class="line">            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel</span><br><span class="line"></span><br><span class="line">        # Use WG level precision</span><br><span class="line">        - record: cnch:profile_events:labelled_query_vw:error_burnrate1h</span><br><span class="line">          expr: |</span><br><span class="line">            sum(cnch:profile_events:labelled_query_vw:error_rate1h) by (workload, cluster, namespace, vw, wg)</span><br><span class="line">            /</span><br><span class="line">            sum(cnch:profile_events:labelled_query_vw:total_rate1h) by (workload, cluster, namespace, vw, wg)</span><br><span class="line"></span><br><span class="line">        - record: cnch:tso:requests:error_burnrate1h</span><br><span class="line">          expr: |</span><br><span class="line">            sum(cnch:tso:requests:error_rate1h) by (workload, cluster, namespace)</span><br><span class="line">                /</span><br><span class="line">            sum(cnch:tso:requests:total_rate1h) by (workload, cluster, namespace)</span><br><span class="line"></span><br><span class="line">        # Record server POV, for vw only, the unlimited are only used for few dashboard and 1 alert rule</span><br><span class="line">        # Worker POV is used in workers dashboard only</span><br><span class="line">        - record: cnch:profile_events:labelled_query_vw:total_rate6h</span><br><span class="line">          expr: |-</span><br><span class="line">            sum(rate(cnch_profile_events_labelled_query_total&#123;resource_type=&quot;vw&quot;&#125;[6h])) by (pod, cluster, namespace, query_type, vw, wg)</span><br><span class="line">            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel&#123;workload=~&quot;.*server.*&quot;&#125;</span><br><span class="line"></span><br><span class="line">        # Record workers POV, used by Byteyard autosuspend (server pov might not have direct insert) and workers graph</span><br><span class="line">        - record: cnch:profile_events:labelled_query_vw_workers:total_rate6h</span><br><span class="line">          expr: |-</span><br><span class="line">            sum(rate(cnch_profile_events_labelled_query_total&#123;resource_type=&quot;vw&quot;&#125;[6h])) by (pod, cluster, namespace)</span><br><span class="line">            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel&#123;workload!~&quot;.*server.*&quot;&#125;</span><br><span class="line">        # TEMP until byteyard support cnch:profile_events:labelled_query_vw_workers</span><br><span class="line">        # TODO remove this</span><br><span class="line">        - record: cnch:profile_event:queries_vw_only:total_rate6h</span><br><span class="line">          expr: |-</span><br><span class="line">            cnch:profile_events:labelled_query_vw_workers:total_rate6h</span><br><span class="line"></span><br><span class="line">        - record: cnch:tso:requests:total_rate6h</span><br><span class="line">          expr: |-</span><br><span class="line">            sum(rate(cnch_profile_events_tso_request_total[6h])) by (pod, cluster, namespace)</span><br><span class="line">            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel</span><br><span class="line"></span><br><span class="line">        # Err/s default to 0 if a request total exist (e.g. only success request) so it&#x27;s included in availability</span><br><span class="line">        - record: cnch:profile_events:labelled_query_vw:error_rate6h</span><br><span class="line">          expr: |</span><br><span class="line">            ((</span><br><span class="line">              sum(rate(cnch_profile_events_queries_failed_total&#123;failure_type!=&quot;QueriesFailedFromUser&quot;, resource_type=&quot;vw&quot;&#125;[6h])) by (pod, cluster, namespace, query_type, vw, wg)</span><br><span class="line">            )</span><br><span class="line">            or</span><br><span class="line">            (</span><br><span class="line">              0 * group by (pod, cluster, namespace, resource_type, query_type, vw, wg) (cnch:profile_events:labelled_query_vw:total_rate6h)</span><br><span class="line">            ))</span><br><span class="line">            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel&#123;workload=~&quot;.*server.*&quot;&#125;</span><br><span class="line">        - record: cnch:tso:requests:error_rate6h</span><br><span class="line">          expr: |</span><br><span class="line">            ((</span><br><span class="line">              sum(rate(cnch_profile_events_tso_error_total[6h])) by (pod, cluster, namespace)</span><br><span class="line">            )</span><br><span class="line">            or</span><br><span class="line">            (</span><br><span class="line">              0 * group by (pod, cluster, namespace) (cnch:tso:requests:total_rate6h)</span><br><span class="line">            ))</span><br><span class="line">            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel</span><br><span class="line"></span><br><span class="line">        # Use WG level precision</span><br><span class="line">        - record: cnch:profile_events:labelled_query_vw:error_burnrate6h</span><br><span class="line">          expr: |</span><br><span class="line">            sum(cnch:profile_events:labelled_query_vw:error_rate6h) by (workload, cluster, namespace, vw, wg)</span><br><span class="line">            /</span><br><span class="line">            sum(cnch:profile_events:labelled_query_vw:total_rate6h) by (workload, cluster, namespace, vw, wg)</span><br><span class="line"></span><br><span class="line">        - record: cnch:tso:requests:error_burnrate6h</span><br><span class="line">          expr: |</span><br><span class="line">            sum(cnch:tso:requests:error_rate6h) by (workload, cluster, namespace)</span><br><span class="line">                /</span><br><span class="line">            sum(cnch:tso:requests:total_rate6h) by (workload, cluster, namespace)</span><br><span class="line"></span><br><span class="line">        # Record server POV, for vw only, the unlimited are only used for few dashboard and 1 alert rule</span><br><span class="line">        # Worker POV is used in workers dashboard only</span><br><span class="line">        - record: cnch:profile_events:labelled_query_vw:total_rate3d</span><br><span class="line">          expr: |-</span><br><span class="line">            sum(rate(cnch_profile_events_labelled_query_total&#123;resource_type=&quot;vw&quot;&#125;[3d])) by (pod, cluster, namespace, query_type, vw, wg)</span><br><span class="line">            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel&#123;workload=~&quot;.*server.*&quot;&#125;</span><br><span class="line"></span><br><span class="line">        # Record workers POV, used by Byteyard autosuspend (server pov might not have direct insert) and workers graph</span><br><span class="line">        - record: cnch:profile_events:labelled_query_vw_workers:total_rate3d</span><br><span class="line">          expr: |-</span><br><span class="line">            sum(rate(cnch_profile_events_labelled_query_total&#123;resource_type=&quot;vw&quot;&#125;[3d])) by (pod, cluster, namespace)</span><br><span class="line">            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel&#123;workload!~&quot;.*server.*&quot;&#125;</span><br><span class="line">        # TEMP until byteyard support cnch:profile_events:labelled_query_vw_workers</span><br><span class="line">        # TODO remove this</span><br><span class="line">        - record: cnch:profile_event:queries_vw_only:total_rate3d</span><br><span class="line">          expr: |-</span><br><span class="line">            cnch:profile_events:labelled_query_vw_workers:total_rate3d</span><br><span class="line"></span><br><span class="line">        - record: cnch:tso:requests:total_rate3d</span><br><span class="line">          expr: |-</span><br><span class="line">            sum(rate(cnch_profile_events_tso_request_total[3d])) by (pod, cluster, namespace)</span><br><span class="line">            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel</span><br><span class="line"></span><br><span class="line">        # Err/s default to 0 if a request total exist (e.g. only success request) so it&#x27;s included in availability</span><br><span class="line">        - record: cnch:profile_events:labelled_query_vw:error_rate3d</span><br><span class="line">          expr: |</span><br><span class="line">            ((</span><br><span class="line">              sum(rate(cnch_profile_events_queries_failed_total&#123;failure_type!=&quot;QueriesFailedFromUser&quot;, resource_type=&quot;vw&quot;&#125;[3d])) by (pod, cluster, namespace, query_type, vw, wg)</span><br><span class="line">            )</span><br><span class="line">            or</span><br><span class="line">            (</span><br><span class="line">              0 * group by (pod, cluster, namespace, resource_type, query_type, vw, wg) (cnch:profile_events:labelled_query_vw:total_rate3d)</span><br><span class="line">            ))</span><br><span class="line">            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel&#123;workload=~&quot;.*server.*&quot;&#125;</span><br><span class="line">        - record: cnch:tso:requests:error_rate3d</span><br><span class="line">          expr: |</span><br><span class="line">            ((</span><br><span class="line">              sum(rate(cnch_profile_events_tso_error_total[3d])) by (pod, cluster, namespace)</span><br><span class="line">            )</span><br><span class="line">            or</span><br><span class="line">            (</span><br><span class="line">              0 * group by (pod, cluster, namespace) (cnch:tso:requests:total_rate3d)</span><br><span class="line">            ))</span><br><span class="line">            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel</span><br><span class="line"></span><br><span class="line">        # Use WG level precision</span><br><span class="line">        - record: cnch:profile_events:labelled_query_vw:error_burnrate3d</span><br><span class="line">          expr: |</span><br><span class="line">            sum(cnch:profile_events:labelled_query_vw:error_rate3d) by (workload, cluster, namespace, vw, wg)</span><br><span class="line">            /</span><br><span class="line">            sum(cnch:profile_events:labelled_query_vw:total_rate3d) by (workload, cluster, namespace, vw, wg)</span><br><span class="line"></span><br><span class="line">        - record: cnch:tso:requests:error_burnrate3d</span><br><span class="line">          expr: |</span><br><span class="line">            sum(cnch:tso:requests:error_rate3d) by (workload, cluster, namespace)</span><br><span class="line">                /</span><br><span class="line">            sum(cnch:tso:requests:total_rate3d) by (workload, cluster, namespace)</span><br><span class="line"></span><br><span class="line">        # Use VW level precision only 5m timeframe used for dashboard only (trend avg_1d)</span><br><span class="line">        - record: cnch:profile_events:labelled_query_vw_sum:error_burnrate5m</span><br><span class="line">          expr: |</span><br><span class="line">            sum(cnch:profile_events:labelled_query_vw:error_rate5m) by (cluster, namespace, vw)</span><br><span class="line">            /</span><br><span class="line">            sum(cnch:profile_events:labelled_query_vw:total_rate5m) by (cluster, namespace, vw)</span><br><span class="line"></span><br><span class="line">        # Only used for few dashboard and 1 error alert rule, no need burn rate worker+ server POV</span><br><span class="line">        - record: cnch:profile_events:labelled_query_unlimited:total_rate5m</span><br><span class="line">          expr: |-</span><br><span class="line">            sum(rate(cnch_profile_events_labelled_query_total&#123;resource_type=&quot;unlimited&quot;&#125;[5m])) by (pod, cluster, namespace, query_type)</span><br><span class="line">            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel</span><br><span class="line"></span><br><span class="line">        - record: cnch:profile_events:labelled_query_unlimited:error_rate5m</span><br><span class="line">          expr: |-</span><br><span class="line">            sum(rate(cnch_profile_events_queries_failed_total&#123;failure_type!=&quot;QueriesFailedFromUser&quot;, resource_type=&quot;unlimited&quot;&#125;[5m])) by (pod, cluster, namespace, query_type, vw, wg)</span><br><span class="line">            * on (pod, namespace) group_left(workload) namespace_workload_pod:kube_pod_owner:relabel</span><br><span class="line"></span><br><span class="line">    - name: CnchMetricsAvailability</span><br><span class="line">      rules:</span><br><span class="line">        - record: cnch:wg:availability</span><br><span class="line">          labels:</span><br><span class="line">            slo: error_rate</span><br><span class="line">          # 1 = available, 0 = unavailable</span><br><span class="line">          # min() check if any of the burn rate is firing (1, 1, 0) -&gt; 0</span><br><span class="line">          # For any burn rate, both time window must be triggered (Multiwindow) so we use max() (1, 0) -&gt; 1 avail</span><br><span class="line">          # TODO maybe change this with a ALERTS&#123;alertstate=&quot;firing&quot;,severity=&quot;critical&quot;, alertname=~&quot;.*BudgetBurn&quot;&#125;</span><br><span class="line">          # As we can&#x27;t have the &#x27;for 15m&#x27; here see: https://github.com/metalmatze/slo-libsonnet/issues/52</span><br><span class="line">          expr: |</span><br><span class="line">            min by (cluster, namespace, vw, wg) (</span><br><span class="line">              max by (cluster, namespace, vw, wg) (</span><br><span class="line">                cnch:profile_events:labelled_query_vw:error_burnrate5m&#123;vw=~&quot;.*&quot;&#125; &lt;= bool (14.40 * (1 - 0.99)),</span><br><span class="line">                cnch:profile_events:labelled_query_vw:error_burnrate1h&#123;vw=~&quot;.*&quot;&#125; &lt;= bool (14.40 * (1 - 0.99))</span><br><span class="line">              ),</span><br><span class="line">              max by (cluster, namespace, vw, wg) (</span><br><span class="line">                cnch:profile_events:labelled_query_vw:error_burnrate30m&#123;vw=~&quot;.*&quot;&#125; &lt;= bool (6.00 * (1 - 0.99)),</span><br><span class="line">                cnch:profile_events:labelled_query_vw:error_burnrate6h&#123;vw=~&quot;.*&quot;&#125; &lt;= bool (6.00 * (1 - 0.99))</span><br><span class="line">              ),</span><br><span class="line">              max by (cluster, namespace, vw, wg) (</span><br><span class="line">                cnch:profile_events:labelled_query_vw:error_burnrate6h&#123;vw=~&quot;.*&quot;&#125; &lt;= bool (1.00 * (1 - 0.99)),</span><br><span class="line">                cnch:profile_events:labelled_query_vw:error_burnrate3d&#123;vw=~&quot;.*&quot;&#125; &lt;= bool (1.00 * (1 - 0.99))</span><br><span class="line">              )</span><br><span class="line">            )</span><br><span class="line">        - record: cnch:cluster:availability</span><br><span class="line">          expr: |</span><br><span class="line">            1 - (sum by (cluster, namespace) (cnch:profile_events:labelled_query_vw:error_rate5m)</span><br><span class="line">            /</span><br><span class="line">            sum by (cluster, namespace) (cnch:profile_events:labelled_query_vw:total_rate5m))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可 kubectl 执行配置生效：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubctl apply -f cnch-metrics.yaml # 配置对应rule</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="监控服务节点（Server）"><a href="#监控服务节点（Server）" class="headerlink" title="监控服务节点（Server）"></a>监控服务节点（Server）</h2><h3 id="重要指标"><a href="#重要指标" class="headerlink" title="重要指标"></a>重要指标</h3><p>下面摘录比较重要的指标，进行说明</p><p>指标名（其中带双引号的是经过 VM 聚合的）</p><p>说明</p><p>cnch:latency:queries_cluster:pct95</p><p>cnch:latency:queries_cluster:pct99</p><p>查询延迟 pct99 和 pct55</p><p>cnch:latency:queries_cluster:slow_ratio</p><p>大于 10s 的慢查询占比</p><p>cnch:profile_events:labelled_query_vw:total_rate5m</p><p>所有 VW 的总 QPS。</p><p>cnch:profile_events:labelled_query_vw:error_rate5m</p><p>所有 VW 失败的 QPS。</p><p>cnch_current_metrics_query</p><p>其中的 label 名 query_type 值为 insert 是写入的 query</p><h3 id="给服务节点（Server）-配置-Grafana-看板"><a href="#给服务节点（Server）-配置-Grafana-看板" class="headerlink" title="给服务节点（Server） 配置 Grafana 看板"></a>给服务节点（Server） 配置 Grafana 看板</h3><p>看板的内容看截图</p><p><img src="/static/boxcnvwueXWFISCRgsRJ66J2vKb.jpeg"></p><p>摘录其中比较重要的看板进行说明：</p><p>看板名</p><p>说明</p><p>Queries Ducations</p><p>cnch:latency:queries_cluster:pct95{namespace&#x3D;”$namespace”, cluster&#x3D;”$cluster”}</p><p>cnch:latency:queries_cluster:pct99{namespace&#x3D;”$namespace”, cluster&#x3D;”$cluster”}</p><p>查询延迟的 P99 和 P95 值。</p><p>Slow Queries &gt; 10s</p><p>cnch:latency:queries_cluster:slow_ratio{namespace&#x3D;”$namespace”, cluster&#x3D;”$cluster”}</p><p>大于 10s 的慢查询占比</p><p>Queries Per Second</p><p>sum(cnch:profile_events:labelled_query_vw:total_rate5m{namespace&#x3D;”$namespace”, cluster&#x3D;”$cluster”, workload&#x3D;~”$workload”})</p><p>所有 VW 的总 QPS。</p><p>VW Queries Success</p><p>1 - (sum by (pod) (cnch:profile_events:labelled_query_vw:error_rate5m{cluster&#x3D;”$cluster”, namespace&#x3D;”$namespace”, workload&#x3D;<del>“$workload”, pod&#x3D;</del>“$pod”})</p><p>sum by (pod) (cnch:profile_events:labelled_query_vw:total_rate5m{cluster&#x3D;”$cluster”, namespace&#x3D;”$namespace”, workload&#x3D;<del>“$workload”, pod&#x3D;</del>“$pod”}))</p><p>使用 error_rate5m 和 total_rate5m 相减和除后，得到成功率</p><p>Server 的完整 Grafana 配置文件如下，可在 Grafana 的 UI 导入：<a href="/static/cnch-server.json">cnch-server.json</a></p><h2 id="监控-TSO"><a href="#监控-TSO" class="headerlink" title="监控 TSO"></a>监控 TSO</h2><h3 id="重要指标-1"><a href="#重要指标-1" class="headerlink" title="重要指标"></a>重要指标</h3><p>下面摘录对 TSO 比较重要的指标，进行说明：</p><p>指标名</p><p>说明</p><p>cnch:tso:requests:error_rate5m</p><p>TSO 组件的失败 QPS</p><p>cnch:tso:requests:total_rate5m</p><p>TSO 组件的总 QPS</p><h3 id="给-TSO-配置-Grafana-看板"><a href="#给-TSO-配置-Grafana-看板" class="headerlink" title="给 TSO 配置 Grafana 看板"></a>给 TSO 配置 Grafana 看板</h3><p>看板截图如下：</p><p><img src="/static/boxcn3CLoRUlpCEDJnEy8f6dxPe.jpeg"></p><p>其中重要的指标说明：</p><p>看板名</p><p>说明</p><p>TSO Server Requests Per Sec</p><p>cnch:tso:requests:total_rate5m{namespace&#x3D;”$namespace”, cluster&#x3D;”$cluster”, workload&#x3D;~”.<em>server.</em>“}</p><p>Server 组件对 TSO 查询的的 QPS</p><p>TSO Worker Requests Per Sec</p><p>cnch:tso:requests:total_rate5m{namespace&#x3D;”$namespace”, cluster&#x3D;”$cluster”, workload!~”.<em>(server|<strong>kafka</strong>).</em>“}</p><p>去除 server 和 kafka，只看各 worker 对 TSO 的请求 QPS</p><p>TSO Servers Requests Server Rate</p><p>cnch:tso:requests:error_rate5m{namespace&#x3D;”$namespace”, cluster&#x3D;”$cluster”, workload&#x3D;~”.<em>server.</em>“}</p><p>cnch:tso:requests:total_rate5m{namespace&#x3D;”$namespace”, cluster&#x3D;”$cluster”, workload&#x3D;~”.<em>server.</em>“}</p><p>用 error_rate 和 total_rate 相除，过滤出 TSO 查询的失败率</p><p>TSO 完整的配置文件如下：<a href="/static/cnch-tso.json">cnch-tso.json</a></p><h2 id="其他可以监控的信息"><a href="#其他可以监控的信息" class="headerlink" title="其他可以监控的信息"></a>其他可以监控的信息</h2><p>其他常用的监控看板配置此处列出，不再一一截图</p><p>Cluster Overview: 整个集群概览 <a href="/static/cnch-cluster.json">cnch-cluster.json</a></p><p>VW: 各计算组 Virtual Warehouse 的详情 <a href="/static/cnch-vw.json">cnch-vw.json</a></p><p>DaemonManager: 管理 Merge 等后台任务的组件 <a href="/static/cnch-daemonmanager.json">cnch-daemonmanager.json</a></p>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> Getting_Started </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>管理后台任务</title>
      <link href="/zh-cn/docs/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1/"/>
      <url>/zh-cn/docs/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="管理后台任务"><a href="#管理后台任务" class="headerlink" title="管理后台任务"></a>管理后台任务</h1><p>文档类型：教程型</p><p>文档结构：教程目的，前置准备，分步骤讲解原理 &amp; 示例，相关文档推荐；</p><p>内容提要：</p><ol><li>常见的后台任务有哪些，分别是什么作用</li><li>如何手工启动和终止后台任务</li><li>常见报错应该如何处理</li></ol><p>ByConity 复用了<a href="https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/mergetree/">社区 ClickHouse MergeTree</a> 的经典设计，意味着在数据写入时以 Part 粒度进行存储，并保证每个 Part 内部的数据有序性，执行查询时并行处理多个 Part。后台 Merge 线程将多个 Part 不断合并成更大的 Part，不仅能减少 Part 数量，也能实现更大范围的数据有序性，是持续提升查询性能的关键操作。</p><h2 id="常用后台任务"><a href="#常用后台任务" class="headerlink" title="常用后台任务"></a>常用后台任务</h2><p><strong>MergeMutate 后台任务：</strong>由于 ByConity 是存储计算分离架构，Part 不再属于某个固定的节点，每个 Part 可以被任意的计算节点处理，因此每个计算节点并不像社区 ClickHouse 一样运行专门的 Merge 和 Mutate 线程。取而代之地，我们在 Server 组件上为每个表创建一个 Merge 和 Mutate 后台任务，由该任务来统一管理和调度对应表的所有 Merge 和 Mutate 任务。</p><p><strong>GC****后台任务：</strong>把多个 Part 合并成一个新的 Part，意味着原有的 Part 将不再被使用，及时删除这些被淘汰的 Part 有助于节省存储空间。为此我们为每个表运行一个专门的 GC（垃圾回收 Garbage Collection）后台任务，负责该表的过期 Part 的发现和删除。</p><p><strong>CONSUMER 后台任务：</strong>基于 ByConity 的云原生新架构，在实时导入消费（aka CnchKafka）上做了新的设计与实现：</p><ul><li>基于每张 Kafka 消费表在 server 段常驻执行一个 CONSUMER 后台任务（ConsumeManager）；</li><li>CONSUMER 后台任务负责读取 Kafka 元信息，并将 partition 分配给各个 consumer task，然后将 task 任务分发到 worker 节点执行；</li><li>同时，CONSUMER 任务需要维持与 task 的心跳，保证每个 consumer task 处于正常的工作状态。</li></ul><p>在设计上，Merge 和 GC 是两个独立的过程。我们在一个 Merge 任务完成之后，不会立即将旧 Part 删除，而是对应的为每个旧 Part 生成一个淘汰标记，等待后续 GC 任务统一处理。这样的设计能：</p><ul><li>保持 Part 生命周期的一致性，查询执行过程不会出现“正在使用一个被删除的 Part”的不一致行为。</li><li>避免大量零碎的元数据和存储访问操作。Merge 完成时立即删除旧 Part 意味着大量零碎的 IO 操作，使得操作变得低效，也容易影响其他流程的正常执行。</li><li>更简单的实现。无需过多考虑 Merge 任务状态和 Part 状态间的一致性。</li></ul><p><img src="/static/boxcnyNZuYWKFyUqFHQ8wAYsIOy.png"></p><p>图 X-1</p><h2 id="MergeMutate-后台任务"><a href="#MergeMutate-后台任务" class="headerlink" title="MergeMutate 后台任务"></a>MergeMutate 后台任务</h2><p>MergeMutate 后台任务主要负责：选择合适的 Part 生成对应的 **Merge 任务(Merge Task)**、选择合适的 part 生成 **Mutate 任务(Mutate Task)**，并将生成的 Task 下发给合适的 Worker 执行以及最终提交和更新 Part 状态。</p><p>Merge 和 Mutate 实际上是两种不同的任务。</p><p>Merge 任务是选择一些较小 parts 合成一个比较大的 part，以减少查询时访问的文件数量，从而降低查询所需要的时间。</p><p>Mutate 任务则是对 part 中的某些列执行变更(Modify column, Drop column 等)。Mutate 任务由 Alter query 生成的，对于一个 Alter query，我们可以将其拆分成两部分，一是修改表的 schema 操作，二是如果需要对数据做变更，则会生成一个 Mutate Task 由后台任务执行数据修改操作。</p><h3 id="Merge-任务-Part-的选择"><a href="#Merge-任务-Part-的选择" class="headerlink" title="Merge 任务 Part 的选择"></a>Merge 任务 Part 的选择</h3><p>ByConity 从设计之初就要求能用一套系统同时处理不同场景和不同规模的业务：实时表和离线表共存、超大规模表和小表共存、宽表和窄表共存等、复杂字段和简单字段共存。这样复杂的应用场景意味着各个表的 Part 在大小、时效性、有序性等各方面都没有统一的规律可循。为此，我们设计并实现了一个自适应的 Part 选择策略。其大致流程如下：</p><ul><li>为每个分区（Partition）维护其最新的数据写入时间、Part 的总数量和总大小。</li><li>首先从所有分区中选择一批分区，用户可以为每个表指定自己倾向的策略：按写入时间排序；按 Part 数量排序或轮训。</li><li>对选出的每个分区，扫描其所有 Part，按照 Part 的行数、大小、写入时间等信息，计算相互合并的收益大小，并最终按收益顺序选出多组 Part。</li><li>最后，对于每个被选择的分区，如果最后没有从该分区选出收益高的 Merge 任务，则在后续一段时间内将不再选择该分区，以实现自适应的调整。</li></ul><p><img src="/static/boxcnnvwD2ZKklNKkrVatqtnjUb.png"></p><p>图 X-2</p><p>如图，在选择 Partition 阶段，我们选择了 Partition 1 （Part 数量最多）和 Partition 2（最新数据写入）。然后从这两个 Partition 中计算 Part 间合并收益，最终选出三组 Part：p11<del>p12、p13</del>p16 以及 p23~p24。</p><p>（TODO: 补充一个 partition 没选出结果的例子？）</p><h3 id="任务调度管理"><a href="#任务调度管理" class="headerlink" title="任务调度管理"></a>任务调度管理</h3><p>对于上述选出的每组 Part，我们将预估其任务开销，如所需磁盘大小、占用内存大小等信息。然后通过<u>Resource Manager</u>（注：link to RM） 为此任务选择最合适的 Worker，并下发执行。</p><p>Worker 执行任务时，通过存储层所提供的接口，获取所需 Part。Worker 上 Part 的合并流程和社区 ClickHouse 原理类似。</p><p>Merge 任务执行完成后，Worker 向 Server 返回成功执行的标志。此后，Server 即可对新生成的 Part 进行提交，并对被合并的源 Part 进行标记，等待后续 GC 后台任务处理。</p><h3 id="心跳机制"><a href="#心跳机制" class="headerlink" title="心跳机制"></a>心跳机制</h3><p>由于 MergeMutate 任务执行时间可能会比较久，所以我们需要通过心跳机制去检测 Worker 上的任务是否已经失败或者 Worker 是否已经宕机，以及时移除 Server 上已经失败的任务。同时 Worker 端也会在执行任务时通过上一次同步心跳的时间来判断 Server 是否已经宕机，从而提前结束任务避免浪费资源。</p><h2 id="GC-后台任务"><a href="#GC-后台任务" class="headerlink" title="GC 后台任务"></a>GC 后台任务</h2><h3 id="Part-可见性判断"><a href="#Part-可见性判断" class="headerlink" title="Part 可见性判断"></a>Part 可见性判断</h3><p>区别于社区的 Part 可见性判断，ByConity 为了更好的实现 MVCC(Multi-Version Concurrency Control)特性，对 part 的可见性判断做了一些调整。</p><p>首先简单介绍写 part 的命名结构，part 命名如下图：</p><p><img src="/static/boxcn35mmn27RkI7PnEdYgJML3g.png"></p><ol><li>社区版本 Part 可见性判断，以 Merge 任务为例</li></ol><p><img src="/static/boxcn9MQ9pAUXo2fFk9xURxVGrh.png"></p><ol><li>ByConityPart 可见性判断 (TODO)</li></ol><h3 id="GC-Task"><a href="#GC-Task" class="headerlink" title="GC Task"></a>GC Task</h3><p>理解<u>Merge</u>的作用和流程以及 Part 可见性规则之后，就能更好的理解 GC 工作机制。</p><p>如图 X-1，每个表的 GC 后台任务独立运行，它主要负责发现和删除 Merge 任务产生的淘汰 Part。</p><p>Server 对一个被淘汰的 Part 进行标记时，并不改变该 Part 的任何状态，而是生成一个新的与之对应的标记 Part，标记 Part 不占用实际的存储空间。这样做能保证所有 Part 在整个生命周期的<strong>不变性（immutability）。</strong></p><p>基于图 X-2，在 Merge 完成将变成如下图 X-3 的状态：</p><p><img src="/static/boxcnuwPQMcD1U9cypYG0DdP1th.png"></p><p>GC 后台任务运行时，和 Merge 后台任务类似，</p><ul><li>会按照 Part 总数量和总大小顺序选择一批 Partition。</li><li>然后扫描 Partition 内所有 Part，对被标记覆盖的 Part（即蓝色部分）执行删除操作。</li><li>然后再次扫描 Partition 内所有 Part，对标记 Part（即红色部分）执行删除操作。</li></ul><h2 id="CONSUMER-任务"><a href="#CONSUMER-任务" class="headerlink" title="CONSUMER 任务"></a>CONSUMER 任务</h2><p>ByConity 继承了社区 Kafka 消费的基本设计，并基于云原生新架构设计并实现了全新的消费表引擎 CnchKafka。基本消费原理与社区保持一致，通过一个 &lt;CnchKafka 消费表、Materialized View 物化视图表、存储表 &gt; 三元组实现整个消费链路，其中：</p><ul><li>CnchKafka 消费表：负责订阅 Kafka topic 并消费消息；将得到的消息解析后写为 Block；</li><li>Materialized View 物化视图表：构建从消费表到存储表的数据通路，将 CnchKafka 消费的 Block 写入存储表，并提供简单的过滤功能；</li><li>存储表：支持 Cnch 多种 MergeTree 存储表。</li></ul><p>基本数据通路如下：</p><p><img src="/static/boxcnzUYNuizBq5CUpsp0ZZAzoz.png"></p><p>图中各组件是 ByConity 涉及 CnchKafka 的组件，具体组件说明请参考架构文档。</p><h3 id="KafkaConsumeManager"><a href="#KafkaConsumeManager" class="headerlink" title="KafkaConsumeManager"></a>KafkaConsumeManager</h3><p>每张 CnchKafka 消费表会在 Server 层启动一个 Manager（即 CONSUMER 类型后台任务）负责调度和管理所有的消费者任务。Manager 本身是 Server 端的一个常驻线程，通过 Server 的高可用和 DaemonManager 保证其服务稳定。</p><p>KafkaConsumeManager 主要实现和功能包括：</p><ul><li>根据配置的 consumer 数目将 topic partition 均匀分发到每个 consumer；</li><li>与 Catalog 交互，获取 partition 消费的 offset；</li><li>调度 consumer 到配置的 Virtual Warehouse 节点执行：</li><li>节点选择支持多种策略配置，保证负载均衡；</li><li>定期探活每个 consumer 任务，保证任务执行的稳定性。</li></ul><h3 id="KafkaConsumer"><a href="#KafkaConsumer" class="headerlink" title="KafkaConsumer"></a>KafkaConsumer</h3><p>每个 KafkaConsumer 实现为一个常驻线程在 Virtual Warehouse 节点执行，负责从指定的 topic partition 消费数据，转换为 part 写入 VFS，并将元信息提交回 Server 端写入 Catalog。主要特点：</p><ul><li>继承社区的攒批写入模式（每次消费周期默认 8 秒）；</li><li>每次消费过程通过 Transaction 保证原子性：</li><li>通过与 Server RPC 交互创建事务；</li><li>事务提交会同时提交写入的 part 元信息以及最新消费的 offset。</li></ul><p>单次消费执行流程可参考下图：</p><p><img src="/static/boxcnSgFjCeQGVkbtqB3b1013gf.png"></p><h3 id="Exactly-Once"><a href="#Exactly-Once" class="headerlink" title="Exactly-Once"></a>Exactly-Once</h3><p>与社区实现相比，CnchKafka 实现增强了消费语义，即从社区的 At-Least-Once 语义，升级为 Exactly-Once 语义。这主要得益于新架构 Transaction 事务的保证。</p><p>由于每轮消费都会通过事务管理，且每次提交数据元信息的同时提交对应的 offset。由于事务保证了提交的原子性，那么数据元信息和 offset 要么同时提交成功，要么都提交失败。</p><p>这样就保证了数据和 offset 始终一致，每次消费重启都从上次提交的 offset 位置继续消费，从而实现了 Exactly-Once。</p><h3 id="自动容错实现"><a href="#自动容错实现" class="headerlink" title="自动容错实现"></a>自动容错实现</h3><p>CnchKafka 整体容错策略采取<strong>快速失败</strong>方式，即：</p><ul><li>KafkaConsumeManager 定期探活 consumer 任务，探活失败，立即拉起一个新的 consumer；</li><li>KafkaConsumer 每次执行中，与 Server RPC 的两次交互（创建事务和提交事务）都会向 Manager 校验自身的有效性，如果校验失败（比如 Manager 已经拉起了一个新的 consumer 等），会主动 kill 自己。</li></ul><h3 id="修改消费参数"><a href="#修改消费参数" class="headerlink" title="修改消费参数"></a>修改消费参数</h3><p>支持通过 ALTER 命令快速修改 Setting 参数，主要用于调整消费者数目等提升消费能力。</p><p>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE &lt;cnch_kafka_name&gt; MODIFY SETTING &lt;name1&gt; = &lt;value1&gt;, &lt;name2&gt; = &lt;value2&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该命令执行会自动重启消费任务。</p><h3 id="手动启停消费"><a href="#手动启停消费" class="headerlink" title="手动启停消费"></a>手动启停消费</h3><p>在一些场景中用户可能需要手动停止消费，随后手动恢复；我们提供了对应的 SYSTEM 命令实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SYSTEM START/STOP/RESTART CONSUME &lt;cnch_kafka_name&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：START&#x2F;STOP 命令会将对应状态持久化到 Catalog，因此在执行 STOP 命令后，如果不执行 START，即使服务重启，消费任务也不会恢复。</p><h2 id="控制后台任务"><a href="#控制后台任务" class="headerlink" title="控制后台任务"></a>控制后台任务</h2><p>提供 system 命令控制后台任务的开启与关闭，与社区不同的是，通过 system 命令控制是持久化操作，已经停止的后台任务不会在 server 重启后重新调度。</p><p>提供系统表 system.bg_threads 查看后台任务的状态，包括线程状态，调度次数，调度异常信息等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SYSTEM STOP/START/RESTART CONSUMER db.table;</span><br><span class="line">SYSTEM STOP/START MERGES/GC db.table;</span><br><span class="line">SELECT * FROM system.bg_threads WHERE database = &#x27;db&#x27; AND table = &#x27;table&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="常见报错"><a href="#常见报错" class="headerlink" title="常见报错"></a>常见报错</h2><ol><li>Connection Refused from DaemonManager</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Code: 5038. DB::Exception: Received from 127.0.0.1:9000. DB::Exception: 112:[E111]Fail to connect Socket&#123;id=1155 addr=127.0.0.1:10090&#125; (0x0x7f2f9674f6c0): Connection refused [R1][E112]Not connected to 127.0.0.1:10090 yet, server_id=1155 [R2][E112]Not connected to 127.0.0.1:10090 yet, server_id=1155 [R3][E112]Not connected to 127.0.0.1:10090 yet, server_id=1155.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>具体报错信息如上，其中 10090 为 DaemonManger 的 rpc 端口，则说明 DaemonManager 组件连接失败，需检查 DaemonManager 的状态。</p>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> Getting_Started </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计库表</title>
      <link href="/zh-cn/docs/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/%E8%AE%BE%E8%AE%A1%E5%BA%93%E8%A1%A8/"/>
      <url>/zh-cn/docs/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/%E8%AE%BE%E8%AE%A1%E5%BA%93%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="设计库表"><a href="#设计库表" class="headerlink" title="设计库表"></a>设计库表</h1><p>文档类型：教程型</p><p>文档格式：教程目的，前置准备，分步骤讲解原理 &amp; 示例，相关文档推荐；</p><p>内容提要：</p><ol><li>byconity 是如何组织数据库和数据表的</li><li>数据库表的规格，比如单数据库支持放多少数据表，单表支持多少列</li><li>设计数据表时，应该理解哪些配置（primary key 等）</li><li>典型场景下，设计数据表的最佳实践是什么</li></ol><h2 id="组织库表"><a href="#组织库表" class="headerlink" title="组织库表"></a>组织库表</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>ByConity 的数据库是一组相关联的表或者视图的组合，方便用户管理这组 schema 的生命周期以及权限控制。ByConity 对数据库的数目上限没有硬性限制。</p><h3 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h3><p>从逻辑上看，数据表是一组拥有相同行数的数据列的集合，并从属某个数据库。ByConity 对一个数据库的表数目也没有限制（最好不超过百万）。一个表拥有的数据列数目不超过 10 万。</p><h4 id="表引擎"><a href="#表引擎" class="headerlink" title="表引擎"></a>表引擎</h4><p>表引擎即表的类型，决定了：</p><ul><li>数据的组织和存储方式</li><li>索引的方式以及索引类型</li><li>支持哪些查询以及如何支持</li><li>一些其他特定的功能和配置</li></ul><p>ByConity 最常用的表引擎是 CnchMergeTree。其他特殊类型的表引擎包括 Hive 外表、Kafka 表等 。下面重点讲下 MergeTree 表引擎的原理。</p><h4 id="CNCHMergeTree-表原理"><a href="#CNCHMergeTree-表原理" class="headerlink" title="CNCHMergeTree 表原理"></a>CNCHMergeTree 表原理</h4><p>CNCHMergeTree 表是最常用的表引擎，核心思想和 LSM-Tree 类似，数据按分区键(partition by)进行分区，然后排序键(order by)进行有序存储。主要特点：</p><ul><li>如果指定了分区键的话，数据会按分区键划分成了不同的逻辑数据集（逻辑分区，Partition)</li></ul><p>每一个逻辑分区可以存在零到多个数据片段（DataPart）。如果查询条件可以裁剪分区，通常可以加速查询。如果没有指定分区键，全部数据都在一个逻辑分区里。</p><ul><li>数据片段</li></ul><p>数据片段里的数据按排序键排序。每个数据片段还会存在一个 min&#x2F;max 索引，来加速分区选择。</p><ul><li>数据颗粒（Granule）</li></ul><p>每个数据片段被逻辑的分割成颗粒（granule ），默认的 Granule 为 8192 行（由表的 index_granularity 配置决定）。颗粒是 byconity 中进行数据查询时的最小不可分割数据集。每个颗粒的第一行通过该行的主键值进行标记， byconity 会为每个数据片段创建一个索引文件来存储这些标记。对于每列，无论它是否包含在主键当中，byconity 都会存储类似标记。这些标记让您可以在列文件中直接找到数据。Granule 作为 byconity 稀疏索引的索引目标，也是在内存中进行数据扫描的单位。</p><ul><li>后台 Merge</li></ul><p>后台任务会定时对同一个分区的 DataPart 进行合并，并保持按排序键有序。后台的合并减少了 Part 的数目，以便更高效存储，并提升了查询性能。</p><h2 id="CnchMergeTree-建表语句和相关配置"><a href="#CnchMergeTree-建表语句和相关配置" class="headerlink" title="CnchMergeTree 建表语句和相关配置"></a>CnchMergeTree 建表语句和相关配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE [IF NOT EXISTS] [db.]table_name</span><br><span class="line">(</span><br><span class="line">    name1 [type1] [NULL|NOT NULL] [DEFAULT|ALIAS expr1] [compression_codec] [TTL expr1],</span><br><span class="line">    name2 [type2] [NULL|NOT NULL] [DEFAULT|ALIAS expr2] [compression_codec] [TTL expr2],</span><br><span class="line">    ...</span><br><span class="line">    INDEX index_name1 expr1 TYPE type1(...) GRANULARITY value1,</span><br><span class="line">    INDEX index_name2 expr2 TYPE type2(...) GRANULARITY value2，</span><br><span class="line">) ENGINE = MergeTree()</span><br><span class="line">ORDER BY expr</span><br><span class="line">[PARTITION BY expr]</span><br><span class="line">[CLUSTER BY (column, expression, ...) INTO value1 BUCKETS SPLIT_NUMBER value2 WITH_RANGE]</span><br><span class="line">[PRIMARY KEY expr]</span><br><span class="line">[UNIQUE KEY expr]</span><br><span class="line">[SAMPLE BY expr]</span><br><span class="line">[TTL expr]</span><br><span class="line">[SETTINGS name=value, ...]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="设计分区键（PARTITION-BY"><a href="#设计分区键（PARTITION-BY" class="headerlink" title="设计分区键（PARTITION BY)"></a>设计分区键（PARTITION BY)</h3><p>分区键定义分区，分区是在一个表中通过指定的规则划分而成的逻辑数据集。可以按任意标准进行分区，如按日期。为了减少需要操作的数据，每个分区都是分开存储的。查询时，byconity 尽量使用这些分区的最小子集。建表时候通过 <code>PARTITION BY expr</code> 子句指定。分区键可以是表中列的任意表达式。例如，指定按月分区，表达式为 <code>toYYYYMM(date)</code>；或者按表达元组，如 <code>(toMonday(date), EventType)</code> 等。</p><p>需要注意，表中分区表达式计算出的取值范围不能太大（推荐不超过一万），太多分区会占用比较大的内存以及带来比较多的 IO 和计算开销。</p><p>合理的设计分区键可以极大减少查询时需要扫描的数据量，一般考虑将查询中最常用的条件同时取值范围不超过一万的列设计为分区键（如日期等）。</p><h3 id="设计排序键（ORDER-BY）"><a href="#设计排序键（ORDER-BY）" class="headerlink" title="设计排序键（ORDER BY）"></a>设计排序键（ORDER BY）</h3><p>可以是一组列的元组或任意的表达式。 例如: <code>ORDER BY (OrderID, Date)</code> 。</p><p>如果不需要排序，可以使用 <code>ORDER BY tuple()</code>。DataPart 里的数据将按照排序键进行排序。</p><h3 id="设计主键-PRIMARY-KEY"><a href="#设计主键-PRIMARY-KEY" class="headerlink" title="设计主键(PRIMARY KEY)"></a>设计主键(PRIMARY KEY)</h3><p>默认情况不需要显式指定，byconity 将使用排序键作为主键。当有特殊场景主键和排序键不一致时，主键必须为排序键的最左前缀。如排序键为(OrderID, Date)，主键必须为 OrderID，不能为 Date。在一些特殊的表引擎，如 CnchAggregatingMergeTree、CnchSumMergeTree 中，主键会与排序键不同。</p><p>byconity 会在主键上建立以 Granule 为单位的稀疏索引，（与之对比，所谓稠密索引则是每一行都会建立索引信息）。</p><p>如果查询条件能匹配主键索引的最左前缀，通过主键索引可以快速过滤出可能需要读取的数据颗粒，相比扫描整个 DataPart，通常要高效很多。</p><p>另外需要注意，PRIMARY KEY 不能保证唯一性，所以可以插入主键重复的数据行。</p><p>分区（PARTITION BY）和主键(PRIMARY KEY)是两种不同的加速数据查询的方式，定义的时候应当尽量错开使用不同的列来定义两者，来覆盖更多的查询场景。例如 order by 的第一个列一定不要重复放到 partition by 里。下面是如何选择主键的一些考虑：</p><ul><li>是否是查询条件里常用的列</li><li>不是非分区键的第一个列</li><li>这个列的选择性，例如性别、是&#x2F;否这种可选值太少的列不建议放入主键中</li><li>假如现在的主键是（a，b)，如果在大多数情况下给定（a，b）对应的数据范围很大（包含多个 Granule），可以考虑把一个新的查询常用列附加到主键中，这样可以过滤更多的数据。</li><li>过长的主键会对插入性能和内存消耗有负面影响，但对查询性能没有影响。</li></ul><h3 id="唯一键索引-UNIQUE-KEY"><a href="#唯一键索引-UNIQUE-KEY" class="headerlink" title="唯一键索引(UNIQUE KEY)"></a>唯一键索引(UNIQUE KEY)</h3><p>主键（PRIMARY KEY）不能保证去重，如果有唯一键去重的需求，需要在建表 shi 设置唯一键索引。设置唯一键之后，byconity 提供 upsert 更新写语义，可以根据唯一键高效更新数据行。查询自动返回每个唯一键的最新值。</p><p>唯一键可以是一组列的元组或任意的表达式，如 <code>UNIQUE KEY (product_id, sipHash64(city))</code>。</p><p>唯一建索引可以通过配置 <code>partition_level_unique_keys</code> 控制是分区级别唯一还是全表唯一，目前推荐实践为：分区唯一索引，单分区数据量不超过千万级别<strong>。</strong>若为全表唯一，则全表数据量建议不超过千万级别。</p><p>通过唯一键查询时会用上唯一键索引过滤数据加速查询，所以通常主键可以设置和唯一键不一样列，覆盖更多的查询条件。不过如果要使用部分列更新功能的话，是需要唯一键为排序键的最左前缀。</p><h3 id="跳数索引（Index）"><a href="#跳数索引（Index）" class="headerlink" title="跳数索引（Index）"></a>跳数索引（Index）</h3><p>建表时可以这样定义跳数索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INDEX index_name expr TYPE type(...) GRANULARITY granularity_value</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="可用的索引类型"><a href="#可用的索引类型" class="headerlink" title="可用的索引类型"></a>可用的索引类型</h4><ul><li><code>minmax</code> 存储指定表达式的极值（如果表达式是 <code>tuple</code> ，则存储 <code>tuple</code> 中每个元素的极值），这些信息用于跳过数据块，类似主键。</li></ul><p>跳数索引功能正在测试中，等完成后补充支持的跳数索引类型。</p><h3 id="设计-Bucket"><a href="#设计-Bucket" class="headerlink" title="设计 Bucket"></a>设计 Bucket</h3><p><a href="undefined.md">CNCH Bucket table 最佳实践手册</a></p><h3 id="采样"><a href="#采样" class="headerlink" title="采样"></a>采样</h3><p>用于抽样的表达式，可选项。</p><p>如果要用抽样表达式，主键中必须包含这个表达式。例如： <code>SAMPLE BY intHash32(UserID) ORDER BY (CounterID, EventDate, intHash32(UserID))</code> 。</p><p>细节参考采样功能（需要独立一篇采样功能）</p><h3 id="列和表的-TTL"><a href="#列和表的-TTL" class="headerlink" title="列和表的 TTL"></a>列和表的 TTL</h3><p>指定行存储的持续时间并定义数据片段在硬盘和卷上的移动逻辑的规则列表，可选项。</p><p>表达式中必须存在至少一个 <code>Date</code> 或 <code>DateTime</code> 类型的列，比如：</p><p><code>TTL date + INTERVAl 1 DAY</code></p><p>更多细节，请查看 <a href="https://clickhouse.com/docs/zh/engines/table-engines/mergetree-family/mergetree#table_engine-mergetree-ttl">表和列的 TTL</a>（太多了，可能要独立一篇 TTL 的）</p><h3 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h3><h4 id="Granule-配置"><a href="#Granule-配置" class="headerlink" title="Granule 配置"></a>Granule 配置</h4><ul><li><code>index_granularity</code> — 索引粒度。索引中相邻的『标记』间的数据行数（对应 Granule 大小）。默认值 8192 。</li></ul><p>后面三个配置待测试，RD 未验证功能。</p><ul><li><code>index_granularity_bytes</code> — 索引粒度，以字节为单位，默认值: 10Mb。如果想要仅按数据行数限制索引粒度, 请设置为 0(不建议)。</li><li><code>min_index_granularity_bytes</code> - 允许的最小数据粒度，默认值：1024b。该选项用于防止误操作，添加了一个非常低索引粒度的表。</li><li><code>enable_mixed_granularity_parts</code> — 是否启用通过 <code>index_granularity_bytes</code> 控制索引粒度的大小。在老版本只有 <code>index_granularity</code> 配置能够用于限制索引粒度的大小。当从具有很大的行（几十上百兆字节）的表中查询数据时候，<code>index_granularity_bytes</code> 配置能够提升 ClickHouse 的性能。如果您的表里有很大的行，可以开启这项配置来提升 <code>SELECT</code> 查询的性能。</li></ul><h4 id="计算组配置"><a href="#计算组配置" class="headerlink" title="计算组配置"></a>计算组配置</h4><p>参考 【教程型】配置计算组</p><h4 id="merge-相关配置"><a href="#merge-相关配置" class="headerlink" title="merge 相关配置"></a>merge 相关配置</h4><p>参考后台任务章节</p><h4 id="存储相关配置"><a href="#存储相关配置" class="headerlink" title="存储相关配置"></a>存储相关配置</h4><p>参考存储相关章节</p><h4 id="唯一索引相关配置"><a href="#唯一索引相关配置" class="headerlink" title="唯一索引相关配置"></a>唯一索引相关配置</h4><ul><li><code>partition_level_unique_keys</code> - 唯一索引是否是分区唯一，默认值：<code>true</code>；如果为 <code>false</code>，代表唯一索引是全表级别；</li><li><code>cloud_enable_staging_area</code> - 是否开启异步写入模式，默认值：<code>false</code>。</li></ul><h4 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h4><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="主键索引的最佳实践"><a href="#主键索引的最佳实践" class="headerlink" title="主键索引的最佳实践"></a>主键索引的最佳实践</h3><p><a href="https://clickhouse.com/docs/zh/guides/improving-query-performance/sparse-primary-indexes/">https://clickhouse.com/docs/zh/guides/improving-query-performance/sparse-primary-indexes/</a></p><h3 id="二级索引最佳实践"><a href="#二级索引最佳实践" class="headerlink" title="二级索引最佳实践"></a>二级索引最佳实践</h3><p><a href="https://clickhouse.com/docs/zh/guides/improving-query-performance/skipping-indexes">https://clickhouse.com/docs/zh/guides/improving-query-performance/skipping-indexes</a></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="列类型考虑"><a href="#列类型考虑" class="headerlink" title="列类型考虑"></a>列类型考虑</h3><h3 id="避免一味使用-String-类型"><a href="#避免一味使用-String-类型" class="headerlink" title="避免一味使用 String 类型"></a>避免一味使用 String 类型</h3><p>如果可能的情况下使用 Int(8|16|32|64|128|256) &#x2F; Date &#x2F; Date32 &#x2F; DateTime &#x2F; DateTime64 &#x2F; Float &#x2F; Decimal 代替 String</p><p>最简单的判断方法就是看是否可以转换到目标类型比如 <code>SELECT countIf(toUInt8OrNull(col) IS NULL) FROM table</code>, <code>SELECT countIf(toDateOrNull(col) IS NULL) FROM table</code></p><p>对内容相对固定的 String Column, 可以考虑使用 Enum 代替，比如省份名称. Enum 后期可以通过 <code>ALTER TABLE</code> 添加新值</p><p>String 最小最大长度差距不超过 8 的情况下使用 FixedString，因为 String 相比 FixedString 在内存中要多储存 8 字节的 offset <code>SELECT min(length(col)), max(length(col)) FROM table</code></p><h3 id="Nullable-选择"><a href="#Nullable-选择" class="headerlink" title="Nullable 选择"></a>Nullable 选择</h3><p>如果确定列中不包含 Null，不要使用 Nullable 类型，会对性能有负面影响</p><h3 id="LowCardinality"><a href="#LowCardinality" class="headerlink" title="LowCardinality"></a>LowCardinality</h3><p>如果某个列的基数较低，例如一个 DataPart 内只有不超过 10000 个不相等的值，可以考虑用 LowCardinality 类型。LowCardinality 类型会对原始列进行字典编码。对很多应用来说，处理字典编码的数据可以显著的增加查询速度，并且降低存储空间，提升 IO 效率。</p><h3 id="列-Codec-选择"><a href="#列-Codec-选择" class="headerlink" title="列 Codec 选择"></a>列 Codec 选择</h3><p>通用编码 lz4 &#x2F; lz4hc &#x2F; zstd &#x2F; deflate_qpl</p><p><a href="https://clickhouse.com/docs/en/sql-reference/statements/create/table/#general-purpose-codecs">https://clickhouse.com/docs/en/sql-reference/statements/create/table/#general-purpose-codecs</a></p><p>通常来说 lz4 编码快但压缩率没有 zstd 高, 在支持 Intel IAA 的平台上可以考虑使用 qpl</p><p>特殊编码可以和上面的通用编码一起使用: Delta &#x2F; DoubleDelta &#x2F; Gorilla &#x2F; FPC &#x2F; T64</p><p><a href="https://clickhouse.com/docs/en/sql-reference/statements/create/table/#specialized-codecs">https://clickhouse.com/docs/en/sql-reference/statements/create/table/#specialized-codecs</a></p><p>一般来说时序可以用 doubledelta, 随时序变化的值可以用 gorilla, FPC 在 64bit 浮点数上效果比较好. T64 是寻找 64 个值的共同高位进行裁剪，只记录变化的部分</p><p>下面是一些最佳实践</p><ul><li>DateTime 类型: 未排序，建议用 Delta+LZ4</li><li>DateTime 类型：排序，建议用 LZ4</li><li>Date 类型：未排序，建议用 ZSTD</li><li>Date 类型：排序（例：PK），建议用 LZ4</li></ul><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://clickhouse.com/docs/zh/engines/table-engines/mergetree-family/mergetree#tiao-shu-suo-yin-fen-duan-hui-zong-suo-yin-shi-yan-xing-de">https://clickhouse.com/docs/zh/engines/table-engines/mergetree-family/mergetree#tiao-shu-suo-yin-fen-duan-hui-zong-suo-yin-shi-yan-xing-de</a></p><p><a href="https://clickhouse.com/docs/en/sql-reference/statements/create/table/#column-compression-codecs">https://clickhouse.com/docs/en/sql-reference/statements/create/table/#column-compression-codecs</a></p>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> Getting_Started </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>连接客户端</title>
      <link href="/zh-cn/docs/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/%E8%BF%9E%E6%8E%A5%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
      <url>/zh-cn/docs/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/%E8%BF%9E%E6%8E%A5%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="连接客户端"><a href="#连接客户端" class="headerlink" title="连接客户端"></a>连接客户端</h1><p>文档类型：教程型</p><p>文档结构：教程目的，前置准备，分步骤讲解原理 &amp; 示例，相关文档推荐；</p><p>内容提要：</p><ol><li>Byconity 提供哪些客户端或者驱动方式进行与其他系统的交互</li><li>如何在部署好集群后，下载、启动这些客户端</li></ol><h2 id="命令行客户端（CLI）"><a href="#命令行客户端（CLI）" class="headerlink" title="命令行客户端（CLI）"></a>命令行客户端（CLI）</h2><h3 id="Docker-Client"><a href="#Docker-Client" class="headerlink" title="Docker Client"></a><a href="https://hub.docker.com/r/yandex/clickhouse-server/">Docker Client</a></h3><p>如果你已经安装了 Docker，那么只需下面命令就可以直接建立 Byconity 连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it yandex/clickhouse-client --host 127.0.0.1 --port 9000 --user default --password xxxx</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面各项均为<strong>可选项</strong>，视情况而定：</p><ul><li><code>--host xxx</code> 主机 IP 或域名</li><li><code>--port 9000</code> tcp 端口，默认为 9000</li><li><code>--user default</code> 用户名</li><li><code>--password xxxx</code> 密码</li></ul><h3 id="Clickhouse-Client"><a href="#Clickhouse-Client" class="headerlink" title="Clickhouse Client"></a>Clickhouse Client</h3><p>Byconity 兼容 ClickHouse 开源社区所提供的客户端。</p><ul><li><a href="https://clickhouse.com/docs/en/integrations/sql-clients/clickhouse-client-local">各操作系统安装 ClickhouseClient 参考</a>，下面是以 MacOS x86_64 为例的安装命令：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -O &#x27;https://builds.clickhouse.com/master/macos/clickhouse&#x27; \</span><br><span class="line">&amp;&amp; chmod a+x ./clickhouse</span><br><span class="line"></span><br><span class="line">sudo mv ./clickhouse /usr/local/bin/</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>建立连接：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clickhouse client --host 127.0.0.1 --password xxxx</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>clickhouse client --help</code> 可以查看可选参数，这里的参数和上面</li></ul><p><code>docker run -it yandex/clickhouse-client ...</code> 后面的参数名是一致的</p><h2 id="各语言驱动器（Driver）"><a href="#各语言驱动器（Driver）" class="headerlink" title="各语言驱动器（Driver）"></a>各语言驱动器（Driver）</h2><p>Clickhouse 官方提供的各种语言的开源 Driver 可直接用于 Byconity 连接。</p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><h4 id="clickhouse-connect"><a href="#clickhouse-connect" class="headerlink" title="clickhouse-connect"></a><a href="https://github.com/ClickHouse/clickhouse-connect">clickhouse-connect</a></h4><ul><li>clickhouse-connect 只支持 python3</li><li>安装：<code>pip3 install clickhouse-connect</code></li><li>示例代码：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import clickhouse_connect</span><br><span class="line"></span><br><span class="line"># connect</span><br><span class="line">client = clickhouse_connect.get_client(host=**&#x27;localhost&#x27;**, username=**&#x27;default&#x27;**, password=**&#x27;xxxx&#x27;**)</span><br><span class="line"></span><br><span class="line">*# query*</span><br><span class="line">query_result = client.query(&#x27;**SHOW DATABASES;&#x27;**)</span><br><span class="line">print (query_result.result_set)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="clickhouse-driver"><a href="#clickhouse-driver" class="headerlink" title="clickhouse-driver"></a><a href="https://pypi.org/project/clickhouse-driver/">clickhouse-driver</a></h4><ul><li>Python3 安装：<code>pip3 install clickhouse-driver</code></li><li>Python2 安装：<code>pip install clickhouse-driver</code></li><li>示例代码：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from clickhouse_driver import Client</span><br><span class="line">from clickhouse_driver import connect</span><br><span class="line"></span><br><span class="line"># connect</span><br><span class="line">client = Client(host=**&#x27;localhost&#x27;**,port =9000, user=**&#x27;default&#x27;**, password=**&#x27;xxxx&#x27;**)</span><br><span class="line"></span><br><span class="line">*# query*</span><br><span class="line">*query_result = client.execute(&#x27;***SHOW DATABASES;***&#x27;)*</span><br><span class="line">print (query_result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h3><h4 id="使用-clickhouse-go-连接"><a href="#使用-clickhouse-go-连接" class="headerlink" title="使用 clickhouse-go 连接"></a>使用 <a href="https://github.com/ClickHouse/clickhouse-go">clickhouse-go</a> 连接</h4><ul><li>clickhouse-go 相比后面的 ch-go 对 Go 的类型支持更友好，底层由 ch-go 实现，推荐使用。</li><li>在项目中执行 <code>go get ``github.com/ClickHouse/clickhouse-go/v2</code> 安装</li><li>示例代码：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">        &quot;context&quot;</span><br><span class="line">        &quot;log&quot;</span><br><span class="line">        &quot;net&quot;</span><br><span class="line">        &quot;time&quot;</span><br><span class="line"></span><br><span class="line">        &quot;github.com/ClickHouse/clickhouse-go/v2&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">        ctx := context.Background()</span><br><span class="line"></span><br><span class="line">        // 配置连接参数</span><br><span class="line">        conn, err := clickhouse.Open(&amp;clickhouse.Options&#123;</span><br><span class="line">                Addr: string[]&#123;&quot;127.0.0.1&quot;&#125;,</span><br><span class="line">                Auth: clickhouse.Auth&#123;</span><br><span class="line">                        Database: &quot;my_db&quot;,</span><br><span class="line">                        Username: &quot;default&quot;,</span><br><span class="line">                        Password: &quot;xxxx&quot;,</span><br><span class="line">                &#125;,</span><br><span class="line">                DialContext: func(ctx context.Context, addr string) (net.Conn, error) &#123;</span><br><span class="line">                        var d net.Dialer</span><br><span class="line">                        return d.DialContext(ctx, &quot;tcp&quot;, addr)</span><br><span class="line">                &#125;,</span><br><span class="line">                Settings: clickhouse.Settings&#123;</span><br><span class="line">                        &quot;max_execution_time&quot;: 60,</span><br><span class="line">                &#125;,</span><br><span class="line">                DialTimeout:      time.Duration(10) * time.Second,</span><br><span class="line">                MaxOpenConns:     5,</span><br><span class="line">                MaxIdleConns:     5,</span><br><span class="line">                ConnMaxLifetime:  time.Duration(10) * time.Minute,</span><br><span class="line">                ConnOpenStrategy: clickhouse.ConnOpenInOrder,</span><br><span class="line">        &#125;)</span><br><span class="line">        if err != nil &#123;</span><br><span class="line">                log.Panic(err)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if err := conn.Ping(ctx); err != nil &#123;</span><br><span class="line">                log.Panic(err)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 执行 SQL</span><br><span class="line">        if err := conn.Exec(ctx, &quot;SHOW DATABASES;&quot;); err != nil &#123;</span><br><span class="line">                log.Panic(err)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="使用-ch-go-连接"><a href="#使用-ch-go-连接" class="headerlink" title="使用 ch-go 连接"></a>使用 <a href="https://github.com/ClickHouse/ch-go">ch-go</a> 连接</h4><ul><li>ch-go 对 Clickhouse 数据类型支持更好，性能稍高于 clickhouse-go。</li><li>安装：<code>go get ``github.com/ClickHouse/ch-go</code></li><li>示例代码：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">  &quot;context&quot;</span><br><span class="line">  &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">  &quot;github.com/ClickHouse/ch-go&quot;</span><br><span class="line">  &quot;github.com/ClickHouse/ch-go/proto&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">  ctx := context.Background()</span><br><span class="line">  c, err := ch.Dial(ctx, ch.Options&#123;Address: &quot;localhost:9000&quot;&#125;)</span><br><span class="line">  if err != nil &#123;</span><br><span class="line">    panic(err)</span><br><span class="line">  &#125;</span><br><span class="line">  var (</span><br><span class="line">    numbers int</span><br><span class="line">    data    proto.ColUInt64</span><br><span class="line">  )</span><br><span class="line">  if err := c.Do(ctx, ch.Query&#123;</span><br><span class="line">    Body: &quot;SELECT number FROM system.numbers LIMIT 500000000&quot;,</span><br><span class="line">    Result: proto.Results&#123;</span><br><span class="line">      &#123;Name: &quot;number&quot;, Data: &amp;data&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    // OnResult will be called on next received data block.</span><br><span class="line">    OnResult: func(ctx context.Context, b proto.Block) error &#123;</span><br><span class="line">      numbers += len(data)</span><br><span class="line">      return nil</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;); err != nil &#123;</span><br><span class="line">    panic(err)</span><br><span class="line">  &#125;</span><br><span class="line">  fmt.Println(&quot;numbers:&quot;, numbers)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>用 <a href="https://github.com/ClickHouse/clickhouse-jdbc/tree/master/clickhouse-jdbc">clickhouse-jdbc</a> 连接</p><ul><li>通过 maven 配置安装：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    *&lt;!-- please stop using ru.yandex.clickhouse as it&#x27;s been deprecated --&gt;*</span><br><span class="line">*    *&lt;groupId&gt;com.clickhouse&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;clickhouse-jdbc&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.3.2-patch11&lt;/version&gt;</span><br><span class="line">    *&lt;!-- use uber jar with all dependencies included, change classifier to http for smaller jar --&gt;*</span><br><span class="line">*    *&lt;classifier&gt;all&lt;/classifier&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;*&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;*&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>示例代码：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String url = &quot;jdbc:ch://localhost:8123&quot;; </span><br><span class="line">Properties properties = new Properties();</span><br><span class="line">properties.setProperty(&quot;max_execution_time&quot;, &quot;120&quot;);</span><br><span class="line">ClickHouseDataSource dataSource = new ClickHouseDataSource(url, properties);</span><br><span class="line">try (Connection conn = dataSource.getConnection(&quot;default&quot;, &quot;password&quot;);</span><br><span class="line">    Statement stmt = conn.createStatement()) &#123;</span><br><span class="line">    ResultSet rs = stmt.executeQuery(&quot;SHOW DATABASES;&quot;);</span><br><span class="line">    while(rs.next()) &#123;</span><br><span class="line">        // ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>Byconity 也提供 HTTP 连接方式，可以用 curl 或 postman 方式执行 SQL。curl 示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl --location --request POST &#x27;127.0.0.1:8123/?max_execution_time=60&amp;default_format=Native&#x27; \</span><br><span class="line">--header &#x27;Authorization: Basic xxx&#x27; \</span><br><span class="line">--header &#x27;Content-Type: text/plain&#x27; \</span><br><span class="line">--data-raw &#x27;SHOW DATABASES;&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>以 <code>Basic Auth</code>(用户名 + 密码)方式进行加密，加密结果为上面的 <code>--header &#39;Authorization: Basic xxx&#39;</code></li><li>在 Body 中直接填写要执行的 SQL，对应上面的 <code>--data-raw &#39;SHOW DATABASES;&#39;</code></li><li>HTTP 接口默认端口号为 <code>8123</code></li><li>示例参数：</li><li><code>max_execution_time=60</code> 指定查询最大等待时间(秒)</li><li>默认情况下，返回的数据是 <code>TabSeparated</code> 格式的，<code>default_format</code> 可以指定 <code>TabSeparated</code> 之外的默认格式</li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://clickhouse.com/docs/zh/interfaces/http">Clickhouse Http 参考</a></li><li><a href="https://clickhouse.com/docs/en/integrations/language-clients">Clickhouse 各语言 Driver 参考</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> Getting_Started </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署要求</title>
      <link href="/zh-cn/docs/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/%E9%83%A8%E7%BD%B2%E8%A6%81%E6%B1%82/"/>
      <url>/zh-cn/docs/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/%E9%83%A8%E7%BD%B2%E8%A6%81%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="部署要求"><a href="#部署要求" class="headerlink" title="部署要求"></a>部署要求</h1><p>ByConity 能够运行在绝大多数主流的商用服务器上，我们建议 ByConity 的部署能够遵循以下需求：</p><ul><li>Linux 操作系统版本需求：<br>    - 内核版本在 4.14 及以<br>        - Ubuntu 16.04.5 LTS 及以上<br>        - Centos 8 及以上</li><li>软件需求：<br>    - 依赖均包含在 lib 中，无需额外的软件依赖</li><li>硬件规格<br>    - 开发测试环境</li></ul><table><thead><tr><th align="left">组件名称</th><th align="left">CPU</th><th align="left">内存</th><th align="left">硬盘</th><th align="left">网络</th><th align="left">实例数</th></tr></thead><tbody><tr><td align="left">TSO</td><td align="left">1</td><td align="left">300M</td><td align="left">5G</td><td align="left">千兆网卡</td><td align="left">1</td></tr><tr><td align="left">Server</td><td align="left">8</td><td align="left">32G</td><td align="left">100G</td><td align="left">千兆网卡</td><td align="left">1</td></tr><tr><td align="left">Worker</td><td align="left">4</td><td align="left">16G</td><td align="left">100G+</td><td align="left">千兆网卡</td><td align="left">1</td></tr><tr><td align="left">DaemonManager</td><td align="left">1</td><td align="left">500M</td><td align="left">5G</td><td align="left">千兆网卡</td><td align="left">1</td></tr><tr><td align="left">ResourceManager</td><td align="left">1</td><td align="left">2G</td><td align="left">5G</td><td align="left">千兆网卡</td><td align="left">1</td></tr></tbody></table><p>    - 生产环境</p><table><thead><tr><th align="left">组件名称</th><th align="left">CPU</th><th align="left">内存</th><th align="left">硬盘</th><th align="left">网络</th><th align="left">实例数</th></tr></thead><tbody><tr><td align="left">TSO</td><td align="left">2</td><td align="left">500M</td><td align="left">5G</td><td align="left">万兆网卡</td><td align="left">3</td></tr><tr><td align="left">Server</td><td align="left">14</td><td align="left">60G</td><td align="left">1T</td><td align="left">万兆网卡</td><td align="left">&gt;&#x3D;1</td></tr><tr><td align="left">Worker</td><td align="left">30</td><td align="left">240G</td><td align="left">2T+</td><td align="left">万兆网卡</td><td align="left">&gt;&#x3D;1</td></tr><tr><td align="left">DaemonManager</td><td align="left">4</td><td align="left">10G</td><td align="left">10G</td><td align="left">万兆网卡</td><td align="left">1</td></tr><tr><td align="left">ResourceManager</td><td align="left">8</td><td align="left">16G</td><td align="left">10G</td><td align="left">万兆网卡</td><td align="left">1</td></tr></tbody></table><p>    - 硬件规格中，Worker 和 Server 的本地磁盘主要用于存储写入时的临时数据和日志文件，同时 Worker 的本地磁盘中还会存储数据的 Cache，因此磁盘的大小需要根据配置的 DiskCache 大小及写入的数据量来确定。</p>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> Getting_Started </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置计算组</title>
      <link href="/zh-cn/docs/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/%E9%85%8D%E7%BD%AE%E8%AE%A1%E7%AE%97%E7%BB%84/"/>
      <url>/zh-cn/docs/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/%E9%85%8D%E7%BD%AE%E8%AE%A1%E7%AE%97%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="配置计算组"><a href="#配置计算组" class="headerlink" title="配置计算组"></a>配置计算组</h1><p>文档类型：教程型</p><p>文档格式：教程目的，前置准备，分步骤讲解原理 &amp; 示例，相关文档推荐；</p><h1 id="计算组、Worker-和-Server-的关系"><a href="#计算组、Worker-和-Server-的关系" class="headerlink" title="计算组、Worker 和 Server 的关系"></a>计算组、Worker 和 Server 的关系</h1><p>在<a href="undefined.md">资源管理器</a> 章节我们介绍了<strong>计算组</strong>（Virtual Warehouse, 简称 VW）、<strong>计算组副本</strong>（Worker Group, 简称 WG）和计算节点等概念。一个 ByConity 集群中，计算资源被划分为多个计算组，每个计算组包含多个配置相同的计算组副本，每个计算组副本则包含多个计算节点。可以在不同级别对资源进行自由的扩缩容，实现弹性计算。以扩容为例，我们可以有不同的扩容方式：</p><ul><li>对 Worker 的 CPU、MEM 资源进行纵向扩容，以提升单节点的处理性能。</li><li>增加一个计算组副本内 Worker 的数量，以提升计算组副本处理查询时的性能。</li><li>增加计算组内计算组副本的数量，以提升计算组处理查询的并发能力。</li><li>为新的业务或租户增加新的计算组资源，实现租户间资源隔离。</li></ul><p>服务节点，我们也称为 server，主要承担 sql 接收，调度，和结果回传的作用。计算节点，我们也称为 worker，主要承担的是计算任务，这些任务可以是数据写入、用户查询，也可以是一些后台任务。用户查询和后台任务，可以共享相同的计算节点以提高利用率，也可以使用独立的计算节点以保证严格的资源隔离。用户可以根据计算任务的特性、优先级和业务类别不同，构建多个计算组，并设置不同的资源弹性策略，提高计算效率降低成本。</p><h1 id="查看计算组信息"><a href="#查看计算组信息" class="headerlink" title="查看计算组信息"></a>查看计算组信息</h1><p>我们提供一组系统表可以查询计算组相关元信息，这些系统表只提供可观测的能力，不能通过修改表内容来更改计算组信息。如需修改计算组配置，请参考[修改计算组配置]（todo:link）。</p><h2 id="system-virtual-warehouses"><a href="#system-virtual-warehouses" class="headerlink" title="system.virtual_warehouses"></a>system.virtual_warehouses</h2><p>该系统表展示所有计算组（VW）的元信息，主要字段及说明：</p><table><thead><tr><th align="left">字段名</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">name</td><td align="left">该virtual warehouse 的名称，唯一标识。</td></tr><tr><td align="left"><strong>type</strong></td><td align="left">该virtual warehouse 的类型，Default&#x2F;Write。</td></tr><tr><td align="left"><strong>num_workers</strong></td><td align="left">该virtual warehouse 为每个worker group配置的worker数量</td></tr><tr><td align="left">active_worker_groups</td><td align="left">该virtual warehouse 中正在运行的计算组副本（worker group）数量</td></tr><tr><td align="left">active_workers</td><td align="left">该virtual warehouse 中正在健康运行的worker数量</td></tr><tr><td align="left">min_worker_groups</td><td align="left">该virtual warehouse 允许运行的最小计算组数量</td></tr><tr><td align="left">max_worker_groups</td><td align="left">该virtual warehouse 允许运行的最大计算组数量</td></tr><tr><td align="left">max_concurrent_queries</td><td align="left">该virtual warehouse 允许的最大查询并发数量</td></tr><tr><td align="left">max_queued_queries</td><td align="left">该virtual warehouse 允许的最大排队查询数量</td></tr><tr><td align="left">max_queued_waiting_ms</td><td align="left">该virtual warehouse 允许的排队查询最大等待时长（毫秒）</td></tr></tbody></table><h2 id="system-worker-groups"><a href="#system-worker-groups" class="headerlink" title="system.worker_groups"></a>system.worker_groups</h2><p>该系统表展示所有计算组副本（WG）的元信息，主要字段及说明：</p><table><thead><tr><th align="left">字段名</th><th align="left">右对齐</th></tr></thead><tbody><tr><td align="left">vw_name</td><td align="left">该worker group 所属的virtual warehouse的名称</td></tr><tr><td align="left">id</td><td align="left">该worker group 的id，唯一标识</td></tr><tr><td align="left">num_workers</td><td align="left">该virtual warehouse 为每个worker group配置的worker数量</td></tr><tr><td align="left">linked_id</td><td align="left">如果该worker group是一个Shared类型，则linked_id指向其引用的Physical worker group</td></tr><tr><td align="left">active_workers</td><td align="left">该worker group中正在健康运行的worker数量</td></tr><tr><td align="left">min_cpu_usage</td><td align="left">该worker group中最小的worker的cpu_usage</td></tr><tr><td align="left">max_cpu_usage</td><td align="left">该worker group中最大的worker的cpu_usage</td></tr><tr><td align="left">avg_cpu_usage</td><td align="left">该worker group所有worker的cpu_usage均值</td></tr><tr><td align="left">min_mem_usage</td><td align="left">该worker group中最小的worker的memory_usage</td></tr><tr><td align="left">max_mem_usage</td><td align="left">该worker group中最大的worker的memory_usage</td></tr><tr><td align="left">avg_mem_usage</td><td align="left">该worker group所有worker的memory_usage均值</td></tr></tbody></table><h2 id="system-workers"><a href="#system-workers" class="headerlink" title="system.workers"></a>system.workers</h2><p>该系统表记录所有运行中的 worker 信息，主要字段及说明：</p><table><thead><tr><th align="left">字段名</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">worker_id</td><td align="left">worker的id，唯一标识</td></tr><tr><td align="left">vw_name</td><td align="left">worker所属的virtual warehouse</td></tr><tr><td align="left">worker_group_id</td><td align="left">worker所属的worker group</td></tr><tr><td align="left">host</td><td align="left">worker的host (ip)</td></tr><tr><td align="left">tcp_port</td><td align="left">worker的tcp_port</td></tr><tr><td align="left">cpu_usage</td><td align="left">当前的cpu_usage</td></tr><tr><td align="left">memory_usage</td><td align="left">当前的memory_usage</td></tr><tr><td align="left">memory_available</td><td align="left">当前可用的memory量（字节）</td></tr><tr><td align="left">last_update_time</td><td align="left">最近的心跳更新时间</td></tr></tbody></table><h1 id="创建及使用计算组"><a href="#创建及使用计算组" class="headerlink" title="创建及使用计算组"></a>创建及使用计算组</h1><p>我们提供本地模式和集群模式两种不同的配置方式来创建计算组。</p><p>本地模式可以直接在配置文件中填写计算组和计算组副本相关信息，便于调试或 demo 运行。</p><p>集群模式则是生产环境下推荐的使用方式，此时我们需要通过特定的 SQL 来创建计算组，并通过对应的 K8s 操作创建实际的计算组资源。</p><h2 id="本地模式"><a href="#本地模式" class="headerlink" title="本地模式"></a>本地模式</h2><p>在启动 resource manager 组件时，我们可以在配置文件（参考[集群配置参数]<a href="undefined.md">集群配置参数</a> （todo: link）resource manager 部分）中填写计算组相关信息。resource manager 会直接根据这些信息创建对应的计算组（以及计算组副本）。示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;vws&gt;</span><br><span class="line">  &lt;vw&gt;</span><br><span class="line">    &lt;name&gt;vw_default&lt;/name&gt;</span><br><span class="line">    &lt;type&gt;Default&lt;/type&gt;</span><br><span class="line">    &lt;num_workers&gt;1&lt;/num_workers&gt;</span><br><span class="line">    &lt;worker_groups&gt;</span><br><span class="line">      &lt;worker_group&gt;</span><br><span class="line">        &lt;name&gt;wg_default&lt;/name&gt;</span><br><span class="line">        &lt;type&gt;Physical&lt;/type&gt;</span><br><span class="line">      &lt;/worker_group&gt;</span><br><span class="line">    &lt;/worker_groups&gt;</span><br><span class="line">  &lt;/vw&gt;</span><br><span class="line">&lt;/vws&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们配置了一个名为 vw_default 的计算组，类型为 Default，并且预期该 vw 中有 1 个 worker（num_workers 仅作为创建 vw 的一个指示信息，运行时实际 worker 数量可以<u>查询相关系统表</u><u>（todo: link [查看计算组信息]</u><u>）</u>获得）。同时，我们为该计算组配置了 1 个副本，名为 wg_default。</p><p>在启动 server 组件时，我们可以在配置文件中（参考[集群配置参数]<a href="undefined.md">集群配置参数</a> （todo: link） server 部分）服务发现部分直接配置每个 vw 对应的 worker 信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;service_discovery&gt;</span><br><span class="line">  &lt;mode&gt;local&lt;/mode&gt;</span><br><span class="line">  &lt;vw&gt;</span><br><span class="line">    &lt;psm&gt;data.cnch.vw_default&lt;/psm&gt;</span><br><span class="line">    &lt;node&gt;</span><br><span class="line">      &lt;vw_name&gt;vw_default&lt;/vw_name&gt;</span><br><span class="line">      &lt;host&gt;10.1.2.3&lt;/host&gt;</span><br><span class="line">      &lt;hostname&gt;vw_default0&lt;/hostname&gt;</span><br><span class="line">      &lt;ports&gt;</span><br><span class="line">        &lt;!-- TCP/Primary --&gt;</span><br><span class="line">        &lt;port&gt;&lt;name&gt;PORT0&lt;/name&gt;&lt;value&gt;31067&lt;/value&gt;&lt;/port&gt;</span><br><span class="line">        &lt;!-- RPC --&gt;</span><br><span class="line">        &lt;port&gt;&lt;name&gt;PORT1&lt;/name&gt;&lt;value&gt;32099&lt;/value&gt;&lt;/port&gt;</span><br><span class="line">        &lt;!-- HTTP --&gt;</span><br><span class="line">        &lt;port&gt;&lt;name&gt;PORT2&lt;/name&gt;&lt;value&gt;35166&lt;/value&gt;&lt;/port&gt;</span><br><span class="line">        &lt;!-- Exchange --&gt;</span><br><span class="line">        &lt;port&gt;&lt;name&gt;PORT5&lt;/name&gt;&lt;value&gt;39481&lt;/value&gt;&lt;/port&gt;</span><br><span class="line">        &lt;!-- Exchange status --&gt;</span><br><span class="line">        &lt;port&gt;&lt;name&gt;PORT6&lt;/name&gt;&lt;value&gt;39482&lt;/value&gt;&lt;/port&gt;</span><br><span class="line">      &lt;/ports&gt;</span><br><span class="line">    &lt;/node&gt;</span><br><span class="line">  &lt;/vw&gt;</span><br><span class="line">&lt;/service_discovery&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在该示例中，server 做服务发现时，会找到计算组 vw_default 有一个 ip 为 10.1.2.3 的 worker。</p><h2 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h2><p>我们可以在 ByConity 集群运行时，创建新的计算组。</p><h3 id="创建计算组"><a href="#创建计算组" class="headerlink" title="创建计算组"></a>创建计算组</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE WAREHOUSE </span><br><span class="line">IF NOT EXISTS `vw_default`</span><br><span class="line">SETTINGS **num_workers = 1**, **type = &#x27;Default&#x27;**, </span><br><span class="line">         auto_suspend = 3600, auto_resume = 1, </span><br><span class="line">         min_worker_groups = 0, max_worker_groups = 1, max_concurrent_queries=200;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>CREATE WAREHOUSE IF NOT EXISTS </code>$VW_NAME<code> SETTINGS ...</code> 这个SQL用于创建计算组。$VW_NAME 为该计算组的唯一标识。创建计算组时，settings 中 num_workers 和 type 为必填项，其他配置可参考[查看计算组信息]小节。</p><h3 id="创建计算组副本"><a href="#创建计算组副本" class="headerlink" title="创建计算组副本"></a>创建计算组副本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE WORKER GROUP </span><br><span class="line">IF NOT EXISTS `wg_default` in `vw_default` </span><br><span class="line">SETTINGS type = &#x27;Physical&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>CREATE WORKER GROUP IF NOT EXISTS </code>$WG_NAME<code>SETTINGS ...</code>这个SQL用于创建计算组副本。$WG_NAME 为该计算组副本的唯一标识。</p><h3 id="创建-K8s-Worker-Pods"><a href="#创建-K8s-Worker-Pods" class="headerlink" title="创建 K8s Worker Pods"></a>创建 K8s Worker Pods</h3><p>ByConity 创建计算组和计算组副本的元信息后，则可以创建对应的 K8s Worker 资源，为 worker 配置对应的环境变量 VIRTUAL_WAREHOUSE_ID&#x3D;$VW_NAME, WORKER_GROUP_ID&#x3D;$WG_NAME。</p><p>Worker 启动后即可自动注册到对应的 virtual warehouse 和 worker group 中。</p><p>具体操作见：<a href="https://code.byted.org/bytehouse/byconity-deploy">https://code.byted.org/bytehouse/byconity-deploy</a></p><h1 id="修改计算组"><a href="#修改计算组" class="headerlink" title="修改计算组"></a>修改计算组</h1><p>除了计算组信息的查看和创建，我们还可以在运行时修改计算组相关的元信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DROP WAREHOUSE IF NOT EXISTS `vw_default`;</span><br><span class="line">DROP WORKER GROUP IF NOT EXISTS `wg_default`;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述 DROP 语句将删除指定的计算组和计算组副本。</p><p>注意：当 ByConity 元信息中找不到 worker pod 指定的 virtual warehouse 时，resource manager 将拒绝该 worker 的注册，因此该 worker 也无法被用于处理查询。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ALTER WAREHOUSE `vw_default` </span><br><span class="line">SETTINGS auto_suspend = 3600, auto_resume = 0, </span><br><span class="line">         min_worker_groups = 0, max_worker_groups = 0, max_concurrent_queries=50;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述 ALTER 语句可以修改计算组的配置，修改后，计算组内所有的计算组副本都将使用新的配置。</p><p>注意：我们无法通过 <code>ALTER WORKER GROUP ...</code> 来修改计算组副本的配置。计算组副本的所有配置都继承自所属计算组的配置，因此不存在这样的语法。</p>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> Getting_Started </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集群配置参数</title>
      <link href="/zh-cn/docs/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0/"/>
      <url>/zh-cn/docs/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="集群配置参数"><a href="#集群配置参数" class="headerlink" title="集群配置参数"></a>集群配置参数</h1><p>文档类型：说明型</p><p>内容提要：</p><ol><li>在安装部署的过程中，需要理解哪些基础参数</li><li>各组件分别有哪些高级参数，作用是什么</li></ol><h2 id="Server-配置参数"><a href="#Server-配置参数" class="headerlink" title="Server 配置参数"></a>Server 配置参数</h2><p>ByConity(曾用内部代号 CNCH)  Server 端的配置保存在 cnch-server.xml 中，进程启动时通过 <code>--config-file</code> 指定， server 会自动从 cnch-server.xml 中加载配置。</p><h3 id="cnch-type"><a href="#cnch-type" class="headerlink" title="cnch_type"></a>cnch_type</h3><p>配置 ByConity 进程类型，可配置为 server 或者 worker。其中 server 主要负责接收查询请求并负责将查询调度到 worker；worker 节点主要负责执行来自 server 的查询任务。举例如下：</p><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;cnch_type&gt;server&lt;/cnch_type&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="tcp-port"><a href="#tcp-port" class="headerlink" title="tcp_port"></a>tcp_port</h3><p>server 和客户端进行连接的 TCP 端口</p><p>Example：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;tcp_port&gt;9000&lt;/tcp_port&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="http-port"><a href="#http-port" class="headerlink" title="http_port"></a>http_port</h3><p>server 与客户端进行连接的 HTTP 端口</p><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;https_port&gt;9999&lt;/https_port&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="rpc-port"><a href="#rpc-port" class="headerlink" title="rpc_port"></a>rpc_port</h3><p>server 与其他组件进行交互的 RPC 端口</p><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;rpc_port&gt;8124&lt;/rpc_port&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="exchange-port"><a href="#exchange-port" class="headerlink" title="exchange_port"></a>exchange_port</h3><p>复杂查询的数据传输端口 （将来考虑与 rpc_port 合并）</p><h3 id="exchange-status-port"><a href="#exchange-status-port" class="headerlink" title="exchange_status_port"></a>exchange_status_port</h3><p>复杂查询的控制指令端口 （将来考虑与 rpc_port 合并）</p><h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><p>本地数据路径目录</p><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;path&gt;/var/lib/clickhouse/&lt;/path&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="tmp-path"><a href="#tmp-path" class="headerlink" title="tmp_path"></a>tmp_path</h3><p>本地临时目录路径,用来存放查询过程中的临时数据</p><p>Example：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;tmp_path&gt;/var/lib/clickhouse/tmp/&lt;/tmp_path&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="users-config"><a href="#users-config" class="headerlink" title="users_config"></a>users_config</h3><p>用户相关配置文件的路径。</p><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;users_config&gt;/path/to/userconf/users.xml&lt;/users_config&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Service-discovery"><a href="#Service-discovery" class="headerlink" title="Service discovery"></a>Service discovery</h3><p>配置与 server 进程通信的其他组件(包括其他 server)。与 server 交互的其他组件有 server, tso, daemon manager, virtual warehouse 以及 resource manager</p><p>keys**:**</p><ul><li><strong>mode</strong> : 服务发现模式, 可选择的配置参数为 local , dns, consul</li><li><strong>cluster</strong>: 集群名称</li><li><strong>disable_cache</strong>：如果配置为 false, 将启用缓存以减少调用服务发现的次数</li><li><strong>cache_timeout</strong> : 缓存过期时间</li></ul><p>Example</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;service_discovery&gt;</span><br><span class="line">    &lt;mode&gt;dns&lt;/mode&gt;</span><br><span class="line">    &lt;cluster&gt;default&lt;/cluster&gt;</span><br><span class="line">        &lt;disable_cache&gt;false&lt;/disable_cache&gt;</span><br><span class="line">        &lt;cache_timeout&gt;5&lt;/cache_timeout&gt;</span><br><span class="line">    &lt;server&gt;</span><br><span class="line">        &lt;psm&gt;data.cnch.server&lt;/psm&gt;</span><br><span class="line">        &lt;service&gt;cnch-server-pp&lt;/service&gt;</span><br><span class="line">        &lt;headless_service&gt;cnch-server-pp-headless&lt;/headless_service&gt;</span><br><span class="line">    &lt;/server&gt;</span><br><span class="line">    &lt;tso&gt;</span><br><span class="line">        &lt;psm&gt;data.cnch.tso&lt;/psm&gt;</span><br><span class="line">        &lt;service&gt;cnch-tso&lt;/service&gt;</span><br><span class="line">        &lt;headless_service&gt;cnch-tso-headless&lt;/headless_service&gt;</span><br><span class="line">    &lt;/tso&gt;</span><br><span class="line">    &lt;vw&gt;</span><br><span class="line">        &lt;psm&gt;data.cnch.vw&lt;/psm&gt;</span><br><span class="line">    &lt;/vw&gt;</span><br><span class="line">    &lt;daemon_manager&gt;</span><br><span class="line">        &lt;psm&gt;data.cnch.daemon_manager&lt;/psm&gt;</span><br><span class="line">        &lt;service&gt;cnch-daemon-manager&lt;/service&gt;</span><br><span class="line">        &lt;headless_service&gt;cnch-daemon-manager-headless&lt;/headless_service&gt;</span><br><span class="line">    &lt;/daemon_manager&gt;</span><br><span class="line">    &lt;resource_manager&gt;</span><br><span class="line">        &lt;psm&gt;data.cnch.resource_manager&lt;/psm&gt;</span><br><span class="line">        &lt;service&gt;cnch-resource-manager&lt;/service&gt;</span><br><span class="line">        &lt;headless_service&gt;cnch-resource-manager-headless&lt;/headless_service&gt;</span><br><span class="line">    &lt;/resource_manager&gt;</span><br><span class="line">&lt;/service_discovery&gt;            </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Catalog-service"><a href="#Catalog-service" class="headerlink" title="Catalog service"></a>Catalog service</h3><p>集群元数据相关配置</p><p>Keys:</p><ul><li><strong>type</strong> : 元数据存储引擎类型，支持 bytekv, fdb</li></ul><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- For foundationDB metastore--&gt;</span><br><span class="line">&lt;catalog_service&gt;</span><br><span class="line">    &lt;!--TODO: move name_space into catalog_service tag --&gt;</span><br><span class="line">    &lt;!--Metastore storage type, support `bytekv` and `fdb`--&gt;</span><br><span class="line">    &lt;type&gt;fdb&lt;/type&gt;</span><br><span class="line">    &lt;fdb&gt;</span><br><span class="line">        &lt;cluster_file&gt;/path/to/fdb/cluster_config&lt;/cluster_file&gt;</span><br><span class="line">    &lt;/fdb&gt;</span><br><span class="line">&lt;/catalog_service&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="HDFS-配置参数"><a href="#HDFS-配置参数" class="headerlink" title="HDFS  配置参数"></a>HDFS  配置参数</h2><p>启动服务时，会按照 cfs_addr&gt;hdfs_addr&gt;hdfs_ha_nameservice&gt;hdfs_nnproxy 的顺序来检测配置项，一但其中某个配置项配置则使用对应的配置项来访问 HDFS</p><h3 id="hdfs-user"><a href="#hdfs-user" class="headerlink" title="hdfs_user"></a>hdfs_user</h3><p>访问 HDFS 时默认使用的用户的名称，默认 clickhouse</p><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;hdfs_user&gt;clickhouse&lt;/hdfs_user&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="cfs-addr"><a href="#cfs-addr" class="headerlink" title="cfs_addr"></a>cfs_addr</h3><p>cfs 服务的地址，格式为 cfs:&#x2F;&#x2F;service_url</p><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;cfs_addr&gt;cfs://service_url&lt;/cfs_addr&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="hdfs-addr"><a href="#hdfs-addr" class="headerlink" title="hdfs_addr"></a>hdfs_addr</h3><p>hdfs 服务的地址，格式为 hdfs:&#x2F;&#x2F;nnip:nnport&#x2F;path</p><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;hdfs_addr&gt;hdfs://nnip:nnport/path&lt;/hdfs_addr&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="hdfs-ha-nameservice"><a href="#hdfs-ha-nameservice" class="headerlink" title="hdfs_ha_nameservice"></a>hdfs_ha_nameservice</h3><p>hdfs 服务的名称，需要在 libhdfs3 的配置文件中提前配置好</p><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;hdfs_ha_nameservice&gt;hdfs_service&lt;/hdfs_ha_nameservice&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="hdfs-nnproxy"><a href="#hdfs-nnproxy" class="headerlink" title="hdfs_nnproxy"></a><del>hdfs_nnproxy</del></h3><p><del>访问~~~~HDFS~~~~时默认使用的 nnproxy 名称，默认 nnproxy</del></p><p><del>Example:</del></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~~&lt;hdfs_nnproxy&gt;nnproxy&lt;/hdfs_nnproxy&gt;~~</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="storage-configuration"><a href="#storage-configuration" class="headerlink" title="storage_configuration"></a>storage_configuration</h3><ol><li>接下来的配置层级与配置文件中 storage_configuration 配置层级一一对应</li></ol><ul><li>storage_configuration</li><li>cnch_default_policy，指定 CNCH 存储实际数据所使用的 StoragePolicy，可选配置项，默认是 cnch_default_hdfs，这个 StoragePolicy 中应当仅包含 HDFSDisk</li><li>当建表的时候，对于 CNCH 表，如果没有指定 storage_policy 这个 MergeTreeSettings，则会被默认修改为 ${cnch_default_policy}</li><li>cnch_auxility_policy，指定 CNCH 在本地磁盘上存储临时数据所使用的 StoragePolicy，可选配置项，默认是 default</li><li>disks</li><li>${DISK_NAME}</li><li>type，这个磁盘的类型，可选配置项，默认是 local</li><li>CNCH 支持选用 hdfs&#x2F;bytehdfs 这两种磁盘作为远端存储，目前该 StoragePolicy 中仅支持单个 Disk</li><li>为了与内部的配置兼容，hdfs&#x2F;bytehdfs 均解析为内部的 bytehdfs 这种 Disk，社区版本的 HDFSDisk 的 type 被重命名为 communityhdfs</li><li>CNCH 所使用的 StoragePolicy 所指定的 HDFSDisk，其配置项在所有的 Server&#x2F;Worker 的配置文件中都应当相同</li><li>path</li><li>数据将被存储在这个 Disk 的哪个路径中，必需的配置项</li><li>hdfs_params</li><li>针对 bytehdfs 类型的磁盘所新增的可选配置项，包含如下参数</li><li>hdfs_user，连接 hdfs 所使用的 user，可选配置项，默认是 clickhouse</li><li>cfs_addr，cfs 的地址，可选配置项，仅在使用 cfs 时需要配置此配置项</li><li>hdfs_addr，hdfs 的 namenode 的地址，可选配置项，如 hdfs:&#x2F;&#x2F;nnip:nnport&#x2F;path</li><li>hdfs_ha_nameservice，可选配置项，如果需要使用 hdfs 的 HA，可以使用该配置项指定对应的 service，对应的 hdfs 配置需要通过 hdfs3_config 配置文件来配置</li><li>hdfs_nnproxy，hdfs 的 nnproxy 的地址，可选配置项，默认是 nnproxy</li><li>如果 DiskByteHDFS 没有配置 hdfs_params 配置项，则会去配置文件中找到全局的配置项，例如配置文件中 hdfs_user 这个配置项的值</li><li>policies</li><li>${STORAGE_POLICY_NAME}</li><li>volumes</li><li>${VOLUME_NAME}</li><li>default，这个 Volume 中的默认磁盘，必需的配置项，默认的磁盘会被用来存放部分不支持多盘存储的数据，例如 metastore 等</li><li>disk，这个 Volume 所包含的所有磁盘名称，必需的配置项，对应 Disk 需要在 storage_configuration.disks 中配置好</li></ul><ol><li>配置示例</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;storage_configuration&gt;</span><br><span class="line">    &lt;disks&gt;</span><br><span class="line">        &lt;default&gt;&lt;/default&gt;</span><br><span class="line">        &lt;server_local_disk1&gt;</span><br><span class="line">            &lt;path&gt;/home/ch_test_service/service_test_env/server_data1/&lt;/path&gt;</span><br><span class="line">        &lt;/server_local_disk1&gt;</span><br><span class="line">        &lt;server_local_disk2&gt;</span><br><span class="line">            &lt;path&gt;/home/ch_test_service/service_test_env/server_data2/&lt;/path&gt;</span><br><span class="line">        &lt;/server_local_disk2&gt;</span><br><span class="line">        &lt;server_hdfs_disk0&gt;</span><br><span class="line">            &lt;path&gt;/user/cnch/&lt;/path&gt;</span><br><span class="line">            &lt;type&gt;bytehdfs&lt;/type&gt;</span><br><span class="line">        &lt;/server_hdfs_disk0&gt;</span><br><span class="line">    &lt;/disks&gt;</span><br><span class="line">    &lt;policies&gt;</span><br><span class="line">        &lt;default&gt;</span><br><span class="line">            &lt;volumes&gt;</span><br><span class="line">                &lt;local&gt;</span><br><span class="line">                    &lt;default&gt;default&lt;/default&gt;</span><br><span class="line">                    &lt;disk&gt;default&lt;/disk&gt;</span><br><span class="line">                    &lt;disk&gt;server_local_disk1&lt;/disk&gt;</span><br><span class="line">                    &lt;disk&gt;server_local_disk2&lt;/disk&gt;</span><br><span class="line">                &lt;/local&gt;</span><br><span class="line">            &lt;/volumes&gt;</span><br><span class="line">        &lt;/default&gt;</span><br><span class="line">        &lt;cnch_default_hdfs&gt;</span><br><span class="line">            &lt;volumes&gt;</span><br><span class="line">                &lt;hdfs&gt;</span><br><span class="line">                    &lt;default&gt;server_hdfs_disk0&lt;/default&gt;</span><br><span class="line">                    &lt;disk&gt;server_hdfs_disk0&lt;/disk&gt;</span><br><span class="line">                &lt;/hdfs&gt;</span><br><span class="line">            &lt;/volumes&gt;</span><br><span class="line">        &lt;/cnch_default_hdfs&gt;</span><br><span class="line">    &lt;/policies&gt;</span><br><span class="line">&lt;/storage_configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>为了兼容内部旧版本的配置项，如果用户仅指定了 default 这一个 StoragePolicy，同时包含 hdfs 和 local 这两个 volume，那么这个配置项会被解析成两个 StoragePolicy，一个是 default，但是仅包含 local 这个 volume，另一个是 ${cnch_default_policy}，仅包含 hdfs 这个 volume</li></ol><h3 id="hdfs3-config"><a href="#hdfs3-config" class="headerlink" title="hdfs3_config"></a>hdfs3_config</h3><p>libhdfs3 配置文件路径</p><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;hdfs3_config&gt;/path/to/conf/hdfs3.xml&lt;/hdfs3_config&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="disk-cache-strategies"><a href="#disk-cache-strategies" class="headerlink" title="disk_cache_strategies"></a>disk_cache_strategies</h3><p>配置 disk cache 策略，包括策略 simple 和 lru 两种不同策略：</p><ul><li><strong>lru</strong>，LRUCache 淘汰策略相关配置</li><li>lru_max_size，DiskCache 最大的大小，默认 2T</li><li>random_drop_threshold，Cache 队列有长度限制，当队列长度到达一定比例后会按一定几率开始丢弃 Cache 请求来避免大表 Scan 导致 Cache 队列被占满，默认 50%</li><li><strong>simple</strong>，Cache 策略相关配置</li><li>segment_size，DiskCache 的粒度，默认 8192，及将一个 ColumnStream 的最多 8192 个 GranuleCache 成一个 DiskCacheSegment</li><li>hits_to_cache，数据开始 Cache 的阈值，默认为 2</li></ul><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;disk_cache_strategies&gt;</span><br><span class="line">    &lt;simple&gt;</span><br><span class="line">        &lt;lru_max_size&gt;1099511627776&lt;/lru_max_size&gt;</span><br><span class="line">    &lt;/simple&gt;</span><br><span class="line">&lt;/disk_cache_strategies&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="cnch-kafka-log"><a href="#cnch-kafka-log" class="headerlink" title="cnch_kafka_log"></a>cnch_kafka_log</h3><p>配置后，CNCH 将开启 kafka_log, 可通过系统表查看消费日志</p><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;cnch_kafka_log&gt;</span><br><span class="line">    &lt;database&gt;cnch_system&lt;/database&gt;</span><br><span class="line">    &lt;table&gt;cnch_kafka_log&lt;/table&gt;</span><br><span class="line">    &lt;flush_max_row_count&gt;10000&lt;/flush_max_row_count&gt;</span><br><span class="line">    &lt;flush_interval_milliseconds&gt;7500&lt;/flush_interval_milliseconds&gt;</span><br><span class="line">&lt;/cnch_kafka_log&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="brpc"><a href="#brpc" class="headerlink" title="brpc"></a>brpc</h3><h3 id="cnch-transaction-cleaner-max-threads"><a href="#cnch-transaction-cleaner-max-threads" class="headerlink" title="cnch_transaction_cleaner_max_threads"></a>cnch_transaction_cleaner_max_threads</h3><p>CNCH 后台清理 transaction record 的线程池大小，默认 128</p><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;cnch_transaction_cleaner_max_threads&gt;128&lt;/cnch_transaction_cleaner_max_threads&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="cnch-transaction-cleaner-queue-size"><a href="#cnch-transaction-cleaner-queue-size" class="headerlink" title="cnch_transaction_cleaner_queue_size"></a>cnch_transaction_cleaner_queue_size</h3><p>CNCH 后台清理 transaction record 的线程池队列大小，默认 10000</p><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;cnch_transaction_cleaner_queue_size&gt;10000&lt;/cnch_transaction_cleaner_queue_size&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="dance-merge-selector"><a href="#dance-merge-selector" class="headerlink" title="dance_merge_selector"></a>dance_merge_selector</h3><p>配置自研 merge 选择策略参数</p><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dance_merge_selector&gt;</span><br><span class="line">    &lt;max_total_rows_to_merge&gt;10000000&lt;/max_total_rows_to_merge&gt;</span><br><span class="line">&lt;/dance_merge_selector&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="exchange-timeout-ms"><a href="#exchange-timeout-ms" class="headerlink" title="exchange_timeout_ms"></a>exchange_timeout_ms</h3><p>复杂查询数据传输 rpc 超时，默认 100000</p><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;exchange_timeout_ms&gt;100000&lt;/exchange_timeout_ms&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h3><p>配置 zookeeper （可选）， 当使用 clickhouse keeper 时需要配置为空</p><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;zookeeper&gt;&lt;/zookeeper&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="TSO-配置参数"><a href="#TSO-配置参数" class="headerlink" title="TSO 配置参数"></a>TSO 配置参数</h2><h3 id="tso-service"><a href="#tso-service" class="headerlink" title="tso_service"></a>tso_service</h3><p>配置 tso 服务，包括服务端口，元数据存储，keeper 等</p><p>Keys:</p><ul><li><strong>port</strong>:  TSO 服务 TCP 端口</li><li><strong>keeper</strong>:  tso，server_master 等组件 leader 选举服务</li><li><strong>type</strong>:  TSO 元数据存储引擎</li></ul><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;tso_service&gt;</span><br><span class="line">    &lt;port&gt;8080&lt;/port&gt;</span><br><span class="line">    &lt;keeper&gt;</span><br><span class="line">        &lt;port&gt;2181&lt;/port&gt;</span><br><span class="line">    &lt;/keeper&gt;</span><br><span class="line">    &lt;!-- Support for CNCH-CE Merge. Metastore store type, support `bytekv` and `fdb` --&gt;</span><br><span class="line">    &lt;type&gt;fdb&lt;/type&gt;</span><br><span class="line">    &lt;fdb&gt;</span><br><span class="line">        &lt;cluster_file&gt;/path/to/fdb/conf/fdb.cluster&lt;/cluster_file&gt;&gt;</span><br><span class="line">    &lt;/fdb&gt;</span><br><span class="line"> &lt;/tso_service&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="keeper-server"><a href="#keeper-server" class="headerlink" title="keeper_server"></a>keeper_server</h3><ul><li>path: keeper 数据存储路径</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;path&gt;/var/lib/tso_server/keeper/&lt;/path&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>keeper_server</li><li>tcp_port：keeper 服务的 tcp 端口</li><li>server_id：keeper 内部 leader 选举的 id，需要是 int 类型</li><li>log_storage_path：keeper log 存储路径</li><li>snapshot_storage_path：keeper snapshot 存储路径</li><li>coordination_settings：支持定制化 keeper settings</li><li>raft_configuration：可选，支持从配置文件读取 keeper 节点。如使用服务发现读取 keeper 节点，则不能配置该配置项</li><li>id: 同上 server_id</li><li>hostname: ip 地址</li><li>port: keeper 内部通信 port，与 tcp_port 不同</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;keeper_server&gt;</span><br><span class="line">    &lt;tcp_port&gt;9181&lt;/tcp_port&gt;</span><br><span class="line">    &lt;server_id&gt;1&lt;/server_id&gt;</span><br><span class="line">    &lt;log_storage_path&gt;/var/lib/tso_server/keeper/log&lt;/log_storage_path&gt;</span><br><span class="line">    &lt;snapshot_storage_path&gt;/var/lib/tso_server/keeper1/snapshots&lt;/snapshot_storage_path&gt;</span><br><span class="line"></span><br><span class="line">    &lt;coordination_settings&gt;</span><br><span class="line">        &lt;operation_timeout_ms&gt;10000&lt;/operation_timeout_ms&gt;</span><br><span class="line">        &lt;session_timeout_ms&gt;30000&lt;/session_timeout_ms&gt;</span><br><span class="line">        &lt;raft_logs_level&gt;warning&lt;/raft_logs_level&gt;</span><br><span class="line">        &lt;compress_logs&gt;0&lt;/compress_logs&gt;</span><br><span class="line">    &lt;/coordination_settings&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    &lt;raft_configuration&gt;</span><br><span class="line">        &lt;server&gt;</span><br><span class="line">            &lt;id&gt;1&lt;/id&gt;</span><br><span class="line">            &lt;hostname&gt;host0&lt;/hostname&gt;</span><br><span class="line">            &lt;port&gt;9445&lt;/port&gt;</span><br><span class="line">        &lt;/server&gt;</span><br><span class="line">        &lt;server&gt;</span><br><span class="line">            &lt;id&gt;2&lt;/id&gt;</span><br><span class="line">            &lt;hostname&gt;host1&lt;/hostname&gt;</span><br><span class="line">            &lt;port&gt;9445&lt;/port&gt;</span><br><span class="line">        &lt;/server&gt;</span><br><span class="line">        &lt;server&gt;</span><br><span class="line">            &lt;id&gt;3&lt;/id&gt;</span><br><span class="line">            &lt;hostname&gt;host2&lt;/hostname&gt;</span><br><span class="line">            &lt;port&gt;9445&lt;/port&gt;</span><br><span class="line">        &lt;/server&gt;</span><br><span class="line">    &lt;/raft_configuration&gt;</span><br><span class="line">--&gt;</span><br><span class="line">&lt;/keeper_server&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>zookeeper</li></ul><p>配置 zookeeper 以启用 leader election，也可通过服务发现来获取 zookeeper 的节点信息，在这种情况下，需要配置一个空的 zookeeper 标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;zookeeper&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    &lt;node index=&quot;1&quot;&gt;</span><br><span class="line">        &lt;host&gt;host0&lt;/host&gt;</span><br><span class="line">        &lt;port&gt;9181&lt;/port&gt;</span><br><span class="line">    &lt;/node&gt;</span><br><span class="line">    --&gt;</span><br><span class="line">&lt;/zookeeper&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="service-discovery"><a href="#service-discovery" class="headerlink" title="service_discovery"></a>service_discovery</h3><p>服务发现相关配置，高可用 TSO 进程通过服务发现获取其他 TSO server 地址及端口进行通信</p><p>Keys:</p><ul><li><strong>mode</strong> : 与其他模块 service discovery 一样，支持 dns, consul, local 等模式</li></ul><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;service_discovery&gt;</span><br><span class="line">    &lt;mode&gt;dns&lt;/mode&gt;</span><br><span class="line">    &lt;tso&gt;</span><br><span class="line">        &lt;psm&gt;data.cnch.tso&lt;/psm&gt;</span><br><span class="line">        &lt;service&gt;cnch-tso&lt;/service&gt;</span><br><span class="line">        &lt;headless_service&gt;cnch-tso-headless&lt;/headless_service&gt;</span><br><span class="line">    &lt;/tso&gt;</span><br><span class="line">&lt;/service_discovery&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Daemon-Manager-配置参数"><a href="#Daemon-Manager-配置参数" class="headerlink" title="Daemon Manager 配置参数"></a>Daemon Manager 配置参数</h2><h3 id="daemon-manager"><a href="#daemon-manager" class="headerlink" title="daemon_manager"></a>daemon_manager</h3><p>配置 daemon manager 进程端口以及调度后台任务的信息</p><p>Keys:</p><ul><li>port:  DM 进程 TCP 端口</li><li>http: DM 进程 http 端口等配置</li><li>workload_thread_interval_ms: 后台任务调度的时间间隔</li><li>daemon_jobs: DM 负责调度的后台任务类型及配置。可调度的任务类型包括：PART_GC, PART_MERGE, CONSUMER, GLOBAL_GC, TXN_GC 等</li></ul><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;daemon_manager&gt;</span><br><span class="line">    &lt;port&gt;8090&lt;/port&gt;</span><br><span class="line">    &lt;http&gt;</span><br><span class="line">        &lt;port&gt;8091&lt;/port&gt;</span><br><span class="line">        &lt;receive_timeout&gt;1800&lt;/receive_timeout&gt;</span><br><span class="line">        &lt;send_timeout&gt;1800&lt;/send_timeout&gt;</span><br><span class="line">    &lt;/http&gt;</span><br><span class="line">    &lt;workload_thread_interval_ms&gt;1000&lt;/workload_thread_interval_ms&gt;</span><br><span class="line">    &lt;daemon_jobs&gt;</span><br><span class="line">        &lt;job&gt;</span><br><span class="line">            &lt;name&gt;PART_GC&lt;/name&gt;</span><br><span class="line">            &lt;!-- Interval in millisecond --&gt;</span><br><span class="line">            &lt;interval&gt;10000&lt;/interval&gt;</span><br><span class="line">        &lt;/job&gt;</span><br><span class="line">        &lt;job&gt;</span><br><span class="line">            &lt;name&gt;PART_MERGE&lt;/name&gt;</span><br><span class="line">            &lt;!-- Interval in millisecond --&gt;</span><br><span class="line">            &lt;interval&gt;10000&lt;/interval&gt;</span><br><span class="line">        &lt;/job&gt;</span><br><span class="line">        &lt;job&gt;</span><br><span class="line">            &lt;name&gt;CONSUMER&lt;/name&gt;</span><br><span class="line">            &lt;!-- Interval in millisecond --&gt;</span><br><span class="line">            &lt;interval&gt;10000&lt;/interval&gt;</span><br><span class="line">        &lt;/job&gt;</span><br><span class="line">        &lt;job&gt;</span><br><span class="line">            &lt;name&gt;GLOBAL_GC&lt;/name&gt;</span><br><span class="line">            &lt;!-- Interval in millisecond --&gt;</span><br><span class="line">            &lt;interval&gt;50000&lt;/interval&gt;</span><br><span class="line">        &lt;/job&gt;</span><br><span class="line">        &lt;job&gt;</span><br><span class="line">            &lt;name&gt;TXN_GC&lt;/name&gt;</span><br><span class="line">            &lt;!-- Interval in millisecond --&gt;</span><br><span class="line">            &lt;interval&gt;600000&lt;/interval&gt;</span><br><span class="line">        &lt;/job&gt;</span><br><span class="line">        &lt;job&gt;</span><br><span class="line">            &lt;name&gt;DEDUP_WORKER&lt;/name&gt;</span><br><span class="line">            &lt;!-- Interval in millisecond --&gt;</span><br><span class="line">            &lt;interval&gt;10000&lt;/interval&gt;</span><br><span class="line">        &lt;/job&gt;</span><br><span class="line">        &lt;job&gt;</span><br><span class="line">            &lt;name&gt;PART_CLUSTERING&lt;/name&gt;</span><br><span class="line">            &lt;!-- Interval in millisecond --&gt;</span><br><span class="line">            &lt;interval&gt;10000&lt;/interval&gt;</span><br><span class="line">        &lt;/job&gt;</span><br><span class="line">    &lt;/daemon_jobs&gt;</span><br><span class="line">&lt;/daemon_manager&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="cnch-data-retention-time-in-sec"><a href="#cnch-data-retention-time-in-sec" class="headerlink" title="cnch_data_retention_time_in_sec"></a>cnch_data_retention_time_in_sec</h3><p>被删除的表及数据库在被彻底清理之前的保留时间，默认 3 天。期间内，用户可以恢复已经删除的数据。</p><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;cnch_data_retention_time_in_sec&gt;86400&lt;/cnch_data_retention_time_in_sec&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Resource-Manager-配置参数"><a href="#Resource-Manager-配置参数" class="headerlink" title="Resource Manager 配置参数"></a>Resource Manager 配置参数</h2><h3 id="resource-manager"><a href="#resource-manager" class="headerlink" title="resource_manager"></a>resource_manager</h3><p>配置 resource manager 进程端口、初始 VW 配置等信息。</p><p>Keys：</p><ul><li>**port: **服务启动的端口号</li><li>**vws: **初始配置的 VW 相关信息</li></ul><p>Example：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;resource_manager&gt;</span><br><span class="line">    &lt;port&gt;18989&lt;/port&gt;</span><br><span class="line">    &lt;vws&gt;</span><br><span class="line">        &lt;vw&gt;</span><br><span class="line">            &lt;name&gt;vw_default&lt;/name&gt;</span><br><span class="line">            &lt;type&gt;Default&lt;/type&gt;</span><br><span class="line">            &lt;num_workers&gt;1&lt;/num_workers&gt;</span><br><span class="line">            &lt;worker_groups&gt;</span><br><span class="line">                &lt;worker_group&gt;</span><br><span class="line">                    &lt;name&gt;wg_default&lt;/name&gt;</span><br><span class="line">                    &lt;type&gt;Physical&lt;/type&gt;</span><br><span class="line">                &lt;/worker_group&gt;</span><br><span class="line">            &lt;/worker_groups&gt;</span><br><span class="line">        &lt;/vw&gt;</span><br><span class="line">    &lt;/vws&gt;</span><br><span class="line">&lt;/resource_manager&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="catalog"><a href="#catalog" class="headerlink" title="catalog"></a>catalog</h3><p>Catalog 相关配置。</p><p>Keys:</p><ul><li>name_space</li></ul><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;name_space&gt;default&lt;/name_space&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="catalog-service"><a href="#catalog-service" class="headerlink" title="catalog_service"></a>catalog_service</h3><p>catalog_service 相关配置。</p><p>Keys:</p><ul><li><strong>type</strong> - catalog 服务的类型</li></ul><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- For foundationDB metastore--&gt;</span><br><span class="line">&lt;catalog_service&gt;</span><br><span class="line">    &lt;!--TODO: move name_space into catalog_service tag --&gt;</span><br><span class="line">    &lt;!--Metastore storage type, support `bytekv` and `fdb`--&gt;</span><br><span class="line">    &lt;type&gt;fdb&lt;/type&gt;</span><br><span class="line">    &lt;fdb&gt;</span><br><span class="line">        &lt;cluster_file&gt;/path/to/fdb/cluster_config&lt;/cluster_file&gt;</span><br><span class="line">    &lt;/fdb&gt;</span><br><span class="line">&lt;/catalog_service&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> Getting_Started </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事物和并发控制</title>
      <link href="/zh-cn/docs/%E9%AB%98%E7%BA%A7%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E4%BA%8B%E7%89%A9%E5%92%8C%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/"/>
      <url>/zh-cn/docs/%E9%AB%98%E7%BA%A7%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E4%BA%8B%E7%89%A9%E5%92%8C%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="事物和并发控制"><a href="#事物和并发控制" class="headerlink" title="事物和并发控制"></a>事物和并发控制</h1><h3 id="事务概览"><a href="#事务概览" class="headerlink" title="事务概览"></a>事务概览</h3><p>在 ByConity (曾用内部代号 CNCH) 里，为了保证数据质量，我们提供了事务语义的支持。每条 SQL 语句都会转换为一个事务去执行，事务提供了原子性、一致性、隔离性和持久性 (ACID) 属性的保证，旨在在并发读写，软件异常，硬件异常等各种情况下仍然可以保证数据的正确性和完整性。</p><ul><li>原子性（Atomicity）保证每一个事物被视为一个单元，事物要么完全成功要么彻底失败。在事务成功之前，写入的数据不可见，不会出现部分数据可见的情况。事物失败之后，会把写入的部分数据自动清理掉，不会导致垃圾数据的残留。ByConity 在各种情况下等会保证原子性，包括掉电，错误和宕机等各种异常情况。</li><li>一致性（Consistency）保证数据库只会从一个有效的状态变成另外一个有效的状态，任何数据的写入必须遵循已经定义好的规则。</li><li>隔离性（Isolation）确保数据库 SQL 并发执行（例如，同一时刻读写同一张表）的正确性，确保数据库的状态在并发场景下能等价于某种顺序执行的状态，事务之间互不影响。隔离性是并发控制的目标，可以有多种隔离级别的实现，ByConity 为用户提供的是 read committed（rc）隔离级别的支持。未完成的事务的写入对于其他事务是不可见的。</li><li>持久性（Durability）保证数据的高可用性。一旦事务成功提交，其写入的数据会被持久化，及时在出现各种系统 failure 的情况下不丢失。ByConity 采取的存储计算分离结构，利用了成熟的高可用分布式文件系统或者对象存储（例如 hdfs，S3），保证成功事务所提交数据的高可用。</li></ul><h3 id="元数据存储选型"><a href="#元数据存储选型" class="headerlink" title="元数据存储选型"></a>元数据存储选型</h3><p>ByConity 是一款分析型数据库（OLAP），与传统的关系型数据库（OLTP）在事务上的需求是不同。分析型在事务上的诉求是针对高吞吐低延迟的场景；相反，OLTP 数据库的诉求是面向高 QPS 实时的场景。</p><p>除了基本的 ACID 属性需要保证，ByConity 在事务实现选型上主要有 3 个特别的需求。首先，ByConity 单个事务可能涉及到海量数据（例如，上亿行级别），事务对数据吞吐和写入性能有较高要求，并且需要保证其原子性；其次，分析型数据库的 workload 中读的比例高于写，事务需要保证读 workload 不会被写 workload 影响和阻塞；最后，事务需要具备灵活可控的并发控制的功能，ByConity 里除了需要处理用户侧并发的 workload，还需要处理并发的后台任务。</p><p>ByConity 的事务处理主要是对用户数据的元数据进行管理，元数据包括用户的 db（数据库元数据），table（数据表元数据）和 part（part 是数据文件的元数据，包括了 part 名字，columns，行数，状态，版本，提交时间等信息）。随着数据的增长，元数据本身数量级也会线性增长，不能丢失并且需要高可用，所以需要一个分布式存储或分布式数据库的方案。我们选择了成熟的分布式 Key-value 数据库 作为 ByConity 中上述元数据的存储方案，通过抽象元数据读写 API，后端适配苹果公司开发的 FoundationDB。</p><h3 id="分布式时钟"><a href="#分布式时钟" class="headerlink" title="分布式时钟"></a>分布式时钟</h3><p>事务在分布式系统中的执行需要在分布式不同节点中进行时钟同步。ByConity 采取了简单实用的 Timestamp Oracle（TSO）方案。其优点首先简单易懂，采取中心授时，能够确定唯一时间。然后是性能好，通常一个 tso 节点能支持 1m+ 的 QPS。缺点是不适合跨数据中心的场景，所有事务从 TSO 获取时间延迟较高。由于 TSO 是中心化授时方案，ByConity 为其提供了高可用服务。</p><p>TSO 使用混合逻辑时钟，时钟由物理部分和逻辑部分组成，64 位表示一个时间。为了避免 TSO 宕机导致的时间戳丢失，需要对时间戳持久化。但是如果每次授时都持久化将会降低性能，所以 TSO 会预申请一个可分配的时间窗口（例如 3s）申请成功之后，TSO 可以在内存中直接分配 3 秒窗口之内的所有时间戳。客户端请求时间戳，逻辑时钟部分随着请求递增。如果出现逻辑部分溢出情况，会睡眠 50ms 等待物理时钟被推进。TSO 会每 50ms 检查时钟，如果当前 TSO 的物理时钟已经落后于当前时间，需要更新 TSO 的物理时钟部分为当前物理时间。如果逻辑时钟部分过半，也会增加 TSO 的物理时钟，一旦物理时钟增长，逻辑时钟清零。如果当前时间窗口已经用完，需要申请下一个时间窗口。同时更新持久化的窗口上界。</p><p><img src="/static/boxcnIQ0kKkzfdE6l3QnZZ31iGb.png"></p><h3 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h3><ul><li>Atomicity（原子性）</li></ul><p>ByConity 单个事务在元数据管理上有高吞吐读写的需求，由于分布式 key-value 数据库（例如 FoundationDB）对单次原子写入的 value 都有大小限制（例如 10MB），ByConity 自己在分布式 key-value 存储之后实现了 2 阶段，使得单次写入大小不受限并且更加灵活可控。在第一阶段可以分批多次写入任意数据，并且不可见。第二阶段对事务进行提交，提交成功之后所有写入的数据同时可见。下面以一个 insert sql 为例，描述了 2 阶段原子提交的一个详细流程。</p><ul><li>阶段 1</li><li><ol><li>a: 在 kv 里写入事务记录（txn record），唯一标识当前事务；</li></ol></li><li><ol><li>b: 解析 insert sql 并执行；</li></ol></li><li><ol><li>c: 在远端文件系统或者对象存储写入数据之前，先把要写入数据的位置信息写入 undo buffer（供失败情况下清理使用）；</li></ol></li><li><ol><li>d: 把数据写入到远端文件系统或者对象存储；</li></ol></li><li><ol><li>e: 提交数据的元信息 part，写入到 kv 中；</li></ol></li><li>阶段 2</li><li>提交事务，并更新事务记录的提交时间；</li><li>异步更新 part 数据的提交时间为事务的提交时间（part 未更新提交时间之前，需要反查事务记录的提交时间）；</li></ul><p><img src="/static/boxcnSsWWnS2sH5qiwBsILZyaNg.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">事务提交详细流程图</span><br></pre></td></tr></table></figure><ul><li>Consistency（一致性）</li></ul><p>ByConity 选择的分布式 key-value 存储系统，ByteKV 和 Foundation 已经提供了一致性的支持，直接复用即可。</p><ul><li>Isolation（隔离性）</li></ul><p>ByConity 对用户提供 Read Committed（RC）隔离级别的支持。每个事务初始化的时候会从 TSO 服务获取一个时间戳（timestamp）作为其 ID 和开始时间，提交的时候会再从 TSO 服务获取一个提交时间，在事务提交的时候更新 KV 里事务记录的提交时间并异步更新 part 的提交时间。读事务可以读取到已经提交成功（对应事务提交即成功）并且提交时间小于读事务开始时间的 part 元数据信息，从而实现 RC 语意。相比更加严格的隔离级别，RC 隔离级别可以最大化读性能。而更严格的隔离级别例如 Serializable Snapshot Isolation（SSI），读可能会被写入 block。</p><ul><li>Durability（持久性）</li></ul><p>ByConity 元数据持久到 FoundationDB 中，分布式 Key-value 存储的特性提供了持久化和高可用的保障。</p><h3 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h3><p>ByConity 利用多版本和锁来保证并发读写场景下数据的正确性。ByConity 除了来自用户的 workload，内部还有后台任务（merge&#x2F;alter 任务和唯一键表的去重任务）的并发读写需要处理。ByConity 选择了 RC 隔离级别，对于新的写入（例如 insert），由于不可见，可以无锁执行。对于已有数据，在并发读写时，需要进行并发控制。对于并发读和写这种场景，ByConity 利用多版本解决了读和写冲突，提供了读写性能。对于并发写写的场景（例如 merge 和唯一键表的去重任务），利用了加锁来保证数据的正确性。</p><h4 id="多版本"><a href="#多版本" class="headerlink" title="多版本"></a>多版本</h4><p>每个 part 的元数据除去其原有基本信息之外，都有一个对应的版本（version），每次对已有数据进行变更，都会产生一个新的版本，而不是直接在原有数据上进行更新。对于 RC 隔离级别，已经开始的读事务，仍然继续读取旧的版本，新版本对其不可见，这样读和写互相不影响，最大化读写性能。</p><p><img src="/static/boxcnJmeAgBLo86uZBHIHKbdRhc.png"></p><h4 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h4><ul><li>分布式 KV 锁</li></ul><p>ByConity 对于 DDL 提供了全局 KV 排他锁避免并发的对 table schema 进行变更，分布式 kv 锁是全局共享，不同的节点都可以共享。</p><ul><li>内存读写锁</li><li>支持共享锁和排他锁</li><li>支持等待</li><li>支持不同粒度</li></ul><p>ByConity 提供了多级细粒度 DML 读写锁的支持，DML 相关的任务可以根据需求在不同粒度持不同类型的锁。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">     Table</span><br><span class="line">    /      \</span><br><span class="line">   bucket   \</span><br><span class="line">   /         \</span><br><span class="line">partition   partition</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><p>ByConity 对于不可见的 part 和版本会定期进行回收，例如 merge 任务生成新的 part 之后，对于旧的 part，当不再被查询引用之后，就会进行回收，释放空间，降低成本。</p>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> Advanced </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>列存设计原理</title>
      <link href="/zh-cn/docs/%E9%AB%98%E7%BA%A7%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E5%88%97%E5%AD%98%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/"/>
      <url>/zh-cn/docs/%E9%AB%98%E7%BA%A7%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E5%88%97%E5%AD%98%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="列存设计原理"><a href="#列存设计原理" class="headerlink" title="列存设计原理"></a>列存设计原理</h1><p>通常事务型数据库采用行存便于支持事务和高并发读写，分析型数据库采用列存减少 IO 和便于压缩。ByConity 采用列存的方式，保证读写性能、支持事务一致性，又适用大规模的数据计算。</p><h3 id="Data-Layout"><a href="#Data-Layout" class="headerlink" title="Data Layout"></a>Data Layout</h3><p>表数据物理上按 Partition Key 切分为多个 Parts 存储在统一的云存储的逻辑存储路径下，每个 Part 的大小有数据量和行数限制，计算组根据服务节点分配的策略（预先分配和实时分配）获得其对应的部分 parts。</p><h3 id="Part-Delta"><a href="#Part-Delta" class="headerlink" title="Part Delta"></a>Part Delta</h3><p>Part 数据最初构建之后是一个行列混合存储的 Part 数据文件，随着 DML&#x2F;数据字典&#x2F;Bitmap index 等构建工作的进行 Part 存在增量数据，这部分数据可以有以下两种存储方式：</p><ol><li>每次构建都会 Rewrite Part 数据</li><li>生成增量数据，后台异步合并成一个大的 Part 文件</li></ol><p>方案一对整个集群的可用性可能会有一定的影响：</p><ol><li>每次 DML&#x2F;数据字典等构建都可能涉及到整个表 Parts 的全量 IO 操作，这个代价比较大。</li><li>构建时间比较长 DML 等操作会比较长的时间才能做完，对用户不友好，我们采用方案二。</li></ol><h3 id="Part-文件内容"><a href="#Part-文件内容" class="headerlink" title="Part 文件内容"></a>Part 文件内容</h3><p>part 数据分为两个部分：</p><p>一是整个 Part 包括 rows&#x2F;schema&#x2F;column data 在数据文件中的 Offset 等元信息，这部分信息持久化存储并被计算节点缓存</p><p>二是实际的数据信息，这部分信息包含实际的 column bin 数据&#x2F;column mrk 数据&#x2F;Map key bin&#x2F;Map key index&#x2F;数据字典数据&#x2F;bitmap index 数据等，数据按元信息中的 Offset 信息在 Part 的数据文件依次存储。</p><h3 id="Compaction"><a href="#Compaction" class="headerlink" title="Compaction"></a>Compaction</h3><p>ByConity 支持将一个 part 文件拆分为多个小文件，通过配置 Part 的最大 Size 和最大行数，Compact 之后的 Part 需要满足这个限制。</p><p>ByConity 中的 Compaction 是在全局做的，与前面提高的全局的 block ID 保持一致。</p>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> Advanced </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复杂查询模型和执行调优</title>
      <link href="/zh-cn/docs/%E9%AB%98%E7%BA%A7%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E5%A4%8D%E6%9D%82%E6%9F%A5%E8%AF%A2%E6%A8%A1%E5%9E%8B%E5%92%8C%E6%89%A7%E8%A1%8C%E8%B0%83%E4%BC%98/"/>
      <url>/zh-cn/docs/%E9%AB%98%E7%BA%A7%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E5%A4%8D%E6%9D%82%E6%9F%A5%E8%AF%A2%E6%A8%A1%E5%9E%8B%E5%92%8C%E6%89%A7%E8%A1%8C%E8%B0%83%E4%BC%98/</url>
      
        <content type="html"><![CDATA[<h1 id="复杂查询模型和执行调优"><a href="#复杂查询模型和执行调优" class="headerlink" title="复杂查询模型和执行调优"></a>复杂查询模型和执行调优</h1><h2 id="复杂查询执行模型"><a href="#复杂查询执行模型" class="headerlink" title="复杂查询执行模型"></a>复杂查询执行模型</h2><p><img src="/static/boxcnUIHT3GY66QcCm0sXdVUrxc.png"></p><p>**                                                     复杂查询执行模型图**</p><p>分析型查询可以分为简单查询和复杂查询，简单查询通常是单表检索聚合、大表与小表 Join 查询，查询响应快；复杂查询指的是有大表、多表关联和复杂的逻辑处理，通常查询响应慢消耗资源多。ByConity 在复杂查询上进行了优化设计。</p><p>简单的查询可以采用两阶段执行模型，计算节点上面执行的 partial 阶段，服务节点上面执行的 final 阶段，一旦我们需要执行一个复杂的多个聚合或者 join 和查询，两阶段的执行模型灵活性非常低，也让查询的优化变得棘手。为了更好的支持分布式查询，方便执行优化器产生的执行计划，我们引入了支持多轮分布式执行模式的复杂查询。</p><p>复杂查询的执行流程如下：</p><ul><li>Query SQL String 通过 parser 解析为 AST</li><li>对 AST 做改写和优化，产生执行计划</li><li>启用优化器的时候，通过优化器产生执行计划。</li><li>将执行计划切分为多个 PlanSegment</li><li>PlanSegment 即分布式执行过程中的一个执行片段，它包含</li><li>执行需要的 AST 片段，或者一个由 PlanNode 构成的逻辑执行计划片段</li><li>PlanSegment 执行的节点信息</li><li>PlanSegment 的上下游信息，这些信息包括上游的输入流，下游需要的输入流</li><li>引擎的调度器会将这些 PlanSegment 构成一个 DAG，然后按拓扑排序下发给集群中的所有节点</li><li>每个节点收到 PlanSegment 之后，开始驱动 PlanSegment 执行</li><li>包含数据源的 PlanSegment 开始读取数据，将数据按照一定的 shuffle 规则分发到下游的各个节点上</li><li>包含 exchange 输入的 PlanSegment 等待上游的数据，如果需要继续做 shuffle 则会继续将数据下发给各个节点</li><li>多轮 stage 完成之后，结果会返回到服务端</li></ul><h2 id="如何开启"><a href="#如何开启" class="headerlink" title="如何开启"></a>如何开启</h2><p>开启优化器会自动走复杂查询执行模型。通过配置 enable_optimizer&#x3D;1，或者 dialect_type&#x3D;’ANSI’ 可以开启。</p><ul><li>确定统计信息存在</li></ul><p>没有统计信息，生成的查询计划不是最优。<code>show stats [&lt;db_name&gt;.]&lt;table_name&gt;</code></p><ul><li>分析计划每一个 Step 的耗时</li></ul><p>通过 <code>explain analyze sql</code> 可以显示每一个 Step 的耗时</p><ul><li>Exchange 参数调优</li></ul><p>Exchange 算子负责 PlanSegment 之间的数据传输。</p><p><code>exchange_source_pipeline_threads</code> 影响 pipeline 执行的总线程数目，尤其是非 source 的 pipeline(指直接从存储读取数据的 pipeline)，目前默认设置为 CPU 核数，目前并没有一个理想推荐值，可以考虑&#x2F;2 或者*2 观察结果。如果查询内存占用较大，可以调小。</p><p><code>exchange_timeout_ms</code> Exhange 超时时间（ms)，默认为 100s，如果出现 Exchange 相关超时报错可以适当调大</p><p><code>exchange_unordered_output_parallel_size</code> 影响 exchange 输出数据的并发能力，默认为 8，一般不需要调整。如果 exchange_source_pipeline_threads 调整比较大，可以适当调大 exchange_unordered_output_parallel_size，增加上游输出能力。</p><p><code>exchange_enable_block_compress</code> 是否开启 exchange 压缩，默认开启，如果 CPU 瓶颈比网络明显，可以尝试关闭</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> Advanced </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>导入调优</title>
      <link href="/zh-cn/docs/%E9%AB%98%E7%BA%A7%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E5%AF%BC%E5%85%A5%E8%B0%83%E4%BC%98/"/>
      <url>/zh-cn/docs/%E9%AB%98%E7%BA%A7%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E5%AF%BC%E5%85%A5%E8%B0%83%E4%BC%98/</url>
      
        <content type="html"><![CDATA[<h1 id="导入调优"><a href="#导入调优" class="headerlink" title="导入调优"></a>导入调优</h1><h1 id="支持的导入方式"><a href="#支持的导入方式" class="headerlink" title="支持的导入方式"></a>支持的导入方式</h1><p>目前 CNCH 支持的导入方式有如下几种：</p><ul><li>INSERT INFILE</li><li>适合已经生成好数据文件的情况，在数据量较少的情况可以直接读取远程&#x2F;本地的数据文件导入 CNCH，数据量大的情况(超过数 GB)下建议走 PartWriter 和 Attach 的方式</li><li>INSERT VALUES</li><li>适合临时插入少量的数据用来测试</li><li>INSERT SELECT</li><li>适合需要保存某张表结果并供后续查询的情况</li><li>Dumper&amp;Attach</li><li>适合从本地版迁移到 CNCH 的情况，可以直接将整个集群的数据直接用 Dumper 写入 HDFS 中，再利用 Attach 将这些数据直接移动到 CNCH 中并进行查询</li><li>PartWriter&amp;Attach</li><li>对于数据量大且文件数量多的场景，可以利用 Spark 等任务用 PartWriter 将原始的文件生成新的 Part 文件，并写入 HDFS 中，随后可以利用 Attach 功能将数据移动到 CNCH 中并进行查询</li></ul><h1 id="调优手段"><a href="#调优手段" class="headerlink" title="调优手段"></a>调优手段</h1><h2 id="直接写入方式调优"><a href="#直接写入方式调优" class="headerlink" title="直接写入方式调优"></a>直接写入方式调优</h2><p>在使用 INSERT VALUES, INSERT INFILE 或者 PartWriter 工具写入时，最后生成的 Part 数量会影响写入 HDFS 的次数进而影响写入整体的耗时，因此应当尽量减少 Part 的数量。直接写入的流程如下：</p><ul><li>读取部分文件数据</li><li>将这部分数据按照 PartitionBy 进行切分</li><li>将这部分数据按照 ClusterBy 进行切分</li><li>将切分完的数据写成新的 Part 并写入 HDFS</li></ul><p>调优手段：</p><ol><li>为了减少 Part 的数量，我们可以将文件中具有相同的分区和 Bucket 的数据排列在一起，这样每次读取一些新的数据后，生成的 Part 数量会尽可能少。可以将数据按照分区相同，分区内 Bucket 相同的要求进行排序，Bucket 的计算规则是：</li></ol><ul><li>如果没有指定 SPLIT_NUMBER，会将 ClusterByKey 所使用的列计算 SipHash 后对 BucketNumber 取模得到 BucketNumber</li><li>如果指定了 SPLIT_NUMBER</li><li>计算 SplitValue</li><li>如果 ClusterBy 某一列，利用 dtspartition 函数计算出对应的 SplitValue</li><li>如果 ClusterBy 多列，则将这些列利用 SipHash 计算出对应的 SplitValue</li><li>计算 BucketNumber</li><li>如果是 WithRange，则用 SplitValue * BucketCount &#x2F; SplitNumber 计算对应 BucketNumber</li><li>如果不是 WithRange，则用 SplitValue % BucketCount 计算对应 BucketNumber</li></ul><ol><li>读取文件时</li><li>如果每行数据大小并不大，可以通过调大 max_insert_block_size 来一次读取更大的 Block，从而生成更大的 Part</li><li>如果读取的文件不是 HDFS&#x2F;CFS 的，同时使用通配符匹配了多个文件，也可以同时调大 min_insert_block_size_rows 和 min_insert_block_size_bytes</li></ol><h2 id="Dumper-方式调优"><a href="#Dumper-方式调优" class="headerlink" title="Dumper 方式调优"></a>Dumper 方式调优</h2><p>Dumper 迁移的时候可以一次指定一张表及其中的部分分区，将其写到 HDFS 中，这部分耗时与表的数据大小以及 Part 数量有关，可以使用 parallel 参数调大上传 Part 的并发，同时也可以等待 Part 在本地先 Merge 的比较充分后再使用 Dumper 进行上传。</p>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> Advanced </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查询优化器</title>
      <link href="/zh-cn/docs/%E9%AB%98%E7%BA%A7%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E5%99%A8/"/>
      <url>/zh-cn/docs/%E9%AB%98%E7%BA%A7%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="查询优化器"><a href="#查询优化器" class="headerlink" title="查询优化器"></a>查询优化器</h1><p>优化器是数据库系统的核心，优秀的优化器能极大提高查询性能，特别是在复杂查询场景下优化器能带来数倍至数百倍的性能提升。</p><p>ByConity 自研优化器基于四个大的优化方向提供极致优化能力：</p><ul><li>RBO：基于规则的优化能力。支持：列裁剪、分区裁剪、表达式简化、子查询解关联、谓词下推、冗余算子消除、Outer-JOIN 转 INNER-JOIN、算子下推存储、分布式算子拆分等常见的启发式优化能力。</li><li>CBO：基于代价的优化能力。支持：Join Reorder、Outer-Join Reorder、Join&#x2F;Agg Reorder、CTE、物化视图、Dynamic Filter 下推、Magic Set 等基于代价的优化能力。并且面向分布式计划融合了 Property Enforcement。</li><li>DBO：基于数据依赖的优化能力。支持：唯一键、functional dependency、Order dependency、Inclusion dependency 等基于数据依赖关系的优化能力。</li><li>HBO：基于查询反馈的优化能力。支持：基数估计动态调整、并行度动态调整、执行计划动态调整等基于历史执行反馈的优化能力。</li></ul><h1 id="Turn-on-Query-Optimizer"><a href="#Turn-on-Query-Optimizer" class="headerlink" title="Turn on Query Optimizer"></a>Turn on Query Optimizer</h1><p>set dialect_type &#x3D;’ANSI’ or set enable_optimizer &#x3D;1</p><p>If turn on ANSI mode, the optimizer will be turned on automatically.</p><h1 id="Commands-for-collecting-displaying-and-deleting-statistical-information"><a href="#Commands-for-collecting-displaying-and-deleting-statistical-information" class="headerlink" title="Commands for collecting, displaying and deleting statistical information"></a>Commands for collecting, displaying and deleting statistical information</h1><h2 id="Syntax-Definition"><a href="#Syntax-Definition" class="headerlink" title="Syntax Definition"></a>Syntax Definition</h2><ul><li>Subsequent versions will have automatic collection, update and analysis of statistical information</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- NOTE: ALL means currentDatabase().*</span><br><span class="line"></span><br><span class="line">--    specifying columns and sample config is supportted</span><br><span class="line">CREATE STATS [IF NOT EXISTS] (&lt;db&gt;.* | ALL | [&lt;db&gt;.]&lt;table&gt;[&#x27;(&#x27; &lt;col1&gt;, &lt;col2&gt;, ..., &lt;coln&gt; &#x27;)&#x27;]) [WITH (FULLSCAN | SAMPLE [&lt;rows&gt; ROWS] [&lt;ratio&gt; RATIO])] </span><br><span class="line"></span><br><span class="line">-- Delete statistics</span><br><span class="line">--   specifying columns is supported </span><br><span class="line">DROP STATS (&lt;db&gt;.* | ALL | [&lt;db&gt;.]&lt;table&gt;[&#x27;(&#x27; &lt;col1&gt;, &lt;col2&gt;, ..., &lt;coln&gt; &#x27;)&#x27; ])</span><br><span class="line"></span><br><span class="line">--   specifying columns is supported</span><br><span class="line">SHOW (STATS|COLUMN_STATS) (&lt;db&gt;.* | ALL | [&lt;db&gt;.]&lt;table&gt;&#x27;(&#x27;&lt;col1&gt;, &lt;col2&gt;, ..., &lt;coln&gt; &#x27;)&#x27; )</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Syntax-Example"><a href="#Syntax-Example" class="headerlink" title="Syntax Example:"></a>Syntax Example:</h2><h3 id="Create-Statistics"><a href="#Create-Statistics" class="headerlink" title="Create Statistics"></a>Create Statistics</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-- create stats for all table in current database which has no statistics</span><br><span class="line">create stats if not exists all;</span><br><span class="line">-- create stats for all table in db1 which has no statistics</span><br><span class="line">create stats if not exists db1.*;</span><br><span class="line"></span><br><span class="line">-- create stats for t1.c1, </span><br><span class="line">create stats t1(c1);</span><br><span class="line">-- create stats for t1.c1, t1.c2, </span><br><span class="line">create stats t1(c1, c2);</span><br><span class="line"></span><br><span class="line">-- create stats on t1, force to use fullscan, </span><br><span class="line">-- otherwise controlled by statistics_enable_sample</span><br><span class="line">create stats t1 with fullscan </span><br><span class="line">-- sample MAX(**statistics_sample_row_count**, 0.01 * full_rows_count) rows when create stats for each table</span><br><span class="line">create stats all with 0.01 ratio;</span><br><span class="line">-- sample MAX(40000000, 0.01 * full_rows_count) rows when create stats for each table</span><br><span class="line">create stats all with 0.01 ratio 40000000 rows;</span><br><span class="line">-- sample with default settings, </span><br><span class="line">-- controlled by **statistics_sample_row_count** and **statistics_sample_ratio</span><br><span class="line">**create stats all with sample;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Show-Statistics"><a href="#Show-Statistics" class="headerlink" title="Show Statistics"></a>Show Statistics</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-- show table statistics for all tables in current database</span><br><span class="line">show stats all;</span><br><span class="line">-- show table statistics for all tables in db1</span><br><span class="line">show stats db1.*;</span><br><span class="line">-- show table statistics for table t1</span><br><span class="line">show stats t1;</span><br><span class="line">-- show column statistics for table t1</span><br><span class="line">show column_stats t1;</span><br><span class="line"></span><br><span class="line">-- show column statistics for column c1, c2 of table t1</span><br><span class="line">show column_stats t1(c1, c2);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Drop-Statistics"><a href="#Drop-Statistics" class="headerlink" title="Drop Statistics"></a>Drop Statistics</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-- show statistics for all tables in current database</span><br><span class="line">drop stats all;</span><br><span class="line">-- show statistics for all tables in db1.*</span><br><span class="line">drop stats db1.*;</span><br><span class="line">-- show statistics for table t1</span><br><span class="line">drop stats t1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- drop statistics for column c1, c2 of table t1</span><br><span class="line">drop stats t1(c1, c2);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Usage-of-Explain"><a href="#Usage-of-Explain" class="headerlink" title="Usage of Explain"></a>Usage of Explain</h1><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><ul><li>Explain + SQL</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line">WITH</span><br><span class="line">    (</span><br><span class="line">        SELECT</span><br><span class="line">            sr_customer_sk AS ctr_customer_sk,</span><br><span class="line">            sr_store_sk AS ctr_store_sk,</span><br><span class="line">            sum(sr_return_amt) AS ctr_total_return</span><br><span class="line">        FROM store_returns</span><br><span class="line">        , date_dim</span><br><span class="line">        WHERE (sr_returned_date_sk = d_date_sk) AND (d_year = 2000)</span><br><span class="line">        GROUP BY</span><br><span class="line">            sr_customer_sk,</span><br><span class="line">            sr_store_sk</span><br><span class="line">    ) AS customer_total_return</span><br><span class="line">SELECT c_customer_id</span><br><span class="line">FROM customer_total_return AS ctr1</span><br><span class="line">, store</span><br><span class="line">, customer</span><br><span class="line">WHERE (ctr1.ctr_total_return &gt;</span><br><span class="line">(</span><br><span class="line">    SELECT avg(ctr_total_return) * 1.2</span><br><span class="line">    FROM customer_total_return AS ctr2</span><br><span class="line">    WHERE ctr1.ctr_store_sk = ctr2.ctr_store_sk</span><br><span class="line">)) AND (s_store_sk = ctr1.ctr_store_sk) AND (s_state = &#x27;TN&#x27;) AND (ctr1.ctr_customer_sk = c_customer_sk)</span><br><span class="line">ORDER BY c_customer_id ASC</span><br><span class="line">LIMIT 100</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Result of Explain</li></ul><p><img src="/static/boxcnbHJgX6mTV1MHFyLXajy23f.png"></p><h2 id="Explain-Analyze"><a href="#Explain-Analyze" class="headerlink" title="Explain Analyze"></a><strong>Explain Analyze</strong></h2><p>Explain analyze + SQL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN ANALYZE LOGICAL</span><br><span class="line">WITH customer_total_return AS</span><br><span class="line"></span><br><span class="line">    (</span><br><span class="line">        SELECT</span><br><span class="line">            sr_customer_sk AS ctr_customer_sk,</span><br><span class="line">            sr_store_sk AS ctr_store_sk,</span><br><span class="line">            sum(sr_return_amt) AS ctr_total_return</span><br><span class="line">        FROM store_returns</span><br><span class="line">        , date_dim</span><br><span class="line">        WHERE (sr_returned_date_sk = d_date_sk) AND (d_year = 2000)</span><br><span class="line">        GROUP BY</span><br><span class="line">            sr_customer_sk,</span><br><span class="line">            sr_store_sk</span><br><span class="line">    )</span><br><span class="line">SELECT c_customer_id</span><br><span class="line">FROM customer_total_return AS ctr1</span><br><span class="line">, store</span><br><span class="line">, customer</span><br><span class="line">WHERE (ctr1.ctr_total_return &gt;</span><br><span class="line">(</span><br><span class="line">    SELECT avg(ctr_total_return) * 1.2</span><br><span class="line">    FROM customer_total_return AS ctr2</span><br><span class="line">    WHERE ctr1.ctr_store_sk = ctr2.ctr_store_sk</span><br><span class="line">)) AND (s_store_sk = ctr1.ctr_store_sk) AND (s_state = &#x27;TN&#x27;) AND (ctr1.ctr_customer_sk = c_customer_sk)</span><br><span class="line">ORDER BY c_customer_id ASC</span><br><span class="line">LIMIT 100</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">┌─Explain Analyze──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">│ Limit                                                                                                                                                                │</span><br><span class="line">│ │     Est. 100 rows, cost 8.2e+05                                                                                                                                    │</span><br><span class="line">│ │     Act. 100 rows (2.4 KB), Throughput: 545.0K rows/s, CPU Time per worker: avg 2.0 us, max 2.0 us, Wall Time: 1.8 ms                                              │</span><br><span class="line">│ │     Filtered: 0.0%, QError: 1.0                                                                                                                                    │</span><br><span class="line">│ └─ MergeSorting                                                                                                                                                      │</span><br><span class="line">│    │     Est. 49.2K rows, cost 8.2e+05                                                                                                                               │</span><br><span class="line">│    │     Act. 100 rows (2.4 KB), Throughput: 545.0K rows/s, CPU Time per worker: avg 2.0 us, max 2.0 us, Wall Time: 1.8 ms                                           │</span><br><span class="line">│    │     Filtered: 96.9%, QError: 504.1                                                                                                                              │</span><br><span class="line">│    └─ Union                                                                                                                                                          │</span><br><span class="line">│       │     Est. 49.2K rows, cost 8.2e+05                                                                                                                            │</span><br><span class="line">│       │     Act. 3.1K rows (78.1 KB), Throughput: 17.0M rows/s, CPU Time per worker: avg 0.0 us, max 0.0 us, Wall Time: 1.8 ms                                       │</span><br><span class="line">│       │     Filtered: 0.0%, QError: 15.8                                                                                                                             │</span><br><span class="line">│       └─ PartialSorting                                                                                                                                              │</span><br><span class="line">│          │     Est. 49.2K rows, cost 8.2e+05                                                                                                                         │</span><br><span class="line">│          │     Act. 3.1K rows (78.1 KB), Throughput: 17.0M rows/s, CPU Time per worker: avg 40.0 us, max 40.0 us, Wall Time: 1.8 ms                                  │</span><br><span class="line">│          │     Filtered: 0.0%, QError: 15.8                                                                                                                          │</span><br><span class="line">│          └─ Gather Exchange                                                                                                                                          │</span><br><span class="line">│             │     Est. 49.2K rows, cost 8.2e+05                                                                                                                      │</span><br><span class="line">│             └─ MergeSorting                                                                                                                                          │</span><br><span class="line">│                │     Est. 49.2K rows, cost 8.1e+05                                                                                                                   │</span><br><span class="line">│                │     Act. 12.5K rows (313.1 KB), Throughput: 108.2M rows/s, CPU Time per worker: avg 23.0 us, max 25.0 us, Wall Time: 1.2 ms                         │</span><br><span class="line">│                │     Filtered: -1.6%, QError: 3.9                                                                                                                    │</span><br><span class="line">│                └─ PartialSorting                                                                                                                                     │</span><br><span class="line">│                   │     Est. 49.2K rows, cost 8.1e+05                                                                                                                │</span><br><span class="line">│                   │     Act. 12.3K rows (308.3 KB), Throughput: 91.6M rows/s, CPU Time per worker: avg 40.0 us, max 40.0 us, Wall Time: 1.3 ms                       │</span><br><span class="line">│                   │     Filtered: 0.0%, QError: 4.0                                                                                                                  │</span><br><span class="line">│                   └─ Inner Join                                                                                                                                      │</span><br><span class="line">│                      │     Est. 47.5K rows, cost 8.1e+05                                                                                                             │</span><br><span class="line">│                      │     Act. 12.3K rows (308.3 KB), Throughput: 91.6M rows/s, CPU Time per worker: avg 41.6 ms, max 41.8 ms, Wall Time: 1.3 ms                    │</span><br><span class="line">│                      │     Filtered: 0.0%, QError: 3.9                                                                                                               │</span><br><span class="line">│                      │     Condition: sr_store_sk_1 == s_store_sk                                                                                                    │</span><br><span class="line">│                      │     Filter: `sum(sr_return_amt)_1` &gt; (`avg(ctr_total_return)` * 1.2)                                                                          │</span><br><span class="line">│                      ├─ Local Exchange                                                                                                                               │</span><br><span class="line">│                      │  │     Est. 49.2K rows, cost 2.9e+05                                                                                                          │</span><br><span class="line">│                      │  └─ Inner Join                                                                                                                                │</span><br><span class="line">│                      │     │     Est. 49.2K rows, cost 2.9e+05                                                                                                       │</span><br><span class="line">│                      │     │     Act. 49.3K rows (2.1 MB), Throughput: 542.3M rows/s, CPU Time per worker: avg 6.2 ms, max 6.4 ms, Wall Time: 896.0 us               │</span><br><span class="line">│                      │     │     Filtered: 0.0%, QError: 1.0                                                                                                         │</span><br><span class="line">│                      │     │     Condition: c_customer_sk == sr_customer_sk_1                                                                                        │</span><br><span class="line">│                      │     ├─ Repartition Exchange                                                                                                                   │</span><br><span class="line">│                      │     │  │     Est. 97.7K rows, cost 9.0e+04                                                                                                    │</span><br><span class="line">│                      │     │  │     Partition by: &#123;c_customer_sk&#125;                                                                                                    │</span><br><span class="line">│                      │     │  └─ ReadFromStorage tpcds.customer                                                                                                      │</span><br><span class="line">│                      │     │           Est. 97.7K rows, cost 7.4e+04                                                                                                 │</span><br><span class="line">│                      │     │           Act. 97.7K rows (3.1 MB), Throughput: 22.2G rows/s, CPU Time per worker: avg 362.0 us, max 402.0 us, Wall Time: 47.0 us       │</span><br><span class="line">│                      │     │           Filtered: 0.0%, QError: 1.0                                                                                                   │</span><br><span class="line">│                      │     └─ Repartition Exchange                                                                                                                   │</span><br><span class="line">│                      │        │     Est. 50.9K rows, cost 6.1e+04                                                                                                    │</span><br><span class="line">│                      │        │     Partition by: &#123;sr_customer_sk_1&#125;                                                                                                 │</span><br><span class="line">│                      │        └─ CTERef [0]                                                                                                                          │</span><br><span class="line">│                      │                 Est. 50.9K rows, cost 5.2e+04                                                                                                 │</span><br><span class="line">│                      └─ Broadcast Exchange                                                                                                                           │</span><br><span class="line">│                         │     Est. 7 rows, cost 5.6e+04                                                                                                              │</span><br><span class="line">│                         └─ Inner Join                                                                                                                                │</span><br><span class="line">│                            │     Est. 7 rows, cost 5.6e+04                                                                                                           │</span><br><span class="line">│                            │     Act. 6 rows (102.0 Bytes), Throughput: 67.7K rows/s, CPU Time per worker: avg 280.0 us, max 360.0 us, Wall Time: 870.0 us           │</span><br><span class="line">│                            │     Filtered: 97.9%, QError: 1.2                                                                                                        │</span><br><span class="line">│                            │     Condition: s_store_sk == sr_store_sk_2                                                                                              │</span><br><span class="line">│                            ├─ Repartition Exchange                                                                                                                   │</span><br><span class="line">│                            │  │     Est. 12 rows, cost 1.2e+01                                                                                                       │</span><br><span class="line">│                            │  │     Partition by: &#123;s_store_sk&#125;                                                                                                       │</span><br><span class="line">│                            │  └─ Filter                                                                                                                              │</span><br><span class="line">│                            │     │     Est. 12 rows, cost 9.8e+00                                                                                                    │</span><br><span class="line">│                            │     │     Act. 12 rows (240.0 Bytes), Throughput: 28.6M rows/s, CPU Time per worker: avg 16.0 us, max 24.0 us, Wall Time: 5.0 us        │</span><br><span class="line">│                            │     │     Filtered: 0.0%, QError: 1.0                                                                                                   │</span><br><span class="line">│                            │     │     s_state = &#x27;TN&#x27;                                                                                                                │</span><br><span class="line">│                            │     └─ ReadFromStorage tpcds.store                                                                                                      │</span><br><span class="line">│                            │              Est. 12 rows, cost 8.9e+00                                                                                                 │</span><br><span class="line">│                            │              Act. 12 rows (240.0 Bytes), Throughput: 28.6M rows/s, CPU Time per worker: avg 48.0 us, max 72.0 us, Wall Time: 4.0 us     │</span><br><span class="line">│                            │              Filtered: 0.0%, QError: 1.0                                                                                                │</span><br><span class="line">│                            └─ MergingAggregated                                                                                                                      │</span><br><span class="line">│                               │     Est. 6 rows, cost 5.6e+04                                                                                                        │</span><br><span class="line">│                               │     Act. 280 rows (4.9 KB), Throughput: 3.1M rows/s, CPU Time per worker: avg 60.0 us, max 80.0 us, Wall Time: 867.0 us              │</span><br><span class="line">│                               │     Filtered: 0.0%, QError: 46.7                                                                                                     │</span><br><span class="line">│                               └─ Repartition Exchange                                                                                                                │</span><br><span class="line">│                                  │     Est. 6 rows, cost 5.6e+04                                                                                                     │</span><br><span class="line">│                                  │     Partition by: &#123;sr_store_sk_2&#125;                                                                                                 │</span><br><span class="line">│                                  └─ Aggregating                                                                                                                      │</span><br><span class="line">│                                     │     Est. 6 rows, cost 5.6e+04                                                                                                  │</span><br><span class="line">│                                     │     Act. 14 rows (238.0 Bytes), Throughput: 145.6K rows/s, CPU Time per worker: avg 7.0 us, max 9.0 us, Wall Time: 955.0 us    │</span><br><span class="line">│                                     │     Filtered: 100.0%, QError: 2.3                                                                                              │</span><br><span class="line">│                                     │     Group by: &#123;sr_store_sk_2&#125;                                                                                                  │</span><br><span class="line">│                                     └─ Projection                                                                                                                    │</span><br><span class="line">│                                        │     Est. 50.9K rows, cost 5.6e+04                                                                                           │</span><br><span class="line">│                                        │     Act. 49.3K rows (887.4 KB), Throughput: 519.5M rows/s, CPU Time per worker: avg 0.0 us, max 0.0 us, Wall Time: 947.0 us │</span><br><span class="line">│                                        │     Filtered: 0.0%, QError: 1.0                                                                                             │</span><br><span class="line">│                                        └─ CTERef [0]                                                                                                                 │</span><br><span class="line">│                                                 Est. 50.9K rows, cost 5.2e+04                                                                                        │</span><br><span class="line">│ CTEDef [0]                                                                                                                                                           │</span><br><span class="line">│    MergingAggregated                                                                                                                                                 │</span><br><span class="line">│    │     Est. 50.9K rows, cost 4.3e+05                                                                                                                               │</span><br><span class="line">│    │     Act. 49.3K rows (1.3 MB), Throughput: 497.5M rows/s, CPU Time per worker: avg 34.0 us, max 35.0 us, Wall Time: 996.0 us                                     │</span><br><span class="line">│    │     Filtered: 0.0%, QError: 1.0                                                                                                                                 │</span><br><span class="line">│    └─ Repartition Exchange                                                                                                                                           │</span><br><span class="line">│       │     Est. 50.9K rows, cost 4.3e+05                                                                                                                            │</span><br><span class="line">│       │     Partition by: &#123;sr_customer_sk, sr_store_sk&#125;                                                                                                              │</span><br><span class="line">│       └─ Aggregating                                                                                                                                                 │</span><br><span class="line">│          │     Est. 50.9K rows, cost 4.2e+05                                                                                                                         │</span><br><span class="line">│          │     Act. 51.4K rows (1.3 MB), Throughput: 1.1G rows/s, CPU Time per worker: avg 27.0 us, max 28.0 us, Wall Time: 506.0 us                                 │</span><br><span class="line">│          │     Filtered: 5.8%, QError: 1.0                                                                                                                           │</span><br><span class="line">│          │     Group by: &#123;sr_customer_sk, sr_store_sk&#125;                                                                                                               │</span><br><span class="line">│          └─ Inner Join                                                                                                                                               │</span><br><span class="line">│             │     Est. 50.9K rows, cost 4.2e+05                                                                                                                      │</span><br><span class="line">│             │     Act. 54.5K rows (1.4 MB), Throughput: 1.2G rows/s, CPU Time per worker: avg 14.3 ms, max 15.0 ms, Wall Time: 477.0 us                              │</span><br><span class="line">│             │     Filtered: -90.6%, QError: 1.1                                                                                                                      │</span><br><span class="line">│             │     Condition: sr_returned_date_sk == d_date_sk                                                                                                        │</span><br><span class="line">│             ├─ Local Exchange                                                                                                                                        │</span><br><span class="line">│             │  │     Est. 280.8K rows, cost 2.3e+05                                                                                                                  │</span><br><span class="line">│             │  └─ Filter                                                                                                                                             │</span><br><span class="line">│             │     │     Est. 280.8K rows, cost 2.3e+05                                                                                                               │</span><br><span class="line">│             │     │     Act. 54.5K rows (1.9 MB), Throughput: 5.7G rows/s, CPU Time per worker: avg 865.0 us, max 885.0 us, Wall Time: 96.0 us                       │</span><br><span class="line">│             │     │     Filtered: 0.0%, QError: 5.2                                                                                                                  │</span><br><span class="line">│             │     │     Dynamic Filters: &#123;sr_returned_date_sk:range&#125;                                                                                                 │</span><br><span class="line">│             │     └─ ReadFromStorage tpcds.store_returns                                                                                                             │</span><br><span class="line">│             │              Est. 280.8K rows, cost 2.1e+05                                                                                                            │</span><br><span class="line">│             │              Act. 54.5K rows (1.9 MB), Throughput: 5.8G rows/s, CPU Time per worker: avg 2.4 ms, max 2.4 ms, Wall Time: 95.0 us                        │</span><br><span class="line">│             │              Filtered: 0.0%, QError: 5.2                                                                                                               │</span><br><span class="line">│             └─ Projection                                                                                                                                            │</span><br><span class="line">│                │     Est. 366 rows, cost 6.0e+04                                                                                                                     │</span><br><span class="line">│                │     Act. 28.6K rows (228.8 KB), Throughput: 45.4G rows/s, CPU Time per worker: avg 1.1 ms, max 1.3 ms, Wall Time: 7.0 us                            │</span><br><span class="line">│                │     Filtered: 0.0%, QError: 80.0                                                                                                                    │</span><br><span class="line">│                │     Dynamic Filters Builder: &#123;d_date_sk&#125;                                                                                                            │</span><br><span class="line">│                └─ Broadcast Exchange                                                                                                                                 │</span><br><span class="line">│                   │     Est. 366 rows, cost 6.0e+04                                                                                                                  │</span><br><span class="line">│                   └─ Filter                                                                                                                                          │</span><br><span class="line">│                      │     Est. 366 rows, cost 5.9e+04                                                                                                               │</span><br><span class="line">│                      │     Act. 366 rows (6.1 KB), Throughput: 85.1M rows/s, CPU Time per worker: avg 282.0 us, max 283.0 us, Wall Time: 44.0 us                     │</span><br><span class="line">│                      │     Filtered: 0.0%, QError: 1.0                                                                                                               │</span><br><span class="line">│                      │     d_year = 2000                                                                                                                             │</span><br><span class="line">│                      └─ ReadFromStorage tpcds.date_dim                                                                                                               │</span><br><span class="line">│                               Est. 71.3K rows, cost 5.4e+04                                                                                                          │</span><br><span class="line">│                               Act. 366 rows (6.1 KB), Throughput: 85.1M rows/s, CPU Time per worker: avg 780.0 us, max 840.0 us, Wall Time: 43.0 us                  │</span><br><span class="line">│                               Filtered: 0.0%, QError: 199.6                                                                                                          │</span><br><span class="line">│ note: Dynamic Filter is applied for 1 times.                                                                                                                         │</span><br><span class="line">│ note: CTE(Common Table Expression) is applied for 2 times.                                                                                                           │</span><br><span class="line">└──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Explain analyze distributed + SQL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN ANALYZE DISTRIBUTED</span><br><span class="line">SELECT</span><br><span class="line">    i_item_id,</span><br><span class="line">    avg(ss_quantity) AS agg1,</span><br><span class="line">    avg(ss_list_price) AS agg2,</span><br><span class="line">    avg(ss_coupon_amt) AS agg3,</span><br><span class="line">    avg(ss_sales_price) AS agg4</span><br><span class="line">FROM store_sales</span><br><span class="line">, customer_demographics</span><br><span class="line">, date_dim</span><br><span class="line">, item</span><br><span class="line">, promotion</span><br><span class="line">WHERE (ss_sold_date_sk = d_date_sk) AND (ss_item_sk = i_item_sk) AND (ss_cdemo_sk = cd_demo_sk) AND (ss_promo_sk = p_promo_sk) AND (cd_gender = &#x27;M&#x27;) AND (cd_marital_status = &#x27;S&#x27;) AND (cd_education_status = &#x27;College&#x27;) AND ((p_channel_email</span><br><span class="line"> = &#x27;N&#x27;) OR (p_channel_event = &#x27;N&#x27;)) AND (d_year = 2000)</span><br><span class="line">GROUP BY i_item_id</span><br><span class="line">ORDER BY i_item_id ASC</span><br><span class="line">LIMIT 100</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/static/boxcnxiwhbhVnUQkflLLELMblMb.png"></p><ul><li>QError:  max(Est rows, Act rows) &#x2F; min(Est rows, Act rows),  1 is the best.</li><li>Wall Time: max wall time of all the workers.  We can figure out which step takes the most time.</li><li>CPU Time: We can figure out which step has the data skew issue. (If the max time is bigger than avg time, there is one worker which processed too much data.)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> Advanced </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资源管理器</title>
      <link href="/zh-cn/docs/%E9%AB%98%E7%BA%A7%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8/"/>
      <url>/zh-cn/docs/%E9%AB%98%E7%BA%A7%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="资源管理器"><a href="#资源管理器" class="headerlink" title="资源管理器"></a>资源管理器</h1><p>资源管理器（Resource Manager，简称 RM）组件用于对 ByConity 计算资源进行统一管理和调度，是实现资源弹性和提高资源利用率的核心组件。</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>ByConity 资源管理器的核心设计目标如下：</p><ol><li>能够管理、调度计算资源，提升资源利用率。</li><li>能够收集计算组 VW 的监控数据，便于基于负载进行资源调度。</li><li>能够为查询、INSERT、各种后台任务提供调度功能。</li><li>能够协调不同 VW 并动态调配 VW 的资源。</li><li>实现资源池化，弹性扩缩功能。</li></ol><h2 id="计算资源的层级"><a href="#计算资源的层级" class="headerlink" title="计算资源的层级"></a>计算资源的层级</h2><p>为了实现上述目标，我们将计算资源进行层级化的划分和管理。</p><h3 id="计算节点-Worker"><a href="#计算节点-Worker" class="headerlink" title="计算节点 Worker"></a>计算节点 Worker</h3><p>在 主要原理概念（link） 中我们知道 ByConity 计算资源中最小的计算单元是一个 Worker 节点，它对应一个 Kubenetes Pod。</p><p>Worker 启动后，将定期向 RM 汇报心跳信息，包括：</p><ul><li>身份标识信息，如 WORKER_ID, WORKER_GROUP_ID, VIRTUAL_WAREHOUSE_ID 等。</li><li>节点物理负载信息，如 CPU 使用率、MEMORY 使用率等。</li><li>查询负载信息，如正在运行的 query 数量，排队的 query 数量等。</li></ul><p>RM 维护和及时更新每个 Worker 的状态，在处理 query 时，根据 Worker 的身份标识和负载信息进行 query 的路由和调度。</p><h3 id="计算组副本-Worker-Group"><a href="#计算组副本-Worker-Group" class="headerlink" title="计算组副本 Worker Group"></a>计算组副本 Worker Group</h3><p>计算组副本（Worker Group，简称 WG）是实际处理一个查询请求所使用的计算资源，它对应一个 Kubenetes StatefulSet。</p><p>一个计算组副本由多个 Worker 组成，每个 Worker 身份标识中的 WORKER_GROUP_ID 即指明自己所属的 Worker Group。同时，我们通过汇总 Worker Group 内所有 Worker 的负载信息，可以得到该 Worker Group 的聚合负载信息，如平均 CPU 使用率、最大 CPU 使用率、平均 MEMORY 使用率、最大 MEMORY 使用率等。</p><p>计算组副本又分为 Physical 和 Shared 两种。</p><ul><li>物理计算组副本（Physical Worker Group）与一组实际的物理资源（Kubernetes StatefulSet）绑定。</li><li>共享计算组副本（Shared Worker Group）则不和物理资源绑定，而是通过引用的方式指向另一个 Physical Worker Group。Shared Worker Group 拥有独立的标识信息即 WOKRER_GROUP_ID，负载信息则为对应的 Physical Worker Group 的负载信息。</li></ul><p>当我们需要管理（创建、删除等）一个物理计算组副本时，除了在 ByConity 内部修改元信息，还需要执行对应的 K8s 操作。而管理一个共享计算组副本则只需要修改该计算组副本的元信息即可，因为共享计算组副本不拥有任何物理资源。</p><h3 id="Virtual-Warehouse"><a href="#Virtual-Warehouse" class="headerlink" title="Virtual Warehouse"></a>Virtual Warehouse</h3><p>计算组（Virtual Warehouse，简称 VW）由多个配置相同的计算组副本构成。Worker 身份标识中的 VIRTUAL_WAREHOUSE_ID 即标识自己所属的 VW。</p><p>VW 分为两种类型：Default 和 Write。</p><ul><li>Default VW 负责处理用户的普通 SELECT 查询，Default VW 也称作 Read VW。</li><li>Write VW 负责处理用户的 INSERT 查询，以及运行 ByConity 的 Merge、Mutate 等后台任务（link 后台任务）。</li></ul><p>Default 和 Write VW 的区分，使得 ByConity 可以轻松实现读写分离，最大限度的保证查询性能。</p><h2 id="调度流程"><a href="#调度流程" class="headerlink" title="调度流程"></a>调度流程</h2><p>每一张 ByConity 用户表都需要指定自己的 default VW 和 write VW。之后，RM 会承担这张表的所有调度工作：SELECT query、INSERT query、后台任务等。</p><h3 id="SELECT-Query-的调度流程"><a href="#SELECT-Query-的调度流程" class="headerlink" title="SELECT Query 的调度流程"></a>SELECT Query 的调度流程</h3><p>当 Server 发现 Query 是一个 SELECT Query 时，需要从表的 Default VW 中挑选一个 WG 来处理查询。</p><p><img src="/static/boxcnbZbcFxobIoWtbHHOFEBuAd.png"></p><p>如图所示，假设表的 Default VW 中有 2 个 Physical WG，以及 1 个 Shared WG（指向另一个 VW 中的 Physical WG）。因为是一个 SELECT 查询，所以我们需要选择 1 个 WG 来处理查询。Physical WG 1 是当前负载最低的 WG，被选中处理该查询。</p><h3 id="INSERT-Query-的调度流程"><a href="#INSERT-Query-的调度流程" class="headerlink" title="INSERT Query 的调度流程"></a>INSERT Query 的调度流程</h3><p>当 Server 发现 Query 是一个 INSERT Query 时，需要从表的 Write VW 中挑选一个 Worker 来处理查询。</p><p><img src="/static/boxcn1vUjQxIvpWIT2zplXffgyg.png"></p><p>如图所示，假设表的 Write VW 中有 2 个 Physical WG，每个 WG 包含 3 个 Worker。因为是一个 INSERT 查询，所以我们需要选择一个 Worker 来处理查询。Worker 3 当前负载最低，被选中处理该查询。</p><h3 id="后台任务的调度流程"><a href="#后台任务的调度流程" class="headerlink" title="后台任务的调度流程"></a>后台任务的调度流程</h3><p>Server 除了处理用户查询，还需要为表调度后台任务，比如在后台不断地对表数据执行 Merge 以提升查询性能。</p><p><img src="/static/boxcnHyC6wY1ypvpTr7TkWHtLng.png"></p><p>如图所示，Server 生成一个 Merge 任务，需要从 Write VW 中选择一个 Worker 来处理。Worker 3 当前负载最低，被选中来执行 Merge 任务。</p><h2 id="高可用-amp-兼容升级"><a href="#高可用-amp-兼容升级" class="headerlink" title="高可用 &amp; 兼容升级"></a>高可用 &amp; 兼容升级</h2><ol><li>采用简单的多副本主从配置。</li><li>Worker 的心跳只发送给主节点，Server 的请求也只由主节点处理。</li><li>当主节点宕机时，由备节点接替服务，并从 KV 数据库同步必要的元数据。</li><li>由于 Server 有 VW、WG 和 Worker 信息的缓存，即便 RM 短时间不可用，服务节点仍然能够使用缓存的数据继续工作。</li></ol><h2 id="计算资源弹性共享"><a href="#计算资源弹性共享" class="headerlink" title="计算资源弹性共享"></a>计算资源弹性共享</h2><p>基于 Worker 负载信息对查询和后台任务进行调度，使得一个 VW 内部的 WG、Worker 负载更加均衡。此外，我们可以通过创建合适的 Shared WG（共享计算组）来实现 VW 之间的资源弹性共享。</p><p>当一个 Physical WG 整体资源利用率较低时，可以在其他需要更多计算资源的 VW 内创建一个 Shared WG，并指向该 Physical WG。这样，这个 Physical WG 就可以被其他 VW 的查询或任务所使用。</p><p><img src="/static/boxcnwYSsOLigmR3d9nblBrpLFg.png"></p><p>如图所示，在 Default VW 1 中，我们创建了一个共享计算组 Shared WG 3，它不拥有任何实际的物理计算资源，而是指向另一个 Default VW 3 中的物理计算组 Physical WG 6。Shared WG 3 拥有和 Physical WG 6 完全相同的负载信息，在 Default VW 1 进行调度决策时，可以选择 Shared WG 3（或其中的 Worker）来处理 SELECT 查询（或 INSERT 查询、后台任务）。最终，查询或后台任务实际是路由到 Physical WG 6 进行处理。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="/static/%E4%BA%91%E5%8E%9F%E7%94%9F%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93ByteHouse%E6%8A%80%E6%9C%AF%E7%99%BD%E7%9A%AE%E4%B9%A6V1.0.pdf">云原生数据仓库 ByteHouse 技术白皮书 V1.0</a></p>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> Advanced </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置后台任务</title>
      <link href="/zh-cn/docs/%E9%AB%98%E7%BA%A7%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E9%85%8D%E7%BD%AE%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1/"/>
      <url>/zh-cn/docs/%E9%AB%98%E7%BA%A7%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E9%85%8D%E7%BD%AE%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="配置后台任务"><a href="#配置后台任务" class="headerlink" title="配置后台任务"></a>配置后台任务</h1><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h3 id="启动-x2F-停止表的-Merge"><a href="#启动-x2F-停止表的-Merge" class="headerlink" title="启动&#x2F;停止表的 Merge"></a>启动&#x2F;停止表的 Merge</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 启动 merge</span><br><span class="line">system start merges xxx.yyy;</span><br><span class="line"></span><br><span class="line">-- 停止 merge</span><br><span class="line">system stop merges xxx.yyy;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="手动触发-merge"><a href="#手动触发-merge" class="headerlink" title="手动触发 merge"></a>手动触发 merge</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 触发一次merge 调度（和上面自动流程相同）</span><br><span class="line">optimize table xxx.yyy;</span><br><span class="line"></span><br><span class="line">-- 触发一次指定partition下的merge调度</span><br><span class="line">optimize table xxx.yyy partition id &#x27;zzz&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此外，还可以有 dry run 模式，方便查看接下来 merge 能选出哪些 part（或者排查为什么选不出 part）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 打开trace log，执行try optimize的时候</span><br><span class="line">-- 会打印整个merge select过程的相关日志，</span><br><span class="line">-- 比如选了哪些partition，哪些part，merge任务发给了哪个worker等。</span><br><span class="line">set send_logs_level = &#x27;trace&#x27;;</span><br><span class="line"></span><br><span class="line">try optimize table xxx.yyy;</span><br><span class="line">try optimize table xxx.yyy partition id &#x27;zzz&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改-merge-参数"><a href="#修改-merge-参数" class="headerlink" title="修改 merge 参数"></a>修改 merge 参数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table xxx.yyy modify setting cnch_merge_zzz = www;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="观测"><a href="#观测" class="headerlink" title="观测"></a>观测</h3><p>注意选择表的 host server。</p><p>system.bg_threads 可以查看表的 Merge&#x2F;GC 后台线程运行状态。</p><p>system.manipulations 可以查看当前正在运行的 Merge 任务。</p><p>system.server_part_log 可以查看历史 Merge 任务的信息。（新 insert 的 part 也可以看这个表）。</p><h1 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h1><table><thead><tr><th align="left">配置项</th><th align="left">默认值, 含义</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left"></td><td align="left"><em>&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F; 多partition &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</em></td><td align="left"><em>最早每次只选一个partition，并发不够。改多partition期望提高并发。</em></td></tr><tr><td align="left">enable_addition_bg_task</td><td align="left">false, 允许更多的merge任务同时运行</td><td align="left">配合max_addition_bg_task_num一起使用。</td></tr><tr><td align="left">max_addition_bg_task_num</td><td align="left">200, 限制最大的并发任务数量</td><td align="left"></td></tr><tr><td align="left">max_partition_for_multi_select</td><td align="left">3, 选多少个partitions来merge</td><td align="left">merge会先选partitions，再从partitions中选range。<br>如果是多partition key（比如 appid, date）通常需要将这个值调大，因为partition很多。</td></tr><tr><td align="left"></td><td align="left"><em>&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F; 提高每次选range的速度 &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</em></td><td align="left"><em>数据量大的时候，每次select都非常耗时，期望通过__batch__加速。</em></td></tr><tr><td align="left">cnch_merge_enable_batch_select</td><td align="left">false, 是否开启batch_select</td><td align="left">batch_select会每round选一大批ranges，之后的round会直接submit这些range，能让merge的触发周期缩短，从而让总任务量真正达到并发上限。</td></tr><tr><td align="left">cnch_merge_max_total_rows_to_merge</td><td align="left">15000000, 单个merged part的最大行数</td><td align="left">当业务很清楚level0 part行数以及期望控制merge后的整体数量（影响查询时间）时，比较管用。</td></tr><tr><td align="left"></td><td align="left"><em>&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F; 实时数据优化 &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</em></td><td align="left"><em>实时场景</em></td></tr><tr><td align="left">cnch_merge_only_realtime_partition</td><td align="left">false, 是否只选realtime partition</td><td align="left">每round选partitions时，会选N个count多的partition，N个realtime partition。如果enable这个setting，则只会按realtime程度（min_block）选partition。 实时表场景会很有用。</td></tr><tr><td align="left">max_bytes_to_merge_at_max_space_in_pool</td><td align="left">150 * 1024 * 1024 * 1024， 即150GB。单merge任务最大bytes限制。</td><td align="left">参数名看起来不够直观，遗留代码问题… cnch里面这个参数被用在了设置merge selector的max size上。<br>功能类似cnch_merge_max_total_rows_to_merge，一个限制行数，一个限制bytes数。</td></tr><tr><td align="left">cnch_vw_write</td><td align="left">vw_default, 执行merge用的vw</td><td align="left">咨询sre可以知道自己业务应该使用哪个vw作为write vw</td></tr><tr><td align="left">cnch_merge_pick_worker_algo</td><td align="left">‘RM’, 选worker时的算法，默认从RM挑选。</td><td align="left">并发量大时需要设置为’<strong>RoundRobin</strong>‘</td></tr></tbody></table><h1 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h1><ul><li>如果表规模不大（百万量级），但是当前 parts 比较多，想加快 merge 频率，通常 enable_addition_bg_task &#x3D; 1 max_partition_for_multi_select 会有效果。这时候对应的 max_addition_bg_task_num 是 merge 并发量的上限。</li><li>如果表规模很大了（千万, 上亿），（每次从 catalog 获取 parts 耗时就会很长），这时候可能不仅要 enable_addition_bg_task， 还需要使用 cnch_merge_enable_batch_select &#x3D; 1 来增加每次 merge select 的结果。</li><li>关于 cnch_merge_only_realtime_partition 和 max_partition_for_multi_select。 通常 kafka 实时表会使用 cnch_merge_only_realtime_partition，它表示每次选 partition 的时候只选 min_block 最新的，partition 数量由 max_partition_for_multi_select 控制。注意：如果是一个离线表且每天产生大量的新 partition，此时打开 cnch_merge_only_realtime_partition 并且 max_partition_for_multi_select 设置得很小的话，那会出现当天有 partition 无法参与 merge 的情况。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> Advanced </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hash</title>
      <link href="/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/hash/"/>
      <url>/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/hash/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Notice:<br>Some of the examples below are referenced from <a href="https://clickhouse.com/docs/en/sql-reference/functions/">ClickHouse Documentation</a> but have been adapted and modified to work in ByteHouse.</p></blockquote><h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><p>Calculates the MD5 from a string and returns the resulting set of bytes as FixedString(16).</p><p>If you do not need MD5 in particular, but you need a decent cryptographic 128-bit hash, use the [sipHash128] function instead.</p><p>If you want to get the same result as output by the md5sum utility, use lower(hex(MD5(s))).</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> MD5(string)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – A string</li></ul><p><strong>Returned value</strong></p><ul><li>The Value of MD5.</li></ul><p>Type: FixedString(16)</p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> MD5(<span class="string">&#x27;test the MD5 function&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─MD5(&#x27;test the MD5 function&#x27;)─┐</span><br><span class="line">│ ो?N?iq@?5G?:a               │</span><br><span class="line">└──────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="SHA1"><a href="#SHA1" class="headerlink" title="SHA1"></a>SHA1</h2><p>Calculates SHA-1, SHA-224, or SHA-256 from a string and returns the resulting set of bytes as FixedString(20), FixedString(28), or FixedString(32).</p><p>The function works fairly slowly (SHA-1 processes about 5 million short strings per second per processor core, while SHA-224 and SHA-256 process about 2.2 million).</p><p>We recommend using this function only in cases when you need a specific hash function and you can’t select it.</p><p>Even in these cases, we recommend applying the function offline and pre-calculating values when inserting them into the table, instead of applying it in SELECTS.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHA1(string)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – A string.</li></ul><p><strong>Returned value</strong></p><ul><li>SHA-1 Encrypted string in <code>FixedString(20)</code>.</li></ul><p>Type: <code>FixedString(20)</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> base64Encode(toString(SHA1(<span class="string">&#x27;SAH1 test&#x27;</span>)))</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─base64Encode(toString(SHA1(&#x27;SAH1 test&#x27;)))─┐</span><br><span class="line">│ x5bDmJsgE+YzTir1+BPt4S98AEc=              │</span><br><span class="line">└───────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="SHA224"><a href="#SHA224" class="headerlink" title="SHA224"></a>SHA224</h2><p>Calculates SHA-1, SHA-224, or SHA-256 from a string and returns the resulting set of bytes as FixedString(20), FixedString(28), or FixedString(32).</p><p>The function works fairly slowly (SHA-1 processes about 5 million short strings per second per processor core, while SHA-224 and SHA-256 process about 2.2 million).</p><p>We recommend using this function only in cases when you need a specific hash function and you can’t select it.</p><p>Even in these cases, we recommend applying the function offline and pre-calculating values when inserting them into the table, instead of applying it in SELECTS.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHA224(string)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – A string.</li></ul><p><strong>Returned value</strong></p><ul><li>SHA-224 Encrypted string in <code>FixedString(28)</code>.</li></ul><p>Type: <code>FixedString(28)</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> base64Encode(toString(SHA224(<span class="string">&#x27;SAH224 test&#x27;</span>)))</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─base64Encode(toString(SHA224(&#x27;SAH224 test&#x27;)))─┐</span><br><span class="line">│ eptUvYjJG4AeQfQI9kZ/qViECg0gRbuwPJ5UlA==      │</span><br><span class="line">└───────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="SHA256"><a href="#SHA256" class="headerlink" title="SHA256"></a>SHA256</h2><p>Calculates SHA-1, SHA-224, or SHA-256 from a string and returns the resulting set of bytes as FixedString(20), FixedString(28), or FixedString(32).</p><p>The function works fairly slowly (SHA-1 processes about 5 million short strings per second per processor core, while SHA-224 and SHA-256 process about 2.2 million).</p><p>We recommend using this function only in cases when you need a specific hash function and you can’t select it.</p><p>Even in these cases, we recommend applying the function offline and pre-calculating values when inserting them into the table, instead of applying it in SELECTS.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHA256(string)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>string</code> – A string.</li></ul><p><strong>Returned value</strong></p><ul><li>SHA-256 Encrypted string in <code>FixedString(32)</code>.</li></ul><p>Type: <code>FixedString(32)</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> base64Encode(toString(SHA256(<span class="string">&#x27;SAH256 test&#x27;</span>)))</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─base64Encode(toString(SHA256(&#x27;SAH256 test&#x27;)))─┐</span><br><span class="line">│ I+OvFrLmD2Ofq1xBuFmKYCuB6iSg5/OrhcIbI5Qezs8=  │</span><br><span class="line">└───────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="URLHash"><a href="#URLHash" class="headerlink" title="URLHash"></a>URLHash</h2><p>A fast, decent-quality non-cryptographic hash function for a string obtained from a URL using some type of normalization.</p><p><code>URLHash(s)</code> – Calculates a hash from a string without one of the trailing symbols <code>/</code> , <code>?</code> or <code>#</code> at the end, if present.</p><p><code>URLHash(s, N)</code> – Calculates a hash from a string up to the N level in the URL hierarchy, without one of the trailing symbols <code>/</code> , <code>?</code> or <code>#</code> at the end, if present.</p><p>Levels are the same as in URLHierarchy. This function is specific to Yandex.Metrica.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">URLHash(s,N)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>s</code> – The URL string.</li><li><code>N</code> – The number of level in UInt.</li></ul><p><strong>Returned value</strong></p><ul><li>The hash value in UInt64</li></ul><p>Type: <code>Uint64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> URLHash(<span class="string">&#x27;https://www.bytedance.com/en/news&#x27;</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─URLHash(&#x27;https://www.bytedance.com/en/news&#x27;, 2)─┐</span><br><span class="line">│ 11898456355197509749                            │</span><br><span class="line">└─────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="cityHash64"><a href="#cityHash64" class="headerlink" title="cityHash64"></a>cityHash64</h2><p>Produces a 64-bit <a href="https://github.com/google/cityhash">CityHash</a> hash value.</p><p>This is a fast non-cryptographic hash function. It uses the CityHash algorithm for string parameters and implementation-specific fast non-cryptographic hash function for parameters with other data types. The function uses the CityHash combinator to get the final results.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cityHash64(par1,...)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><p>The function takes a variable number of input parameters. Arguments can be any of the <a href="https://bytedance.feishu.cn/sql-reference/data-types/index.md">supported data types</a> .</p><p><strong>Returned Value</strong></p><p>A <code>UInt64</code>data type hash value.</p><p>Type:<code>UInt64</code></p><p><strong>Examples</strong></p><p>Call example:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cityHash64(<span class="keyword">array</span>(<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;a&#x27;</span>), <span class="string">&#x27;mple&#x27;</span>, <span class="number">10</span>, toDateTime(<span class="string">&#x27;2019-06-15 23:00:00&#x27;</span>)) <span class="keyword">AS</span> CityHash, toTypeName(CityHash) <span class="keyword">AS</span> type;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─CityHash─────────────┬─type───┐</span><br><span class="line">│ 16754903278969853710 │ UInt64 │</span><br><span class="line">└──────────────────────┴────────┘</span><br></pre></td></tr></table></figure><p>The following example shows how to compute the checksum of the entire table with accuracy up to the row order:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> groupBitXor(cityHash64(<span class="operator">*</span>)) <span class="keyword">FROM</span> <span class="keyword">table</span></span><br></pre></td></tr></table></figure><h2 id="farmHash64"><a href="#farmHash64" class="headerlink" title="farmHash64"></a>farmHash64</h2><p>Produces a 64-bit [FarmHash] or Fingerprint value. <code>farmFingerprint64</code> is preferred for a stable and portable value.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">farmFingerprint64(par1, ...)</span><br><span class="line"></span><br><span class="line">farmHash64(par1, ...)</span><br></pre></td></tr></table></figure><p>These functions use the <code>Fingerprint64</code> and <code>Hash64</code> methods respectively from all [available methods] .</p><p><strong>Arguments</strong></p><p>The function takes a variable number of input parameters. Arguments can be any of the [supported data types].</p><p><strong>Returned Value</strong></p><p>An<code>UInt64</code>data type hash value.</p><p>Tyep:<code>UInt64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> farmHash64(<span class="keyword">array</span>(<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;a&#x27;</span>), <span class="string">&#x27;mple&#x27;</span>, <span class="number">10</span>, toDateTime(<span class="string">&#x27;2019-06-15 23:00:00&#x27;</span>)) <span class="keyword">AS</span> FarmHash, toTypeName(FarmHash) <span class="keyword">AS</span> type;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─FarmHash─────────────┬─type───┐</span><br><span class="line">│ 16660843471760112397 │ UInt64 │</span><br><span class="line">└──────────────────────┴────────┘</span><br></pre></td></tr></table></figure><h2 id="gccMurmurHash"><a href="#gccMurmurHash" class="headerlink" title="gccMurmurHash"></a>gccMurmurHash</h2><p>Calculates a 64-bit <a href="https://github.com/aappleby/smhasher">MurmurHash2</a> hash value using the same hash seed as <a href="https://github.com/gcc-mirror/gcc/blob/41d6b10e96a1de98e90a7c0378437c3255814b16/libstdc++-v3/include/bits/functional_hash.h#L191">gcc</a> . It is portable between CLang and GCC builds.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gccMurmurHash(par1, ...)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>par1, ...</code> — A variable number of parameters that can be any of the [supported data types].</li></ul><p><strong>Returned value</strong></p><ul><li>Calculated hash value.</li></ul><p>Type: <code>UInt64</code>.</p><p><strong>Example</strong></p><p>Query:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> gccMurmurHash(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="keyword">AS</span> res1,gccMurmurHash((<span class="string">&#x27;a&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>, (<span class="number">4</span>, [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>], <span class="number">1</span>, (<span class="number">1</span>, <span class="number">2</span>)))) <span class="keyword">AS</span> res2;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res1─────────────────┬─res2────────────────┐</span><br><span class="line">│ 12384823029245979431 │ 1188926775431157506 │</span><br><span class="line">└──────────────────────┴─────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="halfMD5"><a href="#halfMD5" class="headerlink" title="halfMD5"></a>halfMD5</h2><p>[Interprets] all the input parameters as strings and calculates the <a href="https://en.wikipedia.org/wiki/MD5">MD5</a> hash value for each of them. Then combines hashes, takes the first 8 bytes of the hash of the resulting string, and interprets them as <code>UInt64</code> in big-endian byte order.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">halfMD5(par1, ...)</span><br></pre></td></tr></table></figure><p>The function is relatively slow (5 million short strings per second per processor core).</p><p>Consider using the [sipHash64] function instead.</p><p><strong>Arguments</strong></p><p>The function takes a variable number of input parameters. Arguments can be any of the [supported data types].</p><p><strong>Returned Value</strong></p><p>An [UInt64] data type hash value.</p><p>Type: <code>Uini64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> halfMD5(<span class="keyword">array</span>(<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;a&#x27;</span>), <span class="string">&#x27;mple&#x27;</span>, <span class="number">10</span>, toDateTime(<span class="string">&#x27;2019-06-15 23:00:00&#x27;</span>)) <span class="keyword">AS</span> halfMD5hash, toTypeName(halfMD5hash) <span class="keyword">AS</span> type;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─halfMD5hash────────┬─type───┐</span><br><span class="line">│ 236874400738930661 │ UInt64 │</span><br><span class="line">└────────────────────┴────────┘</span><br></pre></td></tr></table></figure><h2 id="hiveHash"><a href="#hiveHash" class="headerlink" title="hiveHash"></a>hiveHash</h2><p>Calculates <code>HiveHash</code> from a string.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> hiveHash(<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>This is just [JavaHash] with zeroed out sign bit. This function is used in <a href="https://en.wikipedia.org/wiki/Apache_Hive">Apache Hive</a> for versions before 3.0. This hash function is neither fast nor having a good quality. The only reason to use it is when this algorithm is already used in another system and you have to calculate exactly the same result.</p><p><strong>Returned value</strong></p><p>A <code>Int32</code> data type hash value.</p><p>Type: <code>hiveHash</code> .</p><p><strong>Example</strong></p><p>Query:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> hiveHash(<span class="string">&#x27;Hello, world!&#x27;</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─hiveHash(&#x27;Hello, world!&#x27;)─┐</span><br><span class="line">│ 267439093                 │</span><br><span class="line">└───────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="intHash32"><a href="#intHash32" class="headerlink" title="intHash32"></a>intHash32</h2><p>Calculates a 32-bit hash code from any type of integer.</p><p>This is a relatively fast non-cryptographic hash function of average quality for numbers.</p><p>TODO: need to re-confirm below sentences.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">intHash32(<span class="type">integer</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>integer</code> – The integer.</li></ul><p><strong>Returned value</strong></p><ul><li>32-bit hash code.</li></ul><p>Type:<code>UInt32</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> intHash32(<span class="number">12072650598913549138</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─intHash32(12072650598913549138)─┐</span><br><span class="line">│ 3406876673                      │</span><br><span class="line">└─────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="intHash64"><a href="#intHash64" class="headerlink" title="intHash64"></a>intHash64</h2><p>Calculates a 64-bit hash code from any type of integer.</p><p>It works faster than intHash32. Average quality.</p><p>TODO: need to re-confirm below sentences.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">intHash64(<span class="type">integer</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>integer</code> – The integer.</li></ul><p><strong>Returned value</strong></p><ul><li>64-bit hash code.</li></ul><p>Type:<code>UInt64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> intHash64(<span class="number">12072650598913549138</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─intHash32(12072650598913549138)─┐</span><br><span class="line">│ 3406876673                      │</span><br><span class="line">└─────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="javaHash"><a href="#javaHash" class="headerlink" title="javaHash"></a>javaHash</h2><p>Calculates <a href="http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/478a4add975b/src/share/classes/java/lang/String.java#l1452">JavaHash</a> from a string. This hash function is neither fast nor having a good quality. The only reason to use it is when this algorithm is already used in another system and you have to calculate exactly the same result.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> javaHash(<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li>A <code>string</code></li></ul><p><strong>Returned value</strong></p><ul><li>A <code>Int32</code> data type hash value.</li></ul><p><strong>Example</strong></p><p>Query:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> javaHash(<span class="string">&#x27;Hello, world!&#x27;</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─javaHash(&#x27;Hello, world!&#x27;)─┐</span><br><span class="line">│ -1880044555               │</span><br><span class="line">└───────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="jumpConsistentHash"><a href="#jumpConsistentHash" class="headerlink" title="jumpConsistentHash"></a>jumpConsistentHash</h2><p>Calculates JumpConsistentHash form a UInt64.</p><p>Accepts two arguments: a <code>UInt64</code>-type key and the number of buckets. Returns <code>Int32</code>.</p><p>For more information, see the link: <a href="https://arxiv.org/pdf/1406.2294.pdf">JumpConsistentHash</a></p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JumpConsistentHash(key, buckets)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>key</code> – An <code>UInt64</code>- type key. </li><li><code>buckets</code> – A number of buckets.</li></ul><p><strong>Returned value</strong></p><ul><li>Result in <code>Int32</code>.</li></ul><p>Type：<code>Int32</code></p><p><strong>Example</strong></p><p>TODO: improve below example if necessary</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> jumpConsistentHash(<span class="number">18446744073709551615</span>, <span class="number">12</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─jumpConsistentHash(18446744073709551615, 12)─┐</span><br><span class="line">│ 10                                           │</span><br><span class="line">└──────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="metroHash64"><a href="#metroHash64" class="headerlink" title="metroHash64"></a>metroHash64</h2><p>Produces a 64-bit <a href="http://www.jandrewrogers.com/2015/05/27/metrohash/">MetroHash</a> hash value.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">metroHash64(par1, ...)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><p>The function takes a variable number of input parameters. Arguments can be any of the [supported data types] .</p><p><strong>Returned Value</strong></p><p>A [UInt64] data type hash value.</p><p>Type：<code>UInt64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> metroHash64(<span class="keyword">array</span>(<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;a&#x27;</span>), <span class="string">&#x27;mple&#x27;</span>, <span class="number">10</span>, toDateTime(<span class="string">&#x27;2019-06-15 23:00:00&#x27;</span>)) <span class="keyword">AS</span> MetroHash, toTypeName(MetroHash) <span class="keyword">AS</span> type;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─MetroHash────────────┬─type───┐</span><br><span class="line">│ 15061233052885528061 │ UInt64 │</span><br><span class="line">└──────────────────────┴────────┘</span><br></pre></td></tr></table></figure><h2 id="murmurHash2-32"><a href="#murmurHash2-32" class="headerlink" title="murmurHash2_32"></a>murmurHash2_32</h2><p>Produces a <a href="https://github.com/aappleby/smhasher/">MurmurHash2</a> hash value.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">murmurHash2_32(par1, ...)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><p>Both functions take a variable number of input parameters. Arguments can be any of the [supported data types] .</p><p><strong>Returned Value</strong></p><ul><li>The <code>murmurHash2_32</code> function returns hash value having the [UInt32] data type.</li></ul><p>Type: <code>Uint32</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> murmurHash2_32(<span class="string">&#x27;test&#x27;</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─murmurHash2_32(&#x27;test&#x27;)─┐</span><br><span class="line">│ 403862830              │</span><br><span class="line">└────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="murmurHash2-64"><a href="#murmurHash2-64" class="headerlink" title="murmurHash2_64"></a>murmurHash2_64</h2><p>Produces a <a href="https://github.com/aappleby/smhasher">MurmurHash2</a> hash value.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">murmurHash2_64(par1, ...)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><p>Both functions take a variable number of input parameters. Arguments can be any of the <a href="">supported data types</a> .</p><p><strong>Returned Value</strong></p><ul><li>The <code>murmurHash2_64</code> function returns hash value having the <a href="">UInt64</a> data type.</li></ul><p>Type: <code>Uint64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> murmurHash2_64(<span class="keyword">array</span>(<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;a&#x27;</span>), <span class="string">&#x27;mple&#x27;</span>, <span class="number">10</span>, toDateTime(<span class="string">&#x27;2019-06-15 23:00:00&#x27;</span>)) <span class="keyword">AS</span> MurmurHash2, toTypeName(MurmurHash2) <span class="keyword">AS</span> type;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─MurmurHash2────────┬─type───┐</span><br><span class="line">│ 178997598777428518 │ UInt64 │</span><br><span class="line">└────────────────────┴────────┘</span><br></pre></td></tr></table></figure><h2 id="murmurHash3-128"><a href="#murmurHash3-128" class="headerlink" title="murmurHash3_128"></a>murmurHash3_128</h2><p>Produces a 128-bit <a href="https://github.com/aappleby/smhasher">MurmurHash3</a> hash value.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">murmurHash3_128( expr )</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>expr</code> — <a href="">Expressions</a> returning a <a href="">String</a> -type value.</li></ul><p><strong>Returned Value</strong></p><ul><li>A <a href="">FixedString(16)</a> data type hash value.</li></ul><p>Type: <code>FixedString(16)</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> hex(murmurHash3_128(<span class="string">&#x27;example_string&#x27;</span>)) <span class="keyword">AS</span> MurmurHash3, toTypeName(MurmurHash3) <span class="keyword">AS</span> type;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─MurmurHash3──────────────────────┬─type───┐</span><br><span class="line">│ 368A1A311CB7342253354B548E7E7E71 │ String │</span><br><span class="line">└──────────────────────────────────┴────────┘</span><br></pre></td></tr></table></figure><h2 id="murmurHash3-32"><a href="#murmurHash3-32" class="headerlink" title="murmurHash3_32"></a>murmurHash3_32</h2><p>Produces a <a href="https://github.com/aappleby/smhasher">MurmurHash3</a> hash value.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">murmurHash3_32(par1, ...)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><p>Both functions take a variable number of input parameters. Arguments can be any of the <a href="">supported data types</a> .</p><p><strong>Returned Value</strong></p><ul><li>The <code>murmurHash3_32</code> function returns a <a href="">UInt32</a> data type hash value.</li></ul><p>Type: <code>Uint32</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> murmurHash3_32(<span class="keyword">array</span>(<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;a&#x27;</span>), <span class="string">&#x27;mple&#x27;</span>, <span class="number">10</span>, toDateTime(<span class="string">&#x27;2019-06-15 23:00:00&#x27;</span>)) <span class="keyword">AS</span> MurmurHash3, toTypeName(MurmurHash3) <span class="keyword">AS</span> type;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─MurmurHash3─┬─type───┐</span><br><span class="line">│ 3163913960  │ UInt32 │</span><br><span class="line">└─────────────┴────────┘</span><br></pre></td></tr></table></figure><h2 id="murmurHash3-64"><a href="#murmurHash3-64" class="headerlink" title="murmurHash3_64"></a>murmurHash3_64</h2><p>Produces a <a href="https://github.com/aappleby/smhasher">MurmurHash3</a> hash value.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">murmurHash3_64(par1, ...)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><p>Both functions take a variable number of input parameters. Arguments can be any of the <a href="">supported data types</a> .</p><p><strong>Returned Value</strong></p><ul><li>The <code>murmurHash3_64</code> function returns a <a href="">UInt64</a> data type hash value.</li></ul><p>Type：<code>Uint64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> murmurHash3_64(<span class="keyword">array</span>(<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;a&#x27;</span>), <span class="string">&#x27;mple&#x27;</span>, <span class="number">10</span>, toDateTime(<span class="string">&#x27;2019-06-15 23:00:00&#x27;</span>)) <span class="keyword">AS</span> MurmurHash3, toTypeName(MurmurHash3) <span class="keyword">AS</span> type;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─MurmurHash3──────────┬─type───┐</span><br><span class="line">│ 12839777463072566684 │ UInt64 │</span><br><span class="line">└──────────────────────┴────────┘</span><br></pre></td></tr></table></figure><h2 id="sipHash128"><a href="#sipHash128" class="headerlink" title="sipHash128"></a>sipHash128</h2><p>Calculates SipHash from a string.</p><p>Accepts a String-type argument. Returns FixedString(16).</p><p>Differs from sipHash64 in that the final xor-folding state is only done up to 128 bits.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sipHash128(par1,...)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><p>The function takes a variable number of input parameters. Arguments can be any of the <a href="">supported data types</a> .</p><p><strong>Returned Value</strong></p><p>A <a href="">UInt64</a> data type hash value.</p><p>Type: <code>Uint64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sipHash128(<span class="string">&#x27;test sipHash128&#x27;</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─sipHash128(&#x27;test sipHash128&#x27;)─┐</span><br><span class="line">│ av&#x27;??&quot;????bk??:              │</span><br><span class="line">└───────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="sipHash64"><a href="#sipHash64" class="headerlink" title="sipHash64"></a>sipHash64</h2><p>Produces a 64-bit <a href="https://github.com/veorq/SipHash/">SipHash</a> hash value.</p><p>This is a cryptographic hash function. It works at least three times faster than the <a href="">MD5</a> function.</p><p>Function <a href="">interprets</a> all the input parameters as strings and calculates the hash value for each of them. Then combines hashes by the following algorithm:</p><ul><li><p>After hashing all the input parameters, the function gets the array of hashes. </p></li><li><p>Function takes the first and the second elements and calculates a hash for the array of them. </p></li><li><p>Then the function takes the hash value, calculated at the previous step, and the third element of the initial hash array, and calculates a hash for the array of them. </p></li><li><p>The previous step is repeated for all the remaining elements of the initial hash array.</p></li></ul><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sipHash64(par1,...)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><p>The function takes a variable number of input parameters. Arguments can be any of the <a href="">supported data types</a> .</p><p><strong>Returned Value</strong></p><p>A <a href="">UInt64</a> data type hash value.</p><p>Type: <code>Uint64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sipHash64(<span class="keyword">array</span>(<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;a&#x27;</span>), <span class="string">&#x27;mple&#x27;</span>, <span class="number">10</span>, toDateTime(<span class="string">&#x27;2019-06-15 23:00:00&#x27;</span>)) <span class="keyword">AS</span> SipHash, toTypeName(SipHash) <span class="keyword">AS</span> type;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─SipHash─────────────┬─type───┐</span><br><span class="line">│ 7934052906670448870 │ UInt64 │</span><br><span class="line">└─────────────────────┴────────┘</span><br></pre></td></tr></table></figure><h2 id="xxHash32"><a href="#xxHash32" class="headerlink" title="xxHash32"></a>xxHash32</h2><p>Calculates <code>xxHash</code> from a string.</p><p><code>xxHash</code> is an extremely fast non-cryptographic hash algorithm, working at RAM speed limit.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> xxHash32(s)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>s</code> – The string.</li></ul><p><strong>Returned value</strong></p><p>A <code>Uint32</code> data type hash value.</p><p>Type: <code>UInt32</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> xxHash32(<span class="string">&#x27;Hello, world!&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─xxHash32(&#x27;Hello, world!&#x27;)─┐</span><br><span class="line">│ 834093149                 │</span><br><span class="line">└───────────────────────────┘</span><br></pre></td></tr></table></figure><p><strong>See Also</strong></p><ul><li><a href="http://cyan4973.github.io/xxHash/">xxHash</a> .</li></ul><h2 id="xxHash64"><a href="#xxHash64" class="headerlink" title="xxHash64"></a>xxHash64</h2><p>Calculates <code>xxHash</code> from a string.</p><p><code>xxHash</code> is an extremely fast non-cryptographic hash algorithm, working at RAM speed limit.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> xxHash64(s)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>s</code> – The string.</li></ul><p><strong>Returned value</strong></p><p>A <code>Uint64</code> data type hash value.</p><p>Type: <code>UInt64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> xxHash64(<span class="string">&#x27;Hello, world!&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─xxHash64(&#x27;Hello, world!&#x27;)─┐</span><br><span class="line">│ 17691043854468224118      │</span><br><span class="line">└───────────────────────────┘</span><br></pre></td></tr></table></figure><p><strong>See Also</strong></p><ul><li><a href="http://cyan4973.github.io/xxHash/">xxHash</a> .</li></ul>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> SQL_Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IP Address</title>
      <link href="/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/ip-address/"/>
      <url>/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/ip-address/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Notice:<br>Some of the examples below are referenced from <a href="https://clickhouse.com/docs/en/sql-reference/functions/">ClickHouse Documentation</a> but have been adapted and modified to work in ByteHouse.</p></blockquote><h2 id="IPv4NumToString"><a href="#IPv4NumToString" class="headerlink" title="IPv4NumToString"></a>IPv4NumToString</h2><p>Takes a UInt32 number. Interprets it as an IPv4 address in big endian. Returns a string containing the corresponding IPv4 address in the format A.B.C.d (dot-separated numbers in decimal form).</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IPv4NumToString(num)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>num</code> – a UInt32 number.</li></ul><p><strong>Returned value</strong></p><ul><li>A string in ipv4 representation.</li></ul><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toIPv4(<span class="string">&#x27;116.106.34.242&#x27;</span>) <span class="keyword">as</span> ipv4, toTypeName(ipv4), IPv4NumToString(ipv4) <span class="keyword">as</span> ipv4_string, toTypeName(ipv4_string)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─ipv4───────────┬─toTypeName(toIPv4(&#x27;116.106.34.242&#x27;))─┬─ipv4_string────┬─toTypeName(IPv4NumToString(toIPv4(&#x27;116.106.34.242&#x27;)))─┐</span><br><span class="line">│ 242.34.106.116 │ IPv4                                 │ 116.106.34.242 │ String                                                │</span><br><span class="line">└────────────────┴──────────────────────────────────────┴────────────────┴───────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="IPv4NumToStringClassC"><a href="#IPv4NumToStringClassC" class="headerlink" title="IPv4NumToStringClassC"></a>IPv4NumToStringClassC</h2><p>Similar to <code>IPv4NumToString</code>, but using xxx instead of the last octet.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IPv4NumToStringClassC(num)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>num</code> – a UInt32 number.</li></ul><p><strong>Returned value</strong></p><ul><li>An string in ipv4 representation, but using xxx instead of the last octet.</li></ul><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toIPv4(<span class="string">&#x27;116.106.34.242&#x27;</span>) <span class="keyword">as</span> ipv4, toTypeName(ipv4), IPv4NumToStringClassC(ipv4) <span class="keyword">as</span> ipv4_string, toTypeName(ipv4_string)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─ipv4───────────┬─toTypeName(toIPv4(&#x27;116.106.34.242&#x27;))─┬─ipv4_string────┬─toTypeName(IPv4NumToStringClassC(toIPv4(&#x27;116.106.34.242&#x27;)))─┐</span><br><span class="line">│ 242.34.106.116 │ IPv4                                 │ 116.106.34.xxx │ String                                                      │</span><br><span class="line">└────────────────┴──────────────────────────────────────┴────────────────┴─────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="IPv4StringToNum"><a href="#IPv4StringToNum" class="headerlink" title="IPv4StringToNum"></a>IPv4StringToNum</h2><p>The reverse function of IPv4NumToString. If the IPv4 address has an invalid format, it returns 0.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IPv4StringToNum(s)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>s</code> – ipv4 in string representation.</li></ul><p><strong>Returned value</strong></p><ul><li>UInt32.</li></ul><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> IPv4StringToNum(<span class="string">&#x27;116.106.34.242&#x27;</span>) <span class="keyword">as</span> ipv4, toTypeName(ipv4), IPv4NumToString(ipv4) <span class="keyword">as</span> ipv4_string, toTypeName(ipv4_string)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─ipv4───────┬─toTypeName(IPv4StringToNum(&#x27;116.106.34.242&#x27;))─┬─ipv4_string────┬─toTypeName(IPv4NumToString(IPv4StringToNum(&#x27;116.106.34.242&#x27;)))─┐</span><br><span class="line">│ 1953112818 │ UInt32                                        │ 116.106.34.242 │ String                                                         │</span><br><span class="line">└────────────┴───────────────────────────────────────────────┴────────────────┴────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="IPv4ToIPv6"><a href="#IPv4ToIPv6" class="headerlink" title="IPv4ToIPv6"></a>IPv4ToIPv6</h2><p>Takes a <code>UInt32</code> number. Interprets it as an IPv4 address in <a href="https://en.wikipedia.org/wiki/Endianness">big endian</a> . Returns a <code>FixedString(16)</code> value containing the IPv6 address in binary format.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IPv4ToIPv6(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – a <code>UInt32</code> number</li></ul><p><strong>Returned value</strong></p><ul><li>IPv6 address in binary format.FixedString(16)</li></ul><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> IPv4StringToNum(<span class="string">&#x27;192.168.0.1&#x27;</span>) <span class="keyword">as</span> ipv4, IPv6NumToString(IPv4ToIPv6(ipv4)) <span class="keyword">as</span> ipv6_string</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─ipv4───────┬─ipv6_string────────┐</span><br><span class="line">│ 3232235521 │ ::ffff:192.168.0.1 │</span><br><span class="line">└────────────┴────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="IPv6NumToString"><a href="#IPv6NumToString" class="headerlink" title="IPv6NumToString"></a>IPv6NumToString</h2><p>Accepts a FixedString(16) value containing the IPv6 address in binary format. Returns a string containing this address in text format.</p><p>IPv6-mapped IPv4 addresses are output in the format ::ffff:111.222.33.44.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IPv6NumToString(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – FixedString(16) value containing the IPv6 address in binary format</li></ul><p><strong>Returned value</strong></p><ul><li>A string in ipv6 representation.</li></ul><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> IPv6NumToString(toFixedString(unhex(<span class="string">&#x27;2A0206B8000000000000000000000011&#x27;</span>), <span class="number">16</span>)) <span class="keyword">AS</span> addr;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─addr─────────┐</span><br><span class="line">│ 2a02:6b8::11 │</span><br><span class="line">└──────────────┘</span><br></pre></td></tr></table></figure><h2 id="IPv6StringToNum"><a href="#IPv6StringToNum" class="headerlink" title="IPv6StringToNum"></a>IPv6StringToNum</h2><p>The reverse function of <code>IPv6NumToString</code>. If the IPv6 address has an invalid format, it returns a string of null bytes.<br>If the input string contains a valid IPv4 address, returns its IPv6 equivalent.<br>HEX can be uppercase or lowercase.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IPv6StringToNum(string)</span><br></pre></td></tr></table></figure><p><strong>Argument</strong> </p><ul><li><code>string</code> — IP address. String.</li></ul><p><strong>Returned value</strong></p><ul><li>IPv6 address in binary format. Type: FixedString(16).</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> addr, cutIPv6(IPv6StringToNum(addr), <span class="number">0</span>, <span class="number">0</span>) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> [<span class="string">&#x27;notaddress&#x27;</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="string">&#x27;1111::ffff&#x27;</span>] <span class="keyword">AS</span> addr) <span class="keyword">ARRAY</span> <span class="keyword">JOIN</span> addr;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">┌─addr───────┬─cutIPv6(IPv6StringToNum(addr), 0, 0)─┐</span><br><span class="line">│ notaddress │ ::                                   │</span><br><span class="line">│ 127.0.0.1  │ ::                                   │</span><br><span class="line">│ 1111::ffff │ 1111::ffff                           │</span><br><span class="line">└────────────┴──────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="cutIPv6"><a href="#cutIPv6" class="headerlink" title="cutIPv6"></a>cutIPv6</h2><p>Accepts a FixedString(16) value containing the IPv6 address in binary format. Returns a string containing the address of the specified number of bytes removed in text format.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cutIPv6(x, bytesToCutForIPv6, bytesToCutForIPv4)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – a FixedString(16) value containing the IPv6 address in binary format</li><li><code>bytesToCutForIPv6</code> - number of bytes to cut for ipv6 represenration</li><li><code>bytesToCutForIPv4</code> - number of bytes to cut for ipv4 represenration</li></ul><p><strong>Returned value</strong><br>A <code>Uint64</code> data type hash value.</p><p>Type: <code>UInt64</code></p><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span></span><br><span class="line">    IPv6StringToNum(<span class="string">&#x27;2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D&#x27;</span>) <span class="keyword">AS</span> ipv6,</span><br><span class="line">    IPv4ToIPv6(IPv4StringToNum(<span class="string">&#x27;192.168.0.1&#x27;</span>)) <span class="keyword">AS</span> ipv4</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    cutIPv6(ipv6, <span class="number">2</span>, <span class="number">0</span>),</span><br><span class="line">    cutIPv6(ipv4, <span class="number">0</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─cutIPv6(ipv6, 2, 0)─────────────────┬─cutIPv6(ipv4, 0, 2)─┐</span><br><span class="line">│ 2001:db8:ac10:fe01:feed:babe:cafe:0 │ ::ffff:192.168.0.0  │</span><br><span class="line">└─────────────────────────────────────┴─────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toIPv4"><a href="#toIPv4" class="headerlink" title="toIPv4"></a>toIPv4</h2><p>An alias to <code>IPv4StringToNum()</code> that takes a string form of IPv4 address and returns value of IPv4 type, which is binary equal to value returned by <code>IPv4StringToNum()</code> .</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toIPv4(string)</span><br></pre></td></tr></table></figure><p><strong>Argument</strong> </p><ul><li><code>string</code> — IP address. String.</li></ul><p><strong>Returned value</strong></p><ul><li>IPv4 type</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span></span><br><span class="line">    <span class="string">&#x27;171.225.130.45&#x27;</span> <span class="keyword">as</span> IPv4_string</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    toTypeName(IPv4StringToNum(IPv4_string)),</span><br><span class="line">    toTypeName(toIPv4(IPv4_string))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toTypeName(IPv4StringToNum(IPv4_string))─┬─toTypeName(toIPv4(IPv4_string))─┐</span><br><span class="line">│ UInt32                                   │ IPv4                            │</span><br><span class="line">└──────────────────────────────────────────┴─────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span></span><br><span class="line">    <span class="string">&#x27;171.225.130.45&#x27;</span> <span class="keyword">as</span> IPv4_string</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    hex(IPv4StringToNum(IPv4_string)),</span><br><span class="line">    hex(toIPv4(IPv4_string))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─hex(IPv4StringToNum(IPv4_string))─┬─hex(toIPv4(IPv4_string))─┐</span><br><span class="line">│ ABE1822D                          │ ABE1822D                 │</span><br><span class="line">└───────────────────────────────────┴──────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toIPv6"><a href="#toIPv6" class="headerlink" title="toIPv6"></a>toIPv6</h2><p>Converts a string form of IPv6 address to IPv6 type. If the IPv6 address has an invalid format, returns an empty value.<br>Similar to IPv6StringToNum function, which converts IPv6 address to binary format.</p><!-- TODO: CNCH does not support convert IPv4 to IPv6 so farIf the input string contains a valid IPv4 address, then the IPv6 equivalent of the IPv4 address is returned. --><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toIPv6(string)</span><br></pre></td></tr></table></figure><p><strong>Argument</strong></p><ul><li><code>string</code> — IP address. String</li></ul><p><strong>Returned value</strong></p><ul><li>IP address. Type: IPv6.</li></ul><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> <span class="string">&#x27;2001:438:ffff::407d:1bc1&#x27;</span> <span class="keyword">AS</span> IPv6_string</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    hex(IPv6StringToNum(IPv6_string)),</span><br><span class="line">    hex(toIPv6(IPv6_string));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─hex(IPv6StringToNum(IPv6_string))─┬─hex(toIPv6(IPv6_string))─────────┐</span><br><span class="line">│ 20010438FFFF000000000000407D1BC1  │ 20010438FFFF000000000000407D1BC1 │</span><br><span class="line">└───────────────────────────────────┴──────────────────────────────────┘</span><br></pre></td></tr></table></figure><!-- TODO: ByteHouse not work as expected<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toIPv6(<span class="string">&#x27;127.0.0.1&#x27;</span>);</span><br></pre></td></tr></table></figure><p><code>plain%20text ┌─toIPv6(&#39;127.0.0.1&#39;)─┐ │ ::ffff:127.0.0.1    │ └─────────────────────┘ </code> –&gt;</p>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> SQL_Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON</title>
      <link href="/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/json/"/>
      <url>/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/json/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Notice:<br>Some of the examples below are referenced from <a href="https://clickhouse.com/docs/en/sql-reference/functions/">ClickHouse Documentation</a> but have been adapted and modified to work in ByteHouse.</p></blockquote><h2 id="JSONExtract"><a href="#JSONExtract" class="headerlink" title="JSONExtract"></a>JSONExtract</h2><p>Parses a JSON and extract a value of the given ByteHouse data type.<br>This is a generalization of the previous <code>JSONExtract&lt;type&gt;</code> functions.<br>This means<br><code>JSONExtract(..., &#39;String&#39;)</code> returns exactly the same as <code>JSONExtractString()</code> ,<br><code>JSONExtract(..., &#39;Float64&#39;)</code> returns exactly the same as <code>JSONExtractFloat()</code> .</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSONExtract(json[, indices_or_keys…], Return_type)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>json</code> – json string. </li><li><code>indices_or_keys</code> - is a list of zero or more arguments each of them can be either string or integer.<ul><li>String &#x3D; access object member by key. </li><li>Positive integer &#x3D; access the n-th member&#x2F;key from the beginning. </li><li>Negative integer &#x3D; access the n-th member&#x2F;key from the end. </li><li>Minimum index of the element is 1. Thus the element 0 does not exist.</li><li>You may use integers to access both JSON arrays and JSON objects.</li></ul></li><li><code>Return_type</code> – ByteHouse data type.</li></ul><p><strong>Returned value</strong></p><ul><li>Extracted value of the given ByteHouse data type.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JSONExtract(<span class="string">&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;</span>, <span class="string">&#x27;Tuple(String, Array(Float64))&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─JSONExtract(&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;, &#x27;Tuple(String, Array(Float64))&#x27;)─┐</span><br><span class="line">│ (hello, [-1e+02, 2e+02, 3e+02])                                                         │</span><br><span class="line">└─────────────────────────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><!-- TODO: Gateway client returns errors for this query<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JSONExtract(<span class="string">&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;</span>, <span class="string">&#x27;Tuple(b Array(Float64), a String)&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">``` --&gt;</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">SELECT JSONExtract(&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;, &#x27;b&#x27;, &#x27;Array(Nullable(Int8))&#x27;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─JSONExtract(&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;, &#x27;b&#x27;, &#x27;Array(Nullable(Int8))&#x27;)─┐</span><br><span class="line">│ [-100, ᴺᵁᴸᴸ, ᴺᵁᴸᴸ]                                                                   │</span><br><span class="line">└──────────────────────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JSONExtract(<span class="string">&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">4</span>, <span class="string">&#x27;Nullable(Int64)&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─JSONExtract(&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;, &#x27;b&#x27;, 4, &#x27;Nullable(Int64)&#x27;)─┐</span><br><span class="line">│ ᴺᵁᴸᴸ                                                                              │</span><br><span class="line">└───────────────────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JSONExtract(<span class="string">&#x27;&#123;&quot;passed&quot;: true&#125;&#x27;</span>, <span class="string">&#x27;passed&#x27;</span>, <span class="string">&#x27;UInt8&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─JSONExtract(&#x27;&#123;&quot;passed&quot;: true&#125;&#x27;, &#x27;passed&#x27;, &#x27;UInt8&#x27;)─┐</span><br><span class="line">│ 1                                                  │</span><br><span class="line">└────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JSONExtract(<span class="string">&#x27;&#123;&quot;day&quot;: &quot;Thursday&quot;&#125;&#x27;</span>, <span class="string">&#x27;day&#x27;</span>, <span class="string">&#x27;Enum8(\&#x27;</span>Sunday\<span class="string">&#x27; = 0, \&#x27;</span>Monday\<span class="string">&#x27; = 1, \&#x27;</span>Tuesday\<span class="string">&#x27; = 2, \&#x27;</span>Wednesday\<span class="string">&#x27; = 3, \&#x27;</span>Thursday\<span class="string">&#x27; = 4, \&#x27;</span>Friday\<span class="string">&#x27; = 5, \&#x27;</span>Saturday\<span class="string">&#x27; = 6)&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─JSONExtract(&#x27;&#123;&quot;day&quot;: &quot;Thursday&quot;&#125;&#x27;, &#x27;day&#x27;, &#x27;Enum8(\&#x27;Sunday\&#x27; = 0, \&#x27;Monday\&#x27; = 1, \&#x27;Tuesday\&#x27; = 2, \&#x27;Wednesday\&#x27; = 3, \&#x27;Thursday\&#x27; = 4, \&#x27;Friday\&#x27; = 5, \&#x27;Saturday\&#x27; = 6)&#x27;)─┐</span><br><span class="line">│ Thursday                                                                                                                                                                   │</span><br><span class="line">└────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JSONExtract(<span class="string">&#x27;&#123;&quot;day&quot;: 5&#125;&#x27;</span>, <span class="string">&#x27;day&#x27;</span>, <span class="string">&#x27;Enum8(\&#x27;</span>Sunday\<span class="string">&#x27; = 0, \&#x27;</span>Monday\<span class="string">&#x27; = 1, \&#x27;</span>Tuesday\<span class="string">&#x27; = 2, \&#x27;</span>Wednesday\<span class="string">&#x27; = 3, \&#x27;</span>Thursday\<span class="string">&#x27; = 4, \&#x27;</span>Friday\<span class="string">&#x27; = 5, \&#x27;</span>Saturday\<span class="string">&#x27; = 6)&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─JSONExtract(&#x27;&#123;&quot;day&quot;: 5&#125;&#x27;, &#x27;day&#x27;, &#x27;Enum8(\&#x27;Sunday\&#x27; = 0, \&#x27;Monday\&#x27; = 1, \&#x27;Tuesday\&#x27; = 2, \&#x27;Wednesday\&#x27; = 3, \&#x27;Thursday\&#x27; = 4, \&#x27;Friday\&#x27; = 5, \&#x27;Saturday\&#x27; = 6)&#x27;)─┐</span><br><span class="line">│ Friday                                                                                                                                                            │</span><br><span class="line">└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="JSONExtractBool"><a href="#JSONExtractBool" class="headerlink" title="JSONExtractBool"></a>JSONExtractBool</h2><p>Parses a JSON and extract a value. These functions are similar to <code>visitParam</code> functions.<br>If the value does not exist or has a wrong type, <code>0</code> will be returned.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSONExtractBool(json\[, indices_or_keys\]…) </span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>json</code> – json string. </li><li><code>indices_or_keys</code> - is a list of zero or more arguments each of them can be either string or integer.<ul><li>String &#x3D; access object member by key. </li><li>Positive integer &#x3D; access the n-th member&#x2F;key from the beginning. </li><li>Negative integer &#x3D; access the n-th member&#x2F;key from the end. </li><li>Minimum index of the element is 1. Thus the element 0 does not exist.</li><li>You may use integers to access both JSON arrays and JSON objects.</li></ul></li></ul><p><strong>Returned value</strong></p><ul><li>UInt8.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JSONExtractBool(<span class="string">&#x27;&#123;&quot;passed&quot;: true&#125;&#x27;</span>,<span class="string">&#x27;passed&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─JSONExtractBool(&#x27;&#123;&quot;passed&quot;: true&#125;&#x27;, &#x27;passed&#x27;)─┐</span><br><span class="line">│ 1                                             │</span><br><span class="line">└───────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JSONExtractBool(<span class="string">&#x27;&#123;&quot;passed&quot;: false&#125;&#x27;</span>,<span class="string">&#x27;passed&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─JSONExtractBool(&#x27;&#123;&quot;passed&quot;: false&#125;&#x27;, &#x27;passed&#x27;)─┐</span><br><span class="line">│ 0                                              │</span><br><span class="line">└────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="JSONExtractFloat"><a href="#JSONExtractFloat" class="headerlink" title="JSONExtractFloat"></a>JSONExtractFloat</h2><p>Parses a JSON and extract a value. These functions are similar to <code>visitParam</code> functions.<br>If the value does not exist or has a wrong type, <code>0</code> will be returned.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSONExtractFloat(json\[, indices_or_keys\]…) </span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>json</code> – json string. </li><li><code>indices_or_keys</code> - is a list of zero or more arguments each of them can be either string or integer.<ul><li>String &#x3D; access object member by key. </li><li>Positive integer &#x3D; access the n-th member&#x2F;key from the beginning. </li><li>Negative integer &#x3D; access the n-th member&#x2F;key from the end. </li><li>Minimum index of the element is 1. Thus the element 0 does not exist.</li><li>You may use integers to access both JSON arrays and JSON objects.</li></ul></li></ul><p><strong>Returned value</strong></p><ul><li>Float64.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JSONExtractFloat(<span class="string">&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─JSONExtractFloat(&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;, &#x27;b&#x27;, 2)─┐</span><br><span class="line">│ 2e+02                                                               │</span><br><span class="line">└─────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="JSONExtractInt"><a href="#JSONExtractInt" class="headerlink" title="JSONExtractInt"></a>JSONExtractInt</h2><p>Parses a JSON and extract a value. These functions are similar to <code>visitParam</code> functions.<br>If the value does not exist or has a wrong type, <code>0</code> will be returned.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSONExtractInt(json\[, indices_or_keys\]…) </span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>json</code> – json string. </li><li><code>indices_or_keys</code> - is a list of zero or more arguments each of them can be either string or integer.<ul><li>String &#x3D; access object member by key. </li><li>Positive integer &#x3D; access the n-th member&#x2F;key from the beginning. </li><li>Negative integer &#x3D; access the n-th member&#x2F;key from the end. </li><li>Minimum index of the element is 1. Thus the element 0 does not exist.</li><li>You may use integers to access both JSON arrays and JSON objects.</li></ul></li></ul><p><strong>Returned value</strong></p><ul><li>Int64.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JSONExtractInt(<span class="string">&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─JSONExtractInt(&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;, &#x27;b&#x27;, 1)─┐</span><br><span class="line">│ -100                                                              │</span><br><span class="line">└───────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="JSONExtractKeysAndValues"><a href="#JSONExtractKeysAndValues" class="headerlink" title="JSONExtractKeysAndValues"></a>JSONExtractKeysAndValues</h2><p>Parses key-value pairs from a JSON where the values are of the given ByteHouse data type.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSONExtractKeysAndValues(json[, indices_or_keys…], Value_type)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>json</code> – json string. </li><li><code>indices_or_keys</code> - is a list of zero or more arguments each of them can be either string or integer.<ul><li>String &#x3D; access object member by key. </li><li>Positive integer &#x3D; access the n-th member&#x2F;key from the beginning. </li><li>Negative integer &#x3D; access the n-th member&#x2F;key from the end. </li><li>Minimum index of the element is 1. Thus the element 0 does not exist.</li><li>You may use integers to access both JSON arrays and JSON objects.</li></ul></li><li><code>Value_type</code> - json value data type</li></ul><p><strong>Returned value</strong></p><ul><li>key-value pairs</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JSONExtractKeysAndValues(<span class="string">&#x27;&#123;&quot;x&quot;: &#123;&quot;a&quot;: 5, &quot;b&quot;: 7, &quot;c&quot;: 11&#125;&#125;&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;Int8&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─JSONExtractKeysAndValues(&#x27;&#123;&quot;x&quot;: &#123;&quot;a&quot;: 5, &quot;b&quot;: 7, &quot;c&quot;: 11&#125;&#125;&#x27;, &#x27;x&#x27;, &#x27;Int8&#x27;)─┐</span><br><span class="line">│ [(a, 5), (b, 7), (c, 11)]                                                 │</span><br><span class="line">└───────────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="JSONExtractRaw"><a href="#JSONExtractRaw" class="headerlink" title="JSONExtractRaw"></a>JSONExtractRaw</h2><p>Returns a part of JSON as unparsed string.<br>If the part does not exist or has a wrong type, an empty string will be returned.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSONExtractRaw(json\[, indices_or_keys\]…)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>json</code> – json string. </li><li><code>indices_or_keys</code> - is a list of zero or more arguments each of them can be either string or integer.<ul><li>String &#x3D; access object member by key. </li><li>Positive integer &#x3D; access the n-th member&#x2F;key from the beginning. </li><li>Negative integer &#x3D; access the n-th member&#x2F;key from the end. </li><li>Minimum index of the element is 1. Thus the element 0 does not exist.</li><li>You may use integers to access both JSON arrays and JSON objects.</li></ul></li></ul><p><strong>Returned value</strong></p><ul><li>String</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JSONExtractRaw(<span class="string">&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;</span>, <span class="string">&#x27;b&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─JSONExtractRaw(&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;, &#x27;b&#x27;)─┐</span><br><span class="line">│ [-100,200,300]                                                 │</span><br><span class="line">└────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="JSONExtractString"><a href="#JSONExtractString" class="headerlink" title="JSONExtractString"></a>JSONExtractString</h2><p>Parse a JSON and extract a string. This function is similar to <code>visitParamExtractString</code> functions.<br>If the value does not exist or has a wrong type, an empty string will be returned.<br>The value is unescaped. If unescaping failed, it returns an empty string.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSONExtractString(json\[, indices_or_keys\]…)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>json</code> – json string. </li><li><code>indices_or_keys</code> - is a list of zero or more arguments each of them can be either string or integer.<ul><li>String &#x3D; access object member by key. </li><li>Positive integer &#x3D; access the n-th member&#x2F;key from the beginning. </li><li>Negative integer &#x3D; access the n-th member&#x2F;key from the end. </li><li>Minimum index of the element is 1. Thus the element 0 does not exist.</li><li>You may use integers to access both JSON arrays and JSON objects.</li></ul></li></ul><p><strong>Returned value</strong></p><ul><li>String</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JSONExtractString(<span class="string">&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;</span>, <span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─JSONExtractString(&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;, &#x27;a&#x27;)─┐</span><br><span class="line">│ hello                                                             │</span><br><span class="line">└───────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JSONExtractString(<span class="string">&#x27;&#123;&quot;abc&quot;:&quot;\\u263a&quot;&#125;&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─JSONExtractString(&#x27;&#123;&quot;abc&quot;:&quot;\\u263a&quot;&#125;&#x27;, &#x27;abc&#x27;)─┐</span><br><span class="line">│ ☺                                             │</span><br><span class="line">└───────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JSONExtractString(<span class="string">&#x27;&#123;&quot;abc&quot;:&quot;\\u263&quot;&#125;&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─JSONExtractString(&#x27;&#123;&quot;abc&quot;:&quot;\\u263&quot;&#125;&#x27;, &#x27;abc&#x27;)─┐</span><br><span class="line">│                                              │</span><br><span class="line">└──────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JSONExtractString(<span class="string">&#x27;&#123;&quot;abc&quot;:&quot;hello&#125;&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─JSONExtractString(&#x27;&#123;&quot;abc&quot;:&quot;hello&#125;&#x27;, &#x27;abc&#x27;)─┐</span><br><span class="line">│                                            │</span><br><span class="line">└────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="JSONExtractUInt"><a href="#JSONExtractUInt" class="headerlink" title="JSONExtractUInt"></a>JSONExtractUInt</h2><p>Parses a JSON and extract a value. These functions are similar to <code>visitParam</code> functions.<br>If the value does not exist or has a wrong type, <code>0</code> will be returned.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSONExtractUInt(json\[, indices_or_keys\]…) </span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>json</code> – json string. </li><li><code>indices_or_keys</code> - is a list of zero or more arguments each of them can be either string or integer.<ul><li>String &#x3D; access object member by key. </li><li>Positive integer &#x3D; access the n-th member&#x2F;key from the beginning. </li><li>Negative integer &#x3D; access the n-th member&#x2F;key from the end. </li><li>Minimum index of the element is 1. Thus the element 0 does not exist.</li><li>You may use integers to access both JSON arrays and JSON objects.</li></ul></li></ul><p><strong>Returned value</strong></p><ul><li>UInt64.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JSONExtractUInt(<span class="string">&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">-1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─JSONExtractUInt(&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;, &#x27;b&#x27;, -1)─┐</span><br><span class="line">│ 300                                                                 │</span><br><span class="line">└─────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="JSONHas"><a href="#JSONHas" class="headerlink" title="JSONHas"></a>JSONHas</h2><p>If the value exists in the JSON document, <code>1</code> will be returned.<br>If the value does not exist, <code>0</code> will be returned.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSONHas(json[, indices_or_keys]…)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>json</code> – json string. </li><li><code>indices_or_keys</code> - is a list of zero or more arguments each of them can be either string or integer.<ul><li>String &#x3D; access object member by key. </li><li>Positive integer &#x3D; access the n-th member&#x2F;key from the beginning. </li><li>Negative integer &#x3D; access the n-th member&#x2F;key from the end. </li><li>Minimum index of the element is 1. Thus the element 0 does not exist.</li><li>You may use integers to access both JSON arrays and JSON objects.</li></ul></li></ul><p><strong>Returned value</strong></p><ul><li>UInt8.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JSONExtractUInt(<span class="string">&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">-1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─JSONHas(&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;, &#x27;b&#x27;)─┐</span><br><span class="line">│ 1                                                       │</span><br><span class="line">└─────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JSONHas(<span class="string">&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─JSONHas(&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;, &#x27;b&#x27;, 4)─┐</span><br><span class="line">│ 0                                                          │</span><br><span class="line">└────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="JSONLength"><a href="#JSONLength" class="headerlink" title="JSONLength"></a>JSONLength</h2><p>Return the length of a JSON array or a JSON object.</p><p>If the value does not exist or has a wrong type, <code>0</code> will be returned.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSONLength(json\[, indices_or_keys\]…)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>json</code> – json string. </li><li><code>indices_or_keys</code> - is a list of zero or more arguments each of them can be either string or integer.<ul><li>String &#x3D; access object member by key. </li><li>Positive integer &#x3D; access the n-th member&#x2F;key from the beginning. </li><li>Negative integer &#x3D; access the n-th member&#x2F;key from the end. </li><li>Minimum index of the element is 1. Thus the element 0 does not exist.</li><li>You may use integers to access both JSON arrays and JSON objects.</li></ul></li></ul><p><strong>Returned value</strong></p><ul><li>UInt64.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JSONLength(<span class="string">&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;</span>, <span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─JSONLength(&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;, &#x27;b&#x27;)─┐</span><br><span class="line">│ 3                                                          │</span><br><span class="line">└────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JSONLength(<span class="string">&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─JSONLength(&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;)─┐</span><br><span class="line">│ 2                                                     │</span><br><span class="line">└───────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="JSONType"><a href="#JSONType" class="headerlink" title="JSONType"></a>JSONType</h2><p>Return the type of a JSON value.</p><p>If the value does not exist, <code>Null</code> will be returned.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSONType(json\[, indices_or_keys\]…)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>json</code> – json string. </li><li><code>indices_or_keys</code> - is a list of zero or more arguments each of them can be either string or integer.<ul><li>String &#x3D; access object member by key. </li><li>Positive integer &#x3D; access the n-th member&#x2F;key from the beginning. </li><li>Negative integer &#x3D; access the n-th member&#x2F;key from the end. </li><li>Minimum index of the element is 1. Thus the element 0 does not exist.</li><li>You may use integers to access both JSON arrays and JSON objects.</li></ul></li></ul><p><strong>Returned value</strong></p><ul><li>ByteHouse data type.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JSONType(<span class="string">&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─JSONType(&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;)─┐</span><br><span class="line">│ Object                                              │</span><br><span class="line">└─────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JSONType(<span class="string">&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;</span>, <span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─JSONType(&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;, &#x27;a&#x27;)─┐</span><br><span class="line">│ String                                                   │</span><br><span class="line">└──────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JSONType(<span class="string">&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;</span>, <span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─JSONType(&#x27;&#123;&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: [-100, 200.0, 300]&#125;&#x27;, &#x27;b&#x27;)─┐</span><br><span class="line">│ Array                                                    │</span><br><span class="line">└──────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="visitParamExtractBool"><a href="#visitParamExtractBool" class="headerlink" title="visitParamExtractBool"></a>visitParamExtractBool</h2><p>Parses a true&#x2F;false value. The result is UInt8.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visitParamExtractBool(params, name)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>params</code> – json string. </li><li><code>name</code> - json key</li></ul><p><strong>Returned value</strong></p><ul><li>UInt8.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> visitParamExtractBool(<span class="string">&#x27;&#123;&quot;abc&quot;:true&#125;&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─visitParamExtractBool(&#x27;&#123;&quot;abc&quot;:true&#125;&#x27;, &#x27;abc&#x27;)─┐</span><br><span class="line">│ 1                                            │</span><br><span class="line">└──────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> visitParamExtractBool(<span class="string">&#x27;&#123;&quot;abc&quot;:false&#125;&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─visitParamExtractBool(&#x27;&#123;&quot;abc&quot;:false&#125;&#x27;, &#x27;abc&#x27;)─┐</span><br><span class="line">│ 0                                             │</span><br><span class="line">└───────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="visitParamExtractFloat"><a href="#visitParamExtractFloat" class="headerlink" title="visitParamExtractFloat"></a>visitParamExtractFloat</h2><p>Parses a float value. The result is Float64.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visitParamExtractFloat(params, name)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>params</code> – json string. </li><li><code>name</code> - json key</li></ul><p><strong>Returned value</strong></p><ul><li>UInt8.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> visitParamExtractFloat(<span class="string">&#x27;&#123;&quot;abc&quot;:123.0&#125;&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─visitParamExtractFloat(&#x27;&#123;&quot;abc&quot;:123.1&#125;&#x27;, &#x27;abc&#x27;)─┐</span><br><span class="line">│ 123.1                                          │</span><br><span class="line">└────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="visitParamExtractInt"><a href="#visitParamExtractInt" class="headerlink" title="visitParamExtractInt"></a>visitParamExtractInt</h2><p>Parses a Int value. The result is Int64.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visitParamExtractInt(params, name)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>params</code> – json string. </li><li><code>name</code> - json key</li></ul><p><strong>Returned value</strong></p><ul><li>Int64.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> visitParamExtractInt(<span class="string">&#x27;&#123;&quot;abc&quot;:123&#125;&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─visitParamExtractInt(&#x27;&#123;&quot;abc&quot;:123&#125;&#x27;, &#x27;abc&#x27;)─┐</span><br><span class="line">│ 123                                        │</span><br><span class="line">└────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="visitParamExtractRaw"><a href="#visitParamExtractRaw" class="headerlink" title="visitParamExtractRaw"></a>visitParamExtractRaw</h2><p>Returns the value of a field, including separators.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visitParamExtractRaw(params, name)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>params</code> – json string. </li><li><code>name</code> - json key</li></ul><p><strong>Returned value</strong></p><ul><li>String.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> visitParamExtractRaw(<span class="string">&#x27;&#123;&quot;abc&quot;:&quot;\\n\\u0000&quot;&#125;&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─visitParamExtractRaw(&#x27;&#123;&quot;abc&quot;:&quot;\\n\\u0000&quot;&#125;&#x27;, &#x27;abc&#x27;)─┐</span><br><span class="line">│ &quot;\n\u0000&quot;                                          │</span><br><span class="line">└─────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> visitParamExtractRaw(<span class="string">&#x27;&#123;&quot;abc&quot;:&#123;&quot;def&quot;:[1,2,3]&#125;&#125;&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─visitParamExtractRaw(&#x27;&#123;&quot;abc&quot;:&#123;&quot;def&quot;:[1,2,3]&#125;&#125;&#x27;, &#x27;abc&#x27;)─┐</span><br><span class="line">│ &#123;&quot;def&quot;:[1,2,3]&#125;                                        │</span><br><span class="line">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="visitParamExtractString"><a href="#visitParamExtractString" class="headerlink" title="visitParamExtractString"></a>visitParamExtractString</h2><p>Parses the string in double quotes. The value is unescaped. If unescaping failed, it returns an empty string.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visitParamExtractString(params, name)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>params</code> – json string. </li><li><code>name</code> - json key</li></ul><p><strong>Returned value</strong></p><ul><li>String.</li></ul><p><strong>Example</strong></p><!-- TODO: Gateway Client formatting issue<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> visitParamExtractString(<span class="string">&#x27;&#123;&quot;abc&quot;:&quot;\\n\\u0000&quot;&#125;&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">┌─visitParamExtractRaw(&#x27;&#123;&quot;abc&quot;:&quot;\\n\\u0000&quot;&#125;&#x27;, &#x27;abc&#x27;)─┐</span><br><span class="line">│ &quot;\n\u0000&quot;                                          │</span><br><span class="line">└─────────────────────────────────────────────────────┘</span><br><span class="line">``` --&gt;</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">SELECT visitParamExtractString(&#x27;&#123;&quot;abc&quot;:&quot;\\u263a&quot;&#125;&#x27;, &#x27;abc&#x27;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─visitParamExtractString(&#x27;&#123;&quot;abc&quot;:&quot;\\u263a&quot;&#125;&#x27;, &#x27;abc&#x27;)─┐</span><br><span class="line">│ ☺                                                   │</span><br><span class="line">└─────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> visitParamExtractString(<span class="string">&#x27;&#123;&quot;abc&quot;:&quot;\\u263&quot;&#125;&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─visitParamExtractString(&#x27;&#123;&quot;abc&quot;:&quot;\\u263&quot;&#125;&#x27;, &#x27;abc&#x27;)─┐</span><br><span class="line">│                                                    │</span><br><span class="line">└────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> visitParamExtractString(<span class="string">&#x27;&#123;&quot;abc&quot;:&quot;hello&#125;&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─visitParamExtractString(&#x27;&#123;&quot;abc&quot;:&quot;hello&#125;&#x27;, &#x27;abc&#x27;)─┐</span><br><span class="line">│                                                  │</span><br><span class="line">└──────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>There is currently no support for code points in the format <code>\uXXXX\uYYYY</code> that are not from the basic multilingual plane (they are converted to CESU-8 instead of UTF-8).</p><p>The following functions are based on <a href="https://github.com/lemire/simdjson">simdjson</a> designed for more complex JSON parsing requirements. The assumption 2 mentioned above still applies.</p><h2 id="visitParamExtractUInt"><a href="#visitParamExtractUInt" class="headerlink" title="visitParamExtractUInt"></a>visitParamExtractUInt</h2><p>Parses UInt64 from the value of the field named <code>name</code> . If this is a string field, it tries to parse a number from the beginning of the string. If the field does not exist, or it exists but does not contain a number, it returns 0.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visitParamExtractUInt(params, name)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>params</code> – json string. </li><li><code>name</code> - json key</li></ul><p><strong>Returned value</strong></p><ul><li>UInt64.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> visitParamExtractUInt(<span class="string">&#x27;&#123;&quot;abc&quot;:2&#125;&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─visitParamExtractUInt(&#x27;&#123;&quot;abc&quot;:2&#125;&#x27;, &#x27;abc&#x27;)─┐</span><br><span class="line">│ 2                                         │</span><br><span class="line">└───────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="visitParamHas"><a href="#visitParamHas" class="headerlink" title="visitParamHas"></a>visitParamHas</h2><p>Checks whether there is a field with the <code>name</code> name.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visitParamHas(params, name)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>params</code> – json string. </li><li><code>name</code> - json key</li></ul><p><strong>Returned value</strong></p><ul><li>UInt8.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> visitParamHas(<span class="string">&#x27;&#123;&quot;abc&quot;:&quot;def&quot;&#125;&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─visitParamHas(&#x27;&#123;&quot;abc&quot;:&quot;def&quot;&#125;&#x27;, &#x27;abc&#x27;)─┐</span><br><span class="line">│ 1                                     │</span><br><span class="line">└───────────────────────────────────────┘</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> SQL_Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Map</title>
      <link href="/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/map/"/>
      <url>/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/map/</url>
      
        <content type="html"><![CDATA[<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>Arranges <code>key:value</code> pairs into <a href="https://bytedance.feishu.cn/sql-reference/data-types/map.md">Map(key, value)</a> data type.</p><p><strong>Syntax</strong> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">map(key1, value1[, key2, value2, ...])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong> </p><ul><li><p><code>key</code> — The key part of the pair. <a href="https://bytedance.feishu.cn/sql-reference/data-types/string.md">String</a> or <a href="https://bytedance.feishu.cn/sql-reference/data-types/int-uint.md">Integer</a> . </p></li><li><p><code>value</code> — The value part of the pair. <a href="https://bytedance.feishu.cn/sql-reference/data-types/string.md">String</a> , <a href="https://bytedance.feishu.cn/sql-reference/data-types/int-uint.md">Integer</a> or <a href="https://bytedance.feishu.cn/sql-reference/data-types/array.md">Array</a> .</p></li></ul><p><strong>Returned value</strong></p><ul><li>Data structure as <code>key:value</code> pairs.</li></ul><p>Type: <a href="https://bytedance.feishu.cn/sql-reference/data-types/map.md">Map(key, value)</a> .</p><p><strong>Examples</strong></p><p>Query:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> map(<span class="string">&#x27;key1&#x27;</span>, number, <span class="string">&#x27;key2&#x27;</span>, number <span class="operator">*</span> <span class="number">2</span>) <span class="keyword">FROM</span> numbers(<span class="number">3</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌─map(&#x27;key1&#x27;, number, &#x27;key2&#x27;, multiply(number, 2))─┐</span><br><span class="line"></span><br><span class="line">│ &#123;&#x27;key1&#x27;:0,&#x27;key2&#x27;:0&#125;                              │</span><br><span class="line"></span><br><span class="line">│ &#123;&#x27;key1&#x27;:1,&#x27;key2&#x27;:2&#125;                              │</span><br><span class="line"></span><br><span class="line">│ &#123;&#x27;key1&#x27;:2,&#x27;key2&#x27;:4&#125;                              │</span><br><span class="line"></span><br><span class="line">└──────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Query:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_map (a Map(String, UInt64)) ENGINE <span class="operator">=</span> MergeTree() <span class="keyword">ORDER</span> <span class="keyword">BY</span> a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_map <span class="keyword">SELECT</span> map(<span class="string">&#x27;key1&#x27;</span>, number, <span class="string">&#x27;key2&#x27;</span>, number <span class="operator">*</span> <span class="number">2</span>) <span class="keyword">FROM</span> numbers(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> a[<span class="string">&#x27;key2&#x27;</span>] <span class="keyword">FROM</span> table_map;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌─arrayElement(a, &#x27;key2&#x27;)─┐</span><br><span class="line"></span><br><span class="line">│                       0 │</span><br><span class="line"></span><br><span class="line">│                       2 │</span><br><span class="line"></span><br><span class="line">│                       4 │</span><br><span class="line"></span><br><span class="line">└─────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>See Also</strong> </p><ul><li><a href="https://bytedance.feishu.cn/sql-reference/data-types/map.md">Map(key, value)</a> data type</li></ul><h2 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h2><p>A function that allows grouping multiple columns.</p><p>For columns with the types T1, T2, …, it returns a Tuple(T1, T2, …) type tuple containing these columns. There is no cost to execute the function.</p><p>Tuples are normally used as intermediate values for an argument of IN operators, or for creating a list of formal parameters of lambda functions. Tuples can’t be written to a table.</p><p>The function implements the operator <code>(x, y, …)</code> .</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">tuple(x, y, …)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="tupleElement"><a href="#tupleElement" class="headerlink" title="tupleElement"></a>tupleElement</h2><p>A function that allows getting a column from a tuple.</p><p>‘N’ is the column index, starting from 1. N must be a constant. ‘N’ must be a constant. ‘N’ must be a strict postive integer no greater than the size of the tuple.</p><p>There is no cost to execute the function.</p><p>The function implements the operator <code>x.N</code> .</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">tupleElement(tuple, n)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> SQL_Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nullable</title>
      <link href="/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/nullable/"/>
      <url>/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/nullable/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Notice:<br>Some of the examples below are referenced from <a href="https://clickhouse.com/docs/en/sql-reference/functions/">ClickHouse Documentation</a> but have been adapted and modified to work in ByteHouse.</p></blockquote><h2 id="assumeNotNull"><a href="#assumeNotNull" class="headerlink" title="assumeNotNull"></a>assumeNotNull</h2><p>Results in an equivalent non- <code>Nullable</code> value for a Nullable type. In case the original value is <code>NULL</code> the result is undetermined. See also <code>ifNull</code> and <code>coalesce</code> functions.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assumeNotNull(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments:</strong></p><ul><li><code>x</code> — The original value.</li></ul><p><strong>Returned values</strong></p><ul><li>The original value from the non- <code>Nullable</code> type, if it is not <code>NULL</code> . </li><li>Implementation specific result if the original value was <code>NULL</code> .</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.functionAssumeNotNull ( x Int8,  y Nullable(Int8)) ENGINE <span class="operator">=</span> CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> x;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.functionAssumeNotNull <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="keyword">NULL</span>),(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test.functionAssumeNotNull;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─x─┬─y────┐</span><br><span class="line">│ 1 │ ᴺᵁᴸᴸ │</span><br><span class="line">│ 2 │ 3    │</span><br><span class="line">└───┴──────┘</span><br></pre></td></tr></table></figure><p>Apply the <code>assumeNotNull</code> function to the <code>y</code> column.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> assumeNotNull(y),toTypeName(assumeNotNull(y))  <span class="keyword">FROM</span> test.functionAssumeNotNull;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─assumeNotNull(y)─┬─toTypeName(assumeNotNull(y))─┐</span><br><span class="line">│ 0                │ Int8                         │</span><br><span class="line">│ 3                │ Int8                         │</span><br><span class="line">└──────────────────┴──────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="coalesce"><a href="#coalesce" class="headerlink" title="coalesce"></a>coalesce</h2><p>Checks from left to right whether <code>NULL</code> arguments were passed and returns the first non- <code>NULL</code> argument.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">coalesce</span>(x,...)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li>Any number of parameters of a non-compound type. All parameters must be compatible by data type.</li></ul><p><strong>Returned values</strong></p><ul><li>The first non- <code>NULL</code> argument.</li><li><code>NULL</code> , if all arguments are <code>NULL</code> .</li></ul><p><strong>Example</strong><br>Consider a list of contacts that may specify multiple ways to contact a customer.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.functionCoalesce (name String, mail Nullable(String), phone Nullable(String), icq Nullable(UInt32)) ENGINE<span class="operator">=</span>CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> name;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.functionCoalesce <span class="keyword">VALUES</span> (<span class="string">&#x27;client 1&#x27;</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;123-45-67&#x27;</span>, <span class="number">123</span>), (<span class="string">&#x27;client 2&#x27;</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test.functionCoalesce;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─name─────┬─mail─┬─phone─────┬─icq──┐</span><br><span class="line">│ client 1 │ ᴺᵁᴸᴸ │ 123-45-67 │ 123  │</span><br><span class="line">│ client 2 │ ᴺᵁᴸᴸ │ ᴺᵁᴸᴸ      │ ᴺᵁᴸᴸ │</span><br><span class="line">└──────────┴──────┴───────────┴──────┘</span><br></pre></td></tr></table></figure><p>The <code>mail</code> and <code>phone</code> fields are of type String, but the <code>icq</code> field is <code>UInt32</code> , so it needs to be converted to <code>String</code> .<br>Get the first available contact method for the customer from the contact list:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, <span class="built_in">coalesce</span>(mail, phone, <span class="built_in">CAST</span>(icq,<span class="string">&#x27;Nullable(String)&#x27;</span>)) <span class="keyword">FROM</span> test.functionCoalesce;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─name─────┬─coalesce(mail, phone, CAST(icq, &#x27;Nullable(String)&#x27;))─┐</span><br><span class="line">│ client 1 │ 123-45-67                                            │</span><br><span class="line">│ client 2 │ ᴺᵁᴸᴸ                                                 │</span><br><span class="line">└──────────┴──────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="ifNull"><a href="#ifNull" class="headerlink" title="ifNull"></a>ifNull</h2><p>Returns an alternative value if the main argument is <code>NULL</code> .</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifNull(x,alt)</span><br></pre></td></tr></table></figure><p><strong>Arguments:</strong></p><ul><li><code>x</code> — The value to check for <code>NULL</code> . </li><li><code>alt</code> — The value that the function returns if <code>x</code> is <code>NULL</code> .</li></ul><p><strong>Returned values</strong></p><ul><li>The value <code>x</code> , if <code>x</code> is not <code>NULL</code> . </li><li>The value <code>alt</code> , if <code>x</code> is <code>NULL</code> .</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ifNull(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─ifNull(&#x27;a&#x27;, &#x27;b&#x27;)─┐</span><br><span class="line">│ a                │</span><br><span class="line">└──────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ifNull(<span class="keyword">NULL</span>, <span class="string">&#x27;b&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─ifNull(NULL, &#x27;b&#x27;)─┐</span><br><span class="line">│ b                 │</span><br><span class="line">└───────────────────┘</span><br></pre></td></tr></table></figure><h2 id="isNotNull"><a href="#isNotNull" class="headerlink" title="isNotNull"></a>isNotNull</h2><p>Checks whether the argument is NULL.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isNotNull(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments:</strong></p><ul><li><code>x</code> — A value with a non-compound data type.</li></ul><p><strong>Returned value</strong></p><ul><li><code>0</code> if <code>x</code> is <code>NULL</code> . </li><li><code>1</code> if <code>x</code> is not <code>NULL</code> .</li></ul><p><strong>Example</strong><br>Input table</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.functionIsNotNull (x UInt8, y Nullable(UInt8)) ENGINE<span class="operator">=</span>CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> x;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.functionIsNotNull <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="keyword">NULL</span>),(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test.functionIsNotNull;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─x─┬─y────┐</span><br><span class="line">│ 1 │ ᴺᵁᴸᴸ │</span><br><span class="line">│ 2 │ 3    │</span><br><span class="line">└───┴──────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> x <span class="keyword">FROM</span> test.functionIsNotNull <span class="keyword">WHERE</span> isNotNull(y);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─x─┐</span><br><span class="line">│ 2 │</span><br><span class="line">└───┘</span><br></pre></td></tr></table></figure><h2 id="isNull"><a href="#isNull" class="headerlink" title="isNull"></a>isNull</h2><p>Checks whether the argument is NULL.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isNull(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> — A value with a non-compound data type.</li></ul><p><strong>Returned value</strong></p><ul><li><code>1</code> if <code>x</code> is <code>NULL</code> . </li><li><code>0</code> if <code>x</code> is not <code>NULL</code> .</li></ul><p><strong>Example</strong><br>Input table</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.functionIsNull (x UInt8, y Nullable(UInt8)) ENGINE<span class="operator">=</span>CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> x;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.functionIsNull <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="keyword">NULL</span>),(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test.functionIsNull;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─x─┬─y────┐</span><br><span class="line">│ 1 │ ᴺᵁᴸᴸ │</span><br><span class="line">│ 2 │ 3    │</span><br><span class="line">└───┴──────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> x <span class="keyword">FROM</span> test.functionIsNull <span class="keyword">WHERE</span> isNull(y);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─x─┐</span><br><span class="line">│ 1 │</span><br><span class="line">└───┘</span><br></pre></td></tr></table></figure><h2 id="nullIf"><a href="#nullIf" class="headerlink" title="nullIf"></a>nullIf</h2><p>Returns <code>NULL</code> if the arguments are equal.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nullIf</span>(x, y)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> , <code>y</code> — Values for comparison. They must be compatible types, or Bytehouse will generate an exception.</li></ul><p><strong>Returned values</strong></p><ul><li><code>NULL</code> , if the arguments are equal. </li><li>The <code>x</code> value, if the arguments are not equal.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">nullIf</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─nullIf(1, 1)─┐</span><br><span class="line">│ ᴺᵁᴸᴸ         │</span><br><span class="line">└──────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">nullIf</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─nullIf(1, 2)─┐</span><br><span class="line">│ 1            │</span><br><span class="line">└──────────────┘</span><br></pre></td></tr></table></figure><h2 id="toNullable"><a href="#toNullable" class="headerlink" title="toNullable"></a>toNullable</h2><p>Converts the argument type to <code>Nullable</code> .</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toNullable(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> — The value of any non-compound type.</li></ul><p><strong>Returned value</strong></p><ul><li>The input value with a <code>Nullable</code> type.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toTypeName(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toTypeName(10)─┐</span><br><span class="line">│ UInt8          │</span><br><span class="line">└────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toTypeName(toNullable(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toTypeName(toNullable(10))─┐</span><br><span class="line">│ Nullable(UInt8)            │</span><br><span class="line">└────────────────────────────┘</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> SQL_Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Others</title>
      <link href="/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/others/"/>
      <url>/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/others/</url>
      
        <content type="html"><![CDATA[<h2 id="MACNumToString"><a href="#MACNumToString" class="headerlink" title="MACNumToString"></a>MACNumToString</h2><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MACNumToString(num)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Accepts a UInt64 number. Interprets it as a MAC address in big endian. Returns a string containing the corresponding MAC address in the format AA:BB:CC:DD:EE:FF (colon-separated numbers in hexadecimal form).</p><h2 id="MACStringToNum"><a href="#MACStringToNum" class="headerlink" title="MACStringToNum"></a>MACStringToNum</h2><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MACNumToString(num)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>The inverse function of MACNumToString. If the MAC address has an invalid format, it returns 0.</p><h2 id="MACStringToOUI"><a href="#MACStringToOUI" class="headerlink" title="MACStringToOUI"></a>MACStringToOUI</h2><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MACStringToOUI(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Accepts a MAC address in the format AA:BB:CC:DD:EE:FF (colon-separated numbers in hexadecimal form). Returns the first three octets as a UInt64 number. If the MAC address has an invalid format, it returns 0.</p><h2 id="auc"><a href="#auc" class="headerlink" title="auc"></a>auc</h2><p>Calculate AUC (Area Under the Curve, which is a concept in machine learning, see more details: <a href="https://en.wikipedia.org/wiki/Receiver_operating_characteristic#Area_under_the_curve">https://en.wikipedia.org/wiki/Receiver_operating_characteristic#Area_under_the_curve</a> ).</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">arrayAUC(arr_scores, arr_labels)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><p><code>arr_scores</code> — scores prediction model gives. </p></li><li><p><code>arr_labels</code> — labels of samples, usually 1 for positive sample and 0 for negtive sample.</p></li></ul><p><strong>Returned value</strong></p><p>Returns AUC value with type Float64.</p><p><strong>Example</strong></p><p>Query:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> arrayAUC([<span class="number">0.1</span>, <span class="number">0.4</span>, <span class="number">0.35</span>, <span class="number">0.8</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌─arrayAUC([0.1, 0.4, 0.35, 0.8], [0, 0, 1, 1])─┐</span><br><span class="line"></span><br><span class="line">│                                          0.75 │</span><br><span class="line"></span><br><span class="line">└───────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="bar"><a href="#bar" class="headerlink" title="bar"></a>bar</h2><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">bar(x, min, max, width)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Allows building a unicode-art diagram.</p><p><code>bar(x, min, max, width)</code> draws a band with a width proportional to <code>(x - min)</code> and equal to <code>width</code> characters when <code>x = max</code> .</p><p><strong>Arguments</strong></p><ul><li><p><code>x</code> — Size to display. </p></li><li><p><code>min, max</code> — Integer constants. The value must fit in <code>Int64</code> . </p></li><li><p><code>width</code> — Constant, positive integer, can be fractional.</p></li></ul><p>The band is drawn with accuracy to one eighth of a symbol.</p><p>Example:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"></span><br><span class="line">    toHour(EventTime) <span class="keyword">AS</span> h,</span><br><span class="line"></span><br><span class="line">    <span class="built_in">count</span>() <span class="keyword">AS</span> c,</span><br><span class="line"></span><br><span class="line">    bar(c, <span class="number">0</span>, <span class="number">600000</span>, <span class="number">20</span>) <span class="keyword">AS</span> bar</span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> test.hits</span><br><span class="line"></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> h</span><br><span class="line"></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> h <span class="keyword">ASC</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌──h─┬──────c─┬─bar────────────────┐</span><br><span class="line"></span><br><span class="line">│  0 │ 292907 │ █████████▋         │</span><br><span class="line"></span><br><span class="line">│  1 │ 180563 │ ██████             │</span><br><span class="line"></span><br><span class="line">│  2 │ 114861 │ ███▋               │</span><br><span class="line"></span><br><span class="line">│  3 │  85069 │ ██▋                │</span><br><span class="line"></span><br><span class="line">│  4 │  68543 │ ██▎                │</span><br><span class="line"></span><br><span class="line">│  5 │  78116 │ ██▌                │</span><br><span class="line"></span><br><span class="line">│  6 │ 113474 │ ███▋               │</span><br><span class="line"></span><br><span class="line">│  7 │ 170678 │ █████▋             │</span><br><span class="line"></span><br><span class="line">│  8 │ 278380 │ █████████▎         │</span><br><span class="line"></span><br><span class="line">│  9 │ 391053 │ █████████████      │</span><br><span class="line"></span><br><span class="line">│ 10 │ 457681 │ ███████████████▎   │</span><br><span class="line"></span><br><span class="line">│ 11 │ 493667 │ ████████████████▍  │</span><br><span class="line"></span><br><span class="line">│ 12 │ 509641 │ ████████████████▊  │</span><br><span class="line"></span><br><span class="line">│ 13 │ 522947 │ █████████████████▍ │</span><br><span class="line"></span><br><span class="line">│ 14 │ 539954 │ █████████████████▊ │</span><br><span class="line"></span><br><span class="line">│ 15 │ 528460 │ █████████████████▌ │</span><br><span class="line"></span><br><span class="line">│ 16 │ 539201 │ █████████████████▊ │</span><br><span class="line"></span><br><span class="line">│ 17 │ 523539 │ █████████████████▍ │</span><br><span class="line"></span><br><span class="line">│ 18 │ 506467 │ ████████████████▊  │</span><br><span class="line"></span><br><span class="line">│ 19 │ 520915 │ █████████████████▎ │</span><br><span class="line"></span><br><span class="line">│ 20 │ 521665 │ █████████████████▍ │</span><br><span class="line"></span><br><span class="line">│ 21 │ 542078 │ ██████████████████ │</span><br><span class="line"></span><br><span class="line">│ 22 │ 493642 │ ████████████████▍  │</span><br><span class="line"></span><br><span class="line">│ 23 │ 400397 │ █████████████▎     │</span><br><span class="line"></span><br><span class="line">└────┴────────┴────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="blockNumber"><a href="#blockNumber" class="headerlink" title="blockNumber"></a>blockNumber</h2><p>Returns the sequence number of the data block where the row is located.</p><h2 id="blockSize"><a href="#blockSize" class="headerlink" title="blockSize"></a>blockSize</h2><p>Gets the size of the block.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">blockSize()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>In ClickHouse, queries are always run on blocks (sets of column parts). This function allows getting the size of the block that you called it for.</p><h2 id="currentDatabase"><a href="#currentDatabase" class="headerlink" title="currentDatabase"></a>currentDatabase</h2><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">currentDatabase()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Returns the name of the current database.</p><p>You can use this function in table engine parameters in a CREATE TABLE query where you need to specify the database.</p><h2 id="defaultValueOfArgumentType"><a href="#defaultValueOfArgumentType" class="headerlink" title="defaultValueOfArgumentType"></a>defaultValueOfArgumentType</h2><p>Outputs the default value for the data type. Does not include default values for custom columns set by the user.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">defaultValueOfArgumentType(expression)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments:</strong></p><ul><li><code>expression</code> — Arbitrary type of value or an expression that results in a value of an arbitrary type.</li></ul><p><strong>Returned values</strong></p><ul><li><p><code>0</code> for numbers. </p></li><li><p>Empty string for strings. </p></li><li><p><code>ᴺᵁᴸᴸ</code> for <a href="https://bytedance.feishu.cn/sql-reference/data-types/nullable.md">Nullable</a> .</p></li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> defaultValueOfArgumentType( <span class="built_in">CAST</span>(<span class="number">1</span> <span class="keyword">AS</span> Int8) )</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌─defaultValueOfArgumentType(CAST(1, &#x27;Int8&#x27;))─┐</span><br><span class="line"></span><br><span class="line">│                                           0 │</span><br><span class="line"></span><br><span class="line">└─────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> defaultValueOfArgumentType( <span class="built_in">CAST</span>(<span class="number">1</span> <span class="keyword">AS</span> Nullable(Int8) ) )</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌─defaultValueOfArgumentType(CAST(1, &#x27;Nullable(Int8)&#x27;))─┐</span><br><span class="line"></span><br><span class="line">│                                                  ᴺᵁᴸᴸ │</span><br><span class="line"></span><br><span class="line">└───────────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="dumpColumnStructure"><a href="#dumpColumnStructure" class="headerlink" title="dumpColumnStructure"></a>dumpColumnStructure</h2><p>Outputs a detailed description of data structures in RAM</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">dumpColumnStructure(<span class="keyword">value</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments:</strong></p><ul><li><code>value</code> — Any type of value.</li></ul><p><strong>Returned values</strong></p><ul><li>A string describing the structure that is used for representing the <code>value</code> data type in RAM.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> dumpColumnStructure(<span class="built_in">CAST</span>(<span class="string">&#x27;2018-01-01 01:02:03&#x27;</span>, <span class="string">&#x27;DateTime&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌─dumpColumnStructure(CAST(&#x27;2018-01-01 01:02:03&#x27;, &#x27;DateTime&#x27;))─┐</span><br><span class="line"></span><br><span class="line">│ DateTime, Const(size = 1, UInt32(size = 1))                  │</span><br><span class="line"></span><br><span class="line">└──────────────────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="filesystemAvailable"><a href="#filesystemAvailable" class="headerlink" title="filesystemAvailable"></a>filesystemAvailable</h2><p>Returns amount of remaining space on the filesystem where the files of the databases located. It is always smaller than total free space ( <a href="https://bytedance.feishu.cn/docs/doccnFkHpok0xssNrwscSUDfwNG#filesystemfree">filesystemFree</a> ) because some space is reserved for OS.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">filesystemAvailable()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Returned value</strong></p><ul><li>The amount of remaining space available in bytes.</li></ul><p>Type: <a href="https://bytedance.feishu.cn/sql-reference/data-types/int-uint.md">UInt64</a> .</p><p><strong>Example</strong></p><p>Query:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> formatReadableSize(filesystemAvailable()) <span class="keyword">AS</span> &quot;Available space&quot;, toTypeName(filesystemAvailable()) <span class="keyword">AS</span> &quot;Type&quot;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌─Available space─┬─Type───┐</span><br><span class="line"></span><br><span class="line">│ 30.75 GiB       │ UInt64 │</span><br><span class="line"></span><br><span class="line">└─────────────────┴────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="filesystemCapacity"><a href="#filesystemCapacity" class="headerlink" title="filesystemCapacity"></a>filesystemCapacity</h2><p>Returns the capacity of the filesystem in bytes. For evaluation, the <a href="https://bytedance.feishu.cn/operations/server-configuration-parameters/settings.md#server_configuration_parameters-path">path</a> to the data directory must be configured.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">filesystemCapacity()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Returned value</strong></p><ul><li>Capacity information of the filesystem in bytes.</li></ul><p>Type: <a href="https://bytedance.feishu.cn/sql-reference/data-types/int-uint.md">UInt64</a> .</p><p><strong>Example</strong></p><p>Query:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> formatReadableSize(filesystemCapacity()) <span class="keyword">AS</span> &quot;Capacity&quot;, toTypeName(filesystemCapacity()) <span class="keyword">AS</span> &quot;Type&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌─Capacity──┬─Type───┐</span><br><span class="line"></span><br><span class="line">│ 39.32 GiB │ UInt64 │</span><br><span class="line"></span><br><span class="line">└───────────┴────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="filesystemFree"><a href="#filesystemFree" class="headerlink" title="filesystemFree"></a>filesystemFree</h2><p>Returns total amount of the free space on the filesystem where the files of the databases located. See also <code>filesystemAvailable</code></p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">filesystemFree()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Returned value</strong></p><ul><li>Amount of free space in bytes.</li></ul><p>Type: <a href="https://bytedance.feishu.cn/sql-reference/data-types/int-uint.md">UInt64</a> .</p><p><strong>Example</strong></p><p>Query:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> formatReadableSize(filesystemFree()) <span class="keyword">AS</span> &quot;Free space&quot;, toTypeName(filesystemFree()) <span class="keyword">AS</span> &quot;Type&quot;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌─Free space─┬─Type───┐</span><br><span class="line"></span><br><span class="line">│ 32.39 GiB  │ UInt64 │</span><br><span class="line"></span><br><span class="line">└────────────┴────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="finalizeAggregation"><a href="#finalizeAggregation" class="headerlink" title="finalizeAggregation"></a>finalizeAggregation</h2><p>Takes state of aggregate function. Returns result of aggregation (or finalized state when using <a href="https://bytedance.feishu.cn/sql-reference/aggregate-functions/combinators.md#agg-functions-combinator-state">-State</a> combinator).</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">finalizeAggregation(state)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>state</code> — State of aggregation. <a href="https://bytedance.feishu.cn/sql-reference/data-types/aggregatefunction.md#data-type-aggregatefunction">AggregateFunction</a> .</li></ul><p><strong>Returned value(s)</strong></p><ul><li>Value&#x2F;values that was aggregated.</li></ul><p>Type: Value of any types that was aggregated.</p><p><strong>Examples</strong></p><p>Query:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> finalizeAggregation(( <span class="keyword">SELECT</span> countState(number) <span class="keyword">FROM</span> numbers(<span class="number">10</span>)));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌─finalizeAggregation(_subquery16)─┐</span><br><span class="line"></span><br><span class="line">│                               10 │</span><br><span class="line"></span><br><span class="line">└──────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Query:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> finalizeAggregation(( <span class="keyword">SELECT</span> sumState(number) <span class="keyword">FROM</span> numbers(<span class="number">10</span>)));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌─finalizeAggregation(_subquery20)─┐</span><br><span class="line"></span><br><span class="line">│                               45 │</span><br><span class="line"></span><br><span class="line">└──────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Note that <code>NULL</code> values are ignored.</p><p>Query:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> finalizeAggregation(arrayReduce(<span class="string">&#x27;anyState&#x27;</span>, [<span class="keyword">NULL</span>, <span class="number">2</span>, <span class="number">3</span>]));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌─finalizeAggregation(arrayReduce(&#x27;anyState&#x27;, [NULL, 2, 3]))─┐</span><br><span class="line"></span><br><span class="line">│                                                          2 │</span><br><span class="line"></span><br><span class="line">└────────────────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Combined example:</p><p>Query:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">WITH</span> initializeAggregation(<span class="string">&#x27;sumState&#x27;</span>, number) <span class="keyword">AS</span> one_row_sum_state</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"></span><br><span class="line">    number,</span><br><span class="line"></span><br><span class="line">    finalizeAggregation(one_row_sum_state) <span class="keyword">AS</span> one_row_sum,</span><br><span class="line"></span><br><span class="line">    runningAccumulate(one_row_sum_state) <span class="keyword">AS</span> cumulative_sum</span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> numbers(<span class="number">10</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌─number─┬─one_row_sum─┬─cumulative_sum─┐</span><br><span class="line"></span><br><span class="line">│      0 │           0 │              0 │</span><br><span class="line"></span><br><span class="line">│      1 │           1 │              1 │</span><br><span class="line"></span><br><span class="line">│      2 │           2 │              3 │</span><br><span class="line"></span><br><span class="line">│      3 │           3 │              6 │</span><br><span class="line"></span><br><span class="line">│      4 │           4 │             10 │</span><br><span class="line"></span><br><span class="line">│      5 │           5 │             15 │</span><br><span class="line"></span><br><span class="line">│      6 │           6 │             21 │</span><br><span class="line"></span><br><span class="line">│      7 │           7 │             28 │</span><br><span class="line"></span><br><span class="line">│      8 │           8 │             36 │</span><br><span class="line"></span><br><span class="line">│      9 │           9 │             45 │</span><br><span class="line"></span><br><span class="line">└────────┴─────────────┴────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>See Also</strong></p><ul><li><p><a href="https://bytedance.feishu.cn/sql-reference/functions/array-functions.md#arrayreduce">arrayReduce</a> </p></li><li><p><a href="https://bytedance.feishu.cn/docs/doccnFkHpok0xssNrwscSUDfwNG#initializeaggregation">initializeAggregation</a></p></li></ul><h2 id="formatReadableSize-x"><a href="#formatReadableSize-x" class="headerlink" title="formatReadableSize(x)"></a>formatReadableSize(x)</h2><p>formatReadableSize(x)<br>Accepts the size (number of bytes). Returns a rounded size with a suffix (KiB, MiB, etc.) as a string.</p><p>Example:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    arrayJoin([<span class="number">1</span>, <span class="number">1024</span>, <span class="number">1024</span><span class="operator">*</span><span class="number">1024</span>, <span class="number">192851925</span>]) <span class="keyword">AS</span> filesize_bytes,</span><br><span class="line">    formatReadableSize(filesize_bytes) <span class="keyword">AS</span> filesize</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">┌─filesize_bytes─┬─filesize───┐</span><br><span class="line">│              1 │ 1.00 B     │</span><br><span class="line">│           1024 │ 1.00 KiB   │</span><br><span class="line">│        1048576 │ 1.00 MiB   │</span><br><span class="line">│      192851925 │ 183.92 MiB │</span><br><span class="line">└────────────────┴────────────┘</span><br><span class="line">​```## getSizeOfEnumType</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Returns the number of fields in [Enum](https://bytedance.feishu.cn/sql-reference/data-types/enum.md) .</span><br><span class="line"></span><br><span class="line">**Syntax**</span><br><span class="line"></span><br><span class="line">​```sql</span><br><span class="line"></span><br><span class="line">getSizeOfEnumType(value)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments:</strong></p><ul><li><code>value</code> — Value of type <code>Enum</code> .</li></ul><p><strong>Returned values</strong></p><ul><li><p>The number of fields with <code>Enum</code> input values. </p></li><li><p>An exception is thrown if the type is not <code>Enum</code> .</p></li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> getSizeOfEnumType( <span class="built_in">CAST</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">AS</span> Enum8(<span class="string">&#x27;a&#x27;</span> <span class="operator">=</span> <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span> <span class="operator">=</span> <span class="number">2</span>) ) ) <span class="keyword">AS</span> x</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌─x─┐</span><br><span class="line"></span><br><span class="line">│ 2 │</span><br><span class="line"></span><br><span class="line">└───┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="globalIn"><a href="#globalIn" class="headerlink" title="globalIn"></a>globalIn</h2><p>in, notIn, globalIn, globalNotIn </p>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> SQL_Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Random</title>
      <link href="/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/random/"/>
      <url>/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/random/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Notice:<br>Some of the examples below are referenced from <a href="https://clickhouse.com/docs/en/sql-reference/functions/">ClickHouse Documentation</a> but have been adapted and modified to work in ByteHouse.</p></blockquote><h2 id="rand"><a href="#rand" class="headerlink" title="rand"></a>rand</h2><p>Returns a pseudo-random UInt32 number, evenly distributed among all UInt32-type numbers.<br>Uses a linear congruential generator.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rand([x])</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> — Expression resulting in any of the supported data types. The resulting value is discarded, but the expression itself if used for bypassing common subexpression elimination if the function is called multiple times in one query. Optional parameter.</li></ul><p><strong>Returned values</strong></p><ul><li>a pseudo-random UInt32 number. Type: UInt32</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> rand(), rand(number) <span class="keyword">FROM</span> numbers(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─rand()─────┬─rand(number)─┐</span><br><span class="line">│ 3882830473 │ 2236253349   │</span><br><span class="line">│ 4122795699 │ 3720179576   │</span><br><span class="line">└────────────┴──────────────┘</span><br></pre></td></tr></table></figure><h2 id="rand64"><a href="#rand64" class="headerlink" title="rand64"></a>rand64</h2><p>Returns a pseudo-random UInt64 number, evenly distributed among all UInt64-type numbers.<br>Uses a linear congruential generator.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rand64([x])</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> — Expression resulting in any of the supported data types. The resulting value is discarded, but the expression itself if used for bypassing common subexpression elimination if the function is called multiple times in one query. Optional parameter.</li></ul><p><strong>Returned values</strong></p><ul><li>a pseudo-random UInt64 number. Type: UInt64</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> rand64(), rand64(number) <span class="keyword">FROM</span> numbers(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─rand64()────────────┬─rand64(number)───────┐</span><br><span class="line">│ 4216084906413806748 │ 17404981640646529534 │</span><br><span class="line">│ 874879808660605772  │ 941470430861381566   │</span><br><span class="line">└─────────────────────┴──────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="randConstant"><a href="#randConstant" class="headerlink" title="randConstant"></a>randConstant</h2><p>Produces a constant column with a random value.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">randConstant([x])</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> — Expression resulting in any of the supported data types. The resulting value is discarded, but the expression itself if used for bypassing common subexpression elimination if the function is called multiple times in one query. Optional parameter.</li></ul><p><strong>Returned value</strong></p><ul><li>Pseudo-random number. Type: UInt32.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> rand(), rand(<span class="number">1</span>), rand(number), randConstant(), randConstant(<span class="number">1</span>), randConstant(number)</span><br><span class="line"><span class="keyword">FROM</span> numbers(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">┌─rand()─────┬─rand(1)────┬─rand(number)─┬─randConstant()─┬─randConstant(1)─┬─randConstant(number)─┐</span><br><span class="line">│ 1617218167 │ 3030783952 │ 3660442590   │ 3335999329     │ 1508515848      │ 1880875990           │</span><br><span class="line">│ 432450540  │ 2987789840 │ 653572307    │ 3335999329     │ 1508515848      │ 1880875990           │</span><br><span class="line">│ 3698169875 │ 79826010   │ 458167070    │ 3335999329     │ 1508515848      │ 1880875990           │</span><br><span class="line">└────────────┴────────────┴──────────────┴────────────────┴─────────────────┴──────────────────────┘</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> SQL_Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Type Conversion</title>
      <link href="/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/type-conversion/"/>
      <url>/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/type-conversion/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Notice:<br>Some of the examples below are referenced from <a href="https://clickhouse.com/docs/en/sql-reference/functions/">ClickHouse Documentation</a> but have been adapted and modified to work in ByteHouse.</p></blockquote><h2 id="CAST"><a href="#CAST" class="headerlink" title="CAST"></a>CAST</h2><p>Converts an input value to the specified data type. Unlike the reinterpret function, <code>CAST</code> tries to present the same value using the new data type. If the conversion can not be done then an exception is raised.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CAST</span>(x, T)</span><br><span class="line"><span class="built_in">CAST</span>(x <span class="keyword">AS</span> t)</span><br></pre></td></tr></table></figure><!-- TODO: CNCH not support this syntax:  x::t --><p><strong>Arguments</strong></p><ul><li><code>x</code> — A value to convert. May be of any type. </li><li><code>T</code> — The name of the target data type. String. </li><li><code>t</code> — The target data type.</li></ul><p><strong>Returned value</strong></p><ul><li>Converted value.<br>!!! note “Note”<br>If the input value does not fit the bounds of the target type, the result overflows. For example, <code>CAST(-1, &#39;UInt8&#39;)</code> returns <code>255</code> .</li></ul><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CAST</span>(toInt8(<span class="number">-1</span>), <span class="string">&#x27;UInt8&#x27;</span>) <span class="keyword">AS</span> cast_int_to_uint, <span class="built_in">CAST</span>(<span class="number">1.5</span> <span class="keyword">AS</span> <span class="type">Decimal</span>(<span class="number">3</span>,<span class="number">2</span>)) <span class="keyword">AS</span> cast_float_to_decimal;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─cast_int_to_uint─┬─cast_float_to_decimal─┐</span><br><span class="line">│ 255              │ 1.50                  │</span><br><span class="line">└──────────────────┴───────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="string">&#x27;2016-06-15 23:00:00&#x27;</span> <span class="keyword">AS</span> <span class="type">timestamp</span>,</span><br><span class="line">    <span class="built_in">CAST</span>(<span class="type">timestamp</span> <span class="keyword">AS</span> DateTime) <span class="keyword">AS</span> datetime,</span><br><span class="line">    <span class="built_in">CAST</span>(<span class="type">timestamp</span> <span class="keyword">AS</span> <span class="type">Date</span>) <span class="keyword">AS</span> <span class="type">date</span>,</span><br><span class="line">    <span class="built_in">CAST</span>(<span class="type">timestamp</span>, <span class="string">&#x27;String&#x27;</span>) <span class="keyword">AS</span> string,</span><br><span class="line">    <span class="built_in">CAST</span>(<span class="type">timestamp</span>, <span class="string">&#x27;FixedString(22)&#x27;</span>) <span class="keyword">AS</span> fixed_string;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─timestamp───────────┬─datetime────────────┬─date───────┬─string──────────────┬─fixed_string────────┐</span><br><span class="line">│ 2016-06-15 23:00:00 │ 2016-06-15 23:00:00 │ 2016-06-15 │ 2016-06-15 23:00:00 │ 2016-06-15 23:00:00 │</span><br><span class="line">└─────────────────────┴─────────────────────┴────────────┴─────────────────────┴─────────────────────┘</span><br></pre></td></tr></table></figure><p>Conversion to FixedString(N) only works for arguments of type String or FixedString.</p><p>Type conversion to Nullable and back is supported.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toTypeName(number) <span class="keyword">FROM</span> numbers(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─toTypeName(number)─┐</span><br><span class="line">│ UInt64             │</span><br><span class="line">│ UInt64             │</span><br><span class="line">└────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toTypeName(<span class="built_in">CAST</span>(number, <span class="string">&#x27;Nullable(UInt64)&#x27;</span>)) <span class="keyword">FROM</span> numbers(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─toTypeName(CAST(number, &#x27;Nullable(UInt64)&#x27;))─┐</span><br><span class="line">│ Nullable(UInt64)                             │</span><br><span class="line">│ Nullable(UInt64)                             │</span><br><span class="line">└──────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="reinterpretAsDate"><a href="#reinterpretAsDate" class="headerlink" title="reinterpretAsDate"></a>reinterpretAsDate</h2><p>These functions accept a string and interpret the bytes placed at the beginning of the string as a number in host order (little endian). If the string isn’t long enough, the functions work as if the string is padded with the necessary number of null bytes. If the string is longer than needed, the extra bytes are ignored. A date is interpreted as the number of days since the beginning of the Unix Epoch.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reinterpretAsDate(fixed_string)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>fixed_string</code> — String with bytes representation.</li></ul><p><strong>Returned value</strong></p><ul><li>DateTime.</li></ul><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> reinterpretAsDate(reinterpretAsString(toDate(<span class="string">&#x27;2019-01-01&#x27;</span>)));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─reinterpretAsDate(reinterpretAsString(toDate(&#x27;2019-01-01&#x27;)))─┐</span><br><span class="line">│ 2019-01-01                                                   │</span><br><span class="line">└──────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="reinterpretAsDateTime"><a href="#reinterpretAsDateTime" class="headerlink" title="reinterpretAsDateTime"></a>reinterpretAsDateTime</h2><p>These functions accept a string and interpret the bytes placed at the beginning of the string as a number in host order (little endian). If the string isn’t long enough, the functions work as if the string is padded with the necessary number of null bytes. If the string is longer than needed, the extra bytes are ignored. A date is interpreted as the number of days since the beginning of the Unix Epoch, and a date with time is interpreted as the number of seconds since the beginning of the Unix Epoch.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reinterpretAsDateTime(fixed_string)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>fixed_string</code> — String with bytes representation.</li></ul><p><strong>Returned value</strong></p><ul><li>DateTime.</li></ul><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> reinterpretAsDateTime(reinterpretAsString(toDateTime(<span class="string">&#x27;2019-01-01 00:00:00&#x27;</span>)));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─reinterpretAsDateTime(reinterpretAsString(toDateTime(&#x27;2019-01-01 00:00:00&#x27;)))─┐</span><br><span class="line">│ 2019-01-01 00:00:00                                                           │</span><br><span class="line">└───────────────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="reinterpretAsFixedString"><a href="#reinterpretAsFixedString" class="headerlink" title="reinterpretAsFixedString"></a>reinterpretAsFixedString</h2><p>This function accepts a number or date or date with time, and returns a FixedString containing bytes representing the corresponding value in host order (little endian). Null bytes are dropped from the end. For example, a UInt32 type value of 255 is a FixedString that is one byte long.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reinterpretAsFixedString(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> — a number or date or date with time.</li></ul><p><strong>Returned value</strong></p><ul><li>FixedString.</li></ul><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> reinterpretAsFixedString(toDate(<span class="string">&#x27;2019-01-01&#x27;</span>));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─reinterpretAsFixedString(toDate(&#x27;2019-01-01&#x27;))─┐</span><br><span class="line">│ �E                                             │</span><br><span class="line">└────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="reinterpretAsString"><a href="#reinterpretAsString" class="headerlink" title="reinterpretAsString"></a>reinterpretAsString</h2><p>This function accepts a number or date or date with time, and returns a string containing bytes representing the corresponding value in host order (little endian). Null bytes are dropped from the end. For example, a UInt32 type value of 255 is a string that is one byte long.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reinterpretAsString(<span class="keyword">value</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>value</code> — a number or date or date with time</li></ul><p><strong>Returned value</strong></p><ul><li>String with bytes representation.</li></ul><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> reinterpretAsString(toDate(<span class="string">&#x27;2019-01-01&#x27;</span>));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─reinterpretAsString(toDate(&#x27;2019-01-01&#x27;))─┐</span><br><span class="line">│ �E                                        │</span><br><span class="line">└───────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toDate"><a href="#toDate" class="headerlink" title="toDate"></a>toDate</h2><p>converts a String, Date, DateTime, UInt* number to Date type.<br>toDate</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toDate(<span class="type">time</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>time</code> — a String, Date, DateTime, UInt* number.</li></ul><p><strong>Returned value</strong></p><ul><li>Date</li></ul><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toDate(<span class="string">&#x27;2019-01-01&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─cast_int_to_uint─┬─cast_float_to_decimal─┐</span><br><span class="line">│ 255              │ 1.50                  │</span><br><span class="line">└──────────────────┴───────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toDate(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toDate(1)──┐</span><br><span class="line">│ 1970-01-02 │</span><br><span class="line">└────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toDate(toDateTime(<span class="string">&#x27;2019-01-01 00:00:00&#x27;</span>));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toDate(toDateTime(&#x27;2019-01-01 00:00:00&#x27;))─┐</span><br><span class="line">│ 2019-01-01                                │</span><br><span class="line">└───────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toDecimal-32-64"><a href="#toDecimal-32-64" class="headerlink" title="toDecimal(32|64)"></a>toDecimal(32|64)</h2><p>Converts <code>value</code> to the Decimal data type with precision of <code>S</code> . The <code>value</code> can be a number or a string. The <code>S</code> (scale) parameter specifies the number of decimal places.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toDecimal32(<span class="keyword">value</span>, S)</span><br><span class="line">toDecimal64(<span class="keyword">value</span>, S)</span><br></pre></td></tr></table></figure><!-- TODO: Gateway client does not support toDecimal128(value, S) --><p><strong>Arguments</strong></p><ul><li><code>value</code> - can be a number or a string</li><li><code>S</code> (scale) parameter specifies the number of decimal places.</li></ul><p><strong>Returned value</strong></p><ul><li>Decimal</li></ul><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toDecimal32(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toDecimal32(1, 2)─┐</span><br><span class="line">│ 1.00              │</span><br><span class="line">└───────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toDecimal32(<span class="string">&#x27;1&#x27;</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toDecimal32(&#x27;1&#x27;, 2)─┐</span><br><span class="line">│ 1.00                │</span><br><span class="line">└─────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toDecimal-32-64-OrNull"><a href="#toDecimal-32-64-OrNull" class="headerlink" title="toDecimal(32|64)OrNull"></a>toDecimal(32|64)OrNull</h2><p>Converts an input string to a Nullable(Decimal(P,S)) data type value.</p><p>These functions should be used instead of <code>toDecimal*()</code> functions, if you prefer to get a <code>NULL</code> value instead of an exception in the event of an input value parsing error.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toDecimal32OrNull(expr, S)</span><br><span class="line">toDecimal64OrNull(expr, S)</span><br></pre></td></tr></table></figure><!-- TODO: Gateway client does not support toDecimal128OrNull(expr, S) --><p><strong>Arguments</strong></p><ul><li><code>expr</code> — Expression, returns a value in the String data type. ByteHouse expects the textual representation of the decimal number. For example, <code>&#39;1.111&#39;</code> . </li><li><code>S</code> — Scale, the number of decimal places in the resulting value.</li></ul><p><strong>Returned value</strong><br>A value in the <code>Nullable(Decimal(P,S))</code> data type. The value contains:</p><ul><li>Number with <code>S</code> decimal places, if ByteHouse interprets the input string as a number. </li><li><code>NULL</code> , if ByteHouse can’t interpret the input string as a number or if the input number contains more than <code>S</code> decimal places.</li></ul><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toDecimal32OrNull(toString(<span class="number">-1.111</span>), <span class="number">5</span>) <span class="keyword">AS</span> val, toTypeName(val);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─val──────┬─toTypeName(toDecimal32OrNull(toString(-1.111), 5))─┐</span><br><span class="line">│ -1.11100 │ Nullable(Decimal(9, 5))                            │</span><br><span class="line">└──────────┴────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toDecimal32OrNull(toString(<span class="number">-1.111</span>), <span class="number">2</span>) <span class="keyword">AS</span> val, toTypeName(val);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─val──┬─toTypeName(toDecimal32OrNull(toString(-1.111), 2))─┐</span><br><span class="line">│ ᴺᵁᴸᴸ │ Nullable(Decimal(9, 2))                            │</span><br><span class="line">└──────┴────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toDecimal-32-64-OrZero"><a href="#toDecimal-32-64-OrZero" class="headerlink" title="toDecimal(32|64)OrZero"></a>toDecimal(32|64)OrZero</h2><p>Converts an input value to the Decimal(P,S) data type.</p><p>These functions should be used instead of <code>toDecimal*()</code> functions, if you prefer to get a <code>0</code> value instead of an exception in the event of an input value parsing error.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toDecimal32OrZero( expr, S)</span><br><span class="line">toDecimal64OrZero( expr, S)</span><br></pre></td></tr></table></figure><!-- TODO: Gateway client does not support toDecimal128OrZero( expr, S) --><p><strong>Arguments</strong></p><ul><li><code>expr</code> — Expression data type. ByteHouse expects the textual representation of the decimal number. For example, <code>&#39;1.111&#39;</code> . </li><li><code>S</code> — Scale, the number of decimal places in the resulting value.</li></ul><p><strong>Returned value</strong><br>A value in the <code>Nullable(Decimal(P,S))</code> data type. The value contains:</p><ul><li>Number with <code>S</code> decimal places, if ClickHouse interprets the input string as a number. </li><li>0 with <code>S</code> decimal places, if ClickHouse can’t interpret the input string as a number or if the input number contains more than <code>S</code> decimal places.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toDecimal32OrZero(toString(<span class="number">-1.111</span>), <span class="number">5</span>) <span class="keyword">AS</span> val, toTypeName(val);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─val──────┬─toTypeName(toDecimal32OrZero(toString(-1.111), 5))─┐</span><br><span class="line">│ -1.11100 │ Decimal(9, 5)                                      │</span><br><span class="line">└──────────┴────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toDecimal32OrZero(toString(<span class="number">-1.111</span>), <span class="number">2</span>) <span class="keyword">AS</span> val, toTypeName(val);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─val──┬─toTypeName(toDecimal32OrZero(toString(-1.111), 2))─┐</span><br><span class="line">│ 0.00 │ Decimal(9, 2)                                      │</span><br><span class="line">└──────┴────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toFixedString"><a href="#toFixedString" class="headerlink" title="toFixedString"></a>toFixedString</h2><p>Converts a String type argument to a FixedString(N) type (a string with fixed length N). N must be a constant.</p><p>If the string has fewer bytes than N, it is padded with null bytes to the right. If the string has more bytes than N, an exception is thrown.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toFixedString(s, N)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>s</code> — String. </li><li><code>N</code> — a constant.</li></ul><p><strong>Returned value</strong></p><ul><li>FixedString</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toFixedString(<span class="string">&#x27;1234&#x27;</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toFixedString(&#x27;1234&#x27;, 5)─┐</span><br><span class="line">│ 1234                     │</span><br><span class="line">└──────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toInt-8-16-32-64"><a href="#toInt-8-16-32-64" class="headerlink" title="toInt(8|16|32|64)"></a>toInt(8|16|32|64)</h2><p>Converts an input value to the Int data type.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">toInt8(expr)</span><br><span class="line">toInt16(expr)</span><br><span class="line">toInt32(expr)</span><br><span class="line">toInt64(expr)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>expr</code> — Expression returning a number or a string with the decimal representation of a number. Binary, octal, and hexadecimal representations of numbers are not supported. Leading zeroes are stripped.</li></ul><p><strong>Returned value</strong></p><ul><li>Integer value in the <code>Int8</code> , <code>Int16</code> , <code>Int32</code> , <code>Int64</code> data type.</li></ul><p>Functions use <a href="https://en.wikipedia.org/wiki/Rounding#Rounding_towards_zero">rounding towards zero</a> , meaning they truncate fractional digits of numbers.</p><p>The behavior of functions for the NaN and Inf arguments is undefined. </p><p>When you convert a value from one to another data type, you should remember that in common case, it is an unsafe operation that can lead to a data loss. A data loss can occur if you try to fit value from a larger data type to a smaller data type, or if you convert values between different data types.</p><p>ByteHouse has the <a href="https://en.cppreference.com/w/cpp/language/implicit_conversion">same behavior as C++ programs</a>.</p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toInt64(nan), toInt32(<span class="number">32</span>), toInt16(<span class="string">&#x27;16&#x27;</span>), toInt8(<span class="number">8.8</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toInt64(nan)─────────┬─toInt32(32)─┬─toInt16(&#x27;16&#x27;)─┬─toInt8(8.8)─┐</span><br><span class="line">│ -9223372036854775808 │ 32          │ 16            │ 8           │</span><br><span class="line">└──────────────────────┴─────────────┴───────────────┴─────────────┘</span><br></pre></td></tr></table></figure><h2 id="toInt-8-16-32-64-OrNull"><a href="#toInt-8-16-32-64-OrNull" class="headerlink" title="toInt(8|16|32|64)OrNull"></a>toInt(8|16|32|64)OrNull</h2><p>It takes an argument of type String and tries to parse it into Int (8 | 16 | 32 | 64). If failed, returns NULL.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">toInt8OrNull(expr)</span><br><span class="line">toInt16OrNull(expr)</span><br><span class="line">toInt32OrNull(expr)</span><br><span class="line">toInt64OrNull(expr)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>expr</code> — Expression returning a number or a string with the decimal representation of a number. Binary, octal, and hexadecimal representations of numbers are not supported. Leading zeroes are stripped.</li></ul><p><strong>Returned value</strong></p><ul><li>Integer value in the <code>Int8</code> , <code>Int16</code> , <code>Int32</code> , <code>Int64</code> data type.</li></ul><p>Functions use <a href="https://en.wikipedia.org/wiki/Rounding#Rounding_towards_zero">rounding towards zero</a> , meaning they truncate fractional digits of numbers.</p><p>The behavior of functions for the NaN and Inf arguments is undefined. </p><p>When you convert a value from one to another data type, you should remember that in common case, it is an unsafe operation that can lead to a data loss. A data loss can occur if you try to fit value from a larger data type to a smaller data type, or if you convert values between different data types.</p><p>ByteHouse has the <a href="https://en.cppreference.com/w/cpp/language/implicit_conversion">same behavior as C++ programs</a>.</p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toInt64OrNull(<span class="string">&#x27;123123&#x27;</span>), toInt8OrNull(<span class="string">&#x27;123qwe123&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toInt64OrNull(&#x27;123123&#x27;)─┬─toInt8OrNull(&#x27;123qwe123&#x27;)─┐</span><br><span class="line">│                  123123 │                      ᴺᵁᴸᴸ │</span><br><span class="line">└─────────────────────────┴───────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toInt-8-16-32-64-OrZero"><a href="#toInt-8-16-32-64-OrZero" class="headerlink" title="toInt(8|16|32|64)OrZero"></a>toInt(8|16|32|64)OrZero</h2><p>It takes an argument of type String and tries to parse it into Int (8 | 16 | 32 | 64 ). If failed, returns 0.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">toInt8OrZero(expr)</span><br><span class="line">toInt16OrZero(expr)</span><br><span class="line">toInt32OrZero(expr)</span><br><span class="line">toInt64OrZero(expr)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>expr</code> — Expression returning a number or a string with the decimal representation of a number. Binary, octal, and hexadecimal representations of numbers are not supported. Leading zeroes are stripped.</li></ul><p><strong>Returned value</strong></p><ul><li>Integer value in the <code>Int8</code> , <code>Int16</code> , <code>Int32</code> , <code>Int64</code> data type.</li></ul><p>Functions use <a href="https://en.wikipedia.org/wiki/Rounding#Rounding_towards_zero">rounding towards zero</a> , meaning they truncate fractional digits of numbers.</p><p>The behavior of functions for the NaN and Inf arguments is undefined. </p><p>When you convert a value from one to another data type, you should remember that in common case, it is an unsafe operation that can lead to a data loss. A data loss can occur if you try to fit value from a larger data type to a smaller data type, or if you convert values between different data types.</p><p>ByteHouse has the <a href="https://en.cppreference.com/w/cpp/language/implicit_conversion">same behavior as C++ programs</a>.</p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toInt64OrZero(<span class="string">&#x27;123123&#x27;</span>), toInt8OrZero(<span class="string">&#x27;123qwe123&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toInt64OrZero(&#x27;123123&#x27;)─┬─toInt8OrZero(&#x27;123qwe123&#x27;)─┐</span><br><span class="line">│ 123123                  │ 0                         │</span><br><span class="line">└─────────────────────────┴───────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toInterval-Year-Quarter-Month-Week-Day-Hour-Minute-Second"><a href="#toInterval-Year-Quarter-Month-Week-Day-Hour-Minute-Second" class="headerlink" title="toInterval(Year|Quarter|Month|Week|Day|Hour|Minute|Second)"></a>toInterval(Year|Quarter|Month|Week|Day|Hour|Minute|Second)</h2><p>Converts a Number type argument to an Interval data type.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">toIntervalSecond(number)</span><br><span class="line">toIntervalMinute(number)</span><br><span class="line">toIntervalHour(number)</span><br><span class="line">toIntervalDay(number)</span><br><span class="line">toIntervalWeek(number)</span><br><span class="line">toIntervalMonth(number)</span><br><span class="line">toIntervalQuarter(number)</span><br><span class="line">toIntervalYear(number)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>number</code> — Duration of interval. Positive integer number.</li></ul><p><strong>Returned values</strong></p><ul><li>The value in <code>Interval</code> data type.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span></span><br><span class="line">    toDate(<span class="string">&#x27;2019-01-01&#x27;</span>) <span class="keyword">AS</span> <span class="type">date</span>,</span><br><span class="line">    <span class="type">INTERVAL</span> <span class="number">1</span> WEEK <span class="keyword">AS</span> interval_week,</span><br><span class="line">    toIntervalWeek(<span class="number">1</span>) <span class="keyword">AS</span> interval_to_week</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="type">date</span> <span class="operator">+</span> interval_week,</span><br><span class="line">    <span class="type">date</span> <span class="operator">+</span> interval_to_week;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─plus(date, interval_week)─┬─plus(date, interval_to_week)─┐</span><br><span class="line">│ 2019-01-08                │ 2019-01-08                   │</span><br><span class="line">└───────────────────────────┴──────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toLowCardinality"><a href="#toLowCardinality" class="headerlink" title="toLowCardinality"></a>toLowCardinality</h2><p>Converts input parameter to the LowCardianlity version of same data type.</p><p>To convert data from the <code>LowCardinality</code> data type use the CAST function. For example, <code>CAST(x as String)</code> .</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toLowCardinality(expr)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>expr</code> — Expression resulting in one of the supported data types.</li></ul><p><strong>Returned values</strong></p><ul><li>Result of <code>expr</code> . Type: <code>LowCardinality(expr_result_type)</code></li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toLowCardinality(<span class="string">&#x27;1&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toLowCardinality(&#x27;1&#x27;)─┐</span><br><span class="line">│ 1                     │</span><br><span class="line">└───────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><p>Functions for converting between numbers, strings (but not fixed strings), dates, and dates with times.</p><p>All these functions accept one argument.</p><p>When converting to or from a string, the value is formatted or parsed using the same rules as for the TabSeparated format (and almost all other text formats). If the string can’t be parsed, an exception is thrown and the request is canceled.</p><p>When converting dates to numbers or vice versa, the date corresponds to the number of days since the beginning of the Unix epoch.</p><p>When converting dates with times to numbers or vice versa, the date with time corresponds to the number of seconds since the beginning of the Unix epoch.</p><p>The date and date-with-time formats for the toDate&#x2F;toDateTime functions are defined as follows:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">YYYY-MM-DD</span><br><span class="line"></span><br><span class="line">YYYY-MM-DD hh:mm:ss</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>As an exception, if converting from UInt32, Int32, UInt64, or Int64 numeric types to Date, and if the number is greater than or equal to 65536, the number is interpreted as a Unix timestamp (and not as the number of days) and is rounded to the date. This allows support for the common occurrence of writing ‘toDate(unix_timestamp)’, which otherwise would be an error and would require writing the more cumbersome ‘toDate(toDateTime(unix_timestamp))’.</p><p>Conversion between a date and date with time is performed the natural way: by adding a null time or dropping the time.</p><p>Conversion between numeric types uses the same rules as assignments between different numeric types in C++.</p><p>Additionally, the toString function of the DateTime argument can take a second String argument containing the name of the time zone. Example: <code>Asia/Yekaterinburg</code> In this case, the time is formatted according to the specified time zone.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toString(<span class="keyword">value</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>value</code> — numbers, strings, dates, and datetime</li></ul><p><strong>Returned values</strong></p><ul><li>String</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    now() <span class="keyword">AS</span> now_local,</span><br><span class="line">    toString(now(), <span class="string">&#x27;Asia/Yekaterinburg&#x27;</span>) <span class="keyword">AS</span> now_yekat;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─now_local───────────┬─now_yekat───────────┐</span><br><span class="line">│ 2021-08-18 15:25:59 │ 2021-08-18 12:25:59 │</span><br><span class="line">└─────────────────────┴─────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toStringCutToZero"><a href="#toStringCutToZero" class="headerlink" title="toStringCutToZero"></a>toStringCutToZero</h2><p>Accepts a String or FixedString argument. Returns the String with the content truncated at the first zero byte found.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toStringCutToZero(s)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>s</code> — String or FixedString.</li></ul><p><strong>Returned values</strong></p><ul><li>truncated string</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toFixedString(<span class="string">&#x27;foo&#x27;</span>, <span class="number">8</span>) <span class="keyword">AS</span> s, toStringCutToZero(s) <span class="keyword">AS</span> s_cut;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─s───┬─s_cut─┐</span><br><span class="line">│ foo │ foo   │</span><br><span class="line">└─────┴───────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toFixedString(<span class="string">&#x27;foo\0bar&#x27;</span>, <span class="number">8</span>) <span class="keyword">AS</span> s, toStringCutToZero(s) <span class="keyword">AS</span> s_cut;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─s──────┬─s_cut─┐</span><br><span class="line">│ foobar │ foo   │</span><br><span class="line">└────────┴───────┘</span><br></pre></td></tr></table></figure><h2 id="toUInt-8-16-32-64"><a href="#toUInt-8-16-32-64" class="headerlink" title="toUInt(8|16|32|64)"></a>toUInt(8|16|32|64)</h2><p>Converts an input value to the UInt data type. This function family includes: </p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">toUInt8(expr)</span><br><span class="line">toUInt16(expr)</span><br><span class="line">toUInt32(expr)</span><br><span class="line">toUInt64(expr)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>expr</code> — Expression returning a number or a string with the decimal representation of a number. Binary, octal, and hexadecimal representations of numbers are not supported. Leading zeroes are stripped.</li></ul><p><strong>Returned value</strong></p><ul><li>Integer value in the <code>UInt8</code> , <code>UInt16</code> , <code>UInt32</code> , <code>UInt64</code> data type.</li></ul><p>Functions use <a href="https://en.wikipedia.org/wiki/Rounding#Rounding_towards_zero">rounding towards zero</a> , meaning they truncate fractional digits of numbers.</p><p>The behavior of functions for negative agruments and for the NaN and Inf arguments is undefined. If you pass a string with a negative number, for example <code>&#39;-32&#39;</code> , ByteHouse raises an exception.</p><p>When you convert a value from one to another data type, you should remember that in common case, it is an unsafe operation that can lead to a data loss. A data loss can occur if you try to fit value from a larger data type to a smaller data type, or if you convert values between different data types.</p><p>ByteHouse has the <a href="https://en.cppreference.com/w/cpp/language/implicit_conversion">same behavior as C++ programs</a>.</p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toUInt64(nan), toUInt32(<span class="number">-32</span>), toUInt16(<span class="string">&#x27;16&#x27;</span>), toUInt8(<span class="number">8.8</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toUInt64(nan)───────┬─toUInt32(-32)─┬─toUInt16(&#x27;16&#x27;)─┬─toUInt8(8.8)─┐</span><br><span class="line">│ 9223372036854775808 │ 4294967264    │ 16             │ 8            │</span><br><span class="line">└─────────────────────┴───────────────┴────────────────┴──────────────┘</span><br></pre></td></tr></table></figure><h2 id="toUnixTimestamp"><a href="#toUnixTimestamp" class="headerlink" title="toUnixTimestamp"></a>toUnixTimestamp</h2><p>For DateTime argument: converts value to the number with type UInt32 – Unix Timestamp ( <a href="https://en.wikipedia.org/wiki/Unix_time">https://en.wikipedia.org/wiki/Unix_time</a> ).</p><p>For String argument: converts the input string to the datetime according to the timezone (optional second argument, server timezone is used by default) and returns the corresponding unix timestamp.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toUnixTimestamp(datetime)</span><br><span class="line">toUnixTimestamp(str, [timezone])</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>datetime</code> — DateTime </li><li><code>str</code> - datetime string</li><li><code>timezone</code>(optional) - timezone</li></ul><p><strong>Returned value</strong></p><ul><li>Returns the unix timestamp. Type: <code>UInt32</code> .</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toUnixTimestamp(<span class="string">&#x27;2017-11-05 08:07:47&#x27;</span>, <span class="string">&#x27;Asia/Tokyo&#x27;</span>) <span class="keyword">AS</span> unix_timestamp</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─unix_timestamp─┐</span><br><span class="line">│ 1509836867     │</span><br><span class="line">└────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toUnixTimestamp(toDateTime(<span class="string">&#x27;2017-11-05 08:07:47&#x27;</span>, <span class="string">&#x27;Asia/Tokyo&#x27;</span>)) <span class="keyword">AS</span> unix_timestamp</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─unix_timestamp─┐</span><br><span class="line">│ 1509836867     │</span><br><span class="line">└────────────────┘</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> SQL_Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UUID</title>
      <link href="/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/uuid/"/>
      <url>/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/uuid/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Notice:<br>Some of the examples below are referenced from <a href="https://clickhouse.com/docs/en/sql-reference/functions/">ClickHouse Documentation</a> but have been adapted and modified to work in ByteHouse.</p></blockquote><h2 id="generateUUIDv4"><a href="#generateUUIDv4" class="headerlink" title="generateUUIDv4"></a>generateUUIDv4</h2><p>Generates the UUID of <a href="https://tools.ietf.org/html/rfc4122#section-4.4">version 4</a> .</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">generateUUIDv4()</span><br></pre></td></tr></table></figure><p><strong>Returned value</strong></p><ul><li>The UUID type value.</li></ul><p><strong>Examples</strong><br>This example demonstrates creating a table with the UUID type column and inserting a value into the table.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test.functionGenerateUUIDv4 (x UUID) ENGINE<span class="operator">=</span>CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> x;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.functionGenerateUUIDv4 <span class="keyword">SELECT</span> generateUUIDv4();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test.functionGenerateUUIDv4;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─x────────────────────────────────────┐</span><br><span class="line">│ a630fbcb-1a32-4902-b5cc-dd51eba8cf4b │</span><br><span class="line">└──────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toUUID"><a href="#toUUID" class="headerlink" title="toUUID"></a>toUUID</h2><p>Converts String type value to UUID type. Exception will be raised if input string is invalid uuid format.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">toUUID(String)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong> </p><ul><li><code>String</code> — string in uuid format.</li></ul><p><strong>Returned value</strong></p><ul><li>The UUID type value.</li></ul><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> toUUID(<span class="string">&#x27;61f0c404-5cb3-11e7-907b-a6006ad3dba0&#x27;</span>) <span class="keyword">AS</span> uuid, toTypeName(uuid) <span class="keyword">AS</span> uuid_type;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─uuid─────────────────────────────────┬─uuid_type─┐</span><br><span class="line">│ 61f0c404-5cb3-11e7-907b-a6006ad3dba0 │ UUID      │</span><br><span class="line">└──────────────────────────────────────┴───────────┘</span><br></pre></td></tr></table></figure><h2 id="toUUIDOrNull"><a href="#toUUIDOrNull" class="headerlink" title="toUUIDOrNull"></a>toUUIDOrNull</h2><p>It takes an argument of type String and tries to parse it into UUID. If failed, returns NULL.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">toUUIDOrNull(String)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong> </p><ul><li><code>String</code> — string in uuid format.</li></ul><p><strong>Returned value</strong></p><ul><li>The Nullable(UUID) type value.</li></ul><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> toUUIDOrNull(<span class="string">&#x27;61f0c404-5cb3-11e7-907b-a6006ad3dba0T&#x27;</span>) <span class="keyword">AS</span> uuid</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─uuid─┐</span><br><span class="line">│ ᴺᵁᴸᴸ │</span><br><span class="line">└──────┘</span><br></pre></td></tr></table></figure><h2 id="toUUIDOrZero"><a href="#toUUIDOrZero" class="headerlink" title="toUUIDOrZero"></a>toUUIDOrZero</h2><p>It takes an argument of type String and tries to parse it into UUID. If failed, returns zero UUID.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">toUUIDOrZero(String)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong> </p><ul><li><code>String</code> — string in uuid format.</li></ul><p><strong>Returned value</strong></p><ul><li>The UUID type value.</li></ul><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> toUUIDOrZero(<span class="string">&#x27;61f0c404-5cb3-11e7-907b-a6006ad3dba0T&#x27;</span>) <span class="keyword">AS</span> uuid</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─uuid─────────────────────────────────┐</span><br><span class="line">│ 00000000-0000-0000-0000-000000000000 │</span><br><span class="line">└──────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="generateUUIDv4-1"><a href="#generateUUIDv4-1" class="headerlink" title="generateUUIDv4"></a>generateUUIDv4</h2><p>Generates the <a href="https://bytedance.feishu.cn/sql-reference/data-types/uuid.md">UUID</a> of <a href="https://tools.ietf.org/html/rfc4122#section-4.4">version 4</a> .</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">generateUUIDv4()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Returned value</strong></p><p>The UUID type value.</p><p><strong>Usage example</strong></p><p>This example demonstrates creating a table with the UUID type column and inserting a value into the table.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_uuid (x UUID) ENGINE<span class="operator">=</span>TinyLog</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_uuid <span class="keyword">SELECT</span> generateUUIDv4()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_uuid</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌────────────────────────────────────x─┐</span><br><span class="line"></span><br><span class="line">│ f4bf890f-f9dc-4332-ad5c-0c18e73f28e9 │</span><br><span class="line"></span><br><span class="line">└──────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="toUUID-1"><a href="#toUUID-1" class="headerlink" title="toUUID"></a>toUUID</h2><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">toUUID (x) </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Converts String type value to UUID type.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">toUUID(String)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Returned value</strong></p><p>The UUID type value.</p><p><strong>Usage example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> toUUID(<span class="string">&#x27;61f0c404-5cb3-11e7-907b-a6006ad3dba0&#x27;</span>) <span class="keyword">AS</span> uuid</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌─────────────────────────────────uuid─┐</span><br><span class="line"></span><br><span class="line">│ 61f0c404-5cb3-11e7-907b-a6006ad3dba0 │</span><br><span class="line"></span><br><span class="line">└──────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="toUUIDOrNull-1"><a href="#toUUIDOrNull-1" class="headerlink" title="toUUIDOrNull"></a>toUUIDOrNull</h2><p>toUUIDOrNull (x)</p><p>It takes an argument of type String and tries to parse it into UUID. If failed, returns NULL.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">toUUIDOrNull(String)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Returned value</strong></p><p>The Nullable(UUID) type value.</p><p><strong>Usage example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> toUUIDOrNull(<span class="string">&#x27;61f0c404-5cb3-11e7-907b-a6006ad3dba0T&#x27;</span>) <span class="keyword">AS</span> uuid</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌─uuid─┐</span><br><span class="line"></span><br><span class="line">│ ᴺᵁᴸᴸ │</span><br><span class="line"></span><br><span class="line">└──────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="toUUIDOrZero-1"><a href="#toUUIDOrZero-1" class="headerlink" title="toUUIDOrZero"></a>toUUIDOrZero</h2><p>toUUIDOrZero (x)</p><p>It takes an argument of type String and tries to parse it into UUID. If failed, returns zero UUID.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">toUUIDOrZero(String)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Returned value</strong></p><p>The UUID type value.</p><p><strong>Usage example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> toUUIDOrZero(<span class="string">&#x27;61f0c404-5cb3-11e7-907b-a6006ad3dba0T&#x27;</span>) <span class="keyword">AS</span> uuid</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌─────────────────────────────────uuid─┐</span><br><span class="line"></span><br><span class="line">│ 00000000-0000-0000-0000-000000000000 │</span><br><span class="line"></span><br><span class="line">└──────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> SQL_Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Window</title>
      <link href="/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/window/"/>
      <url>/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/window/</url>
      
        <content type="html"><![CDATA[<p>ByteHouse supports the standard syntax of window functions. A list of window related features are explained below.</p><table><thead><tr><th>Feature</th><th>Status</th></tr></thead><tbody><tr><td>ROWS mode</td><td>Supported. Please specify ROWs mode explicitly since RANGE mode is the default mode, so please always specify <code>ROWS</code> keyword in the window specification.</td></tr><tr><td>RANGE mode</td><td>not supported</td></tr><tr><td>GROUPS mode</td><td>not supported</td></tr><tr><td>Expressions involving window function like:</td><td>supported</td></tr><tr><td>Use of aggregate functions in window</td><td>supported</td></tr><tr><td>Navigations functions:</td><td>supported</td></tr><tr><td>Window alias like:</td><td>supported</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> SQL_Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主要原理概念</title>
      <link href="/zh-cn/docs/ByConity%E7%AE%80%E4%BB%8B/%E4%B8%BB%E8%A6%81%E5%8E%9F%E7%90%86%E6%A6%82%E5%BF%B5/"/>
      <url>/zh-cn/docs/ByConity%E7%AE%80%E4%BB%8B/%E4%B8%BB%E8%A6%81%E5%8E%9F%E7%90%86%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="主要原理概念"><a href="#主要原理概念" class="headerlink" title="主要原理概念"></a>主要原理概念</h1><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>ByConity 的查询执行流程如下图所示，首先通过原数据服务获取查询所需要的元数据信息，然后根据用户 sql 通过优化器生成高效的查询计划，并调度到相应的计算组上去读取数据并执行，最终进行结果集的汇总并发送回客户端。为了用户更好的了解 ByConity 查询的工作原理，此章会介绍 ByConity 的主要原理。</p><p><img src="/static/boxcnCarlKKAt0hSPtXFOpfmo7c.png"></p><h2 id="元数据管理-Catalog-Service"><a href="#元数据管理-Catalog-Service" class="headerlink" title="元数据管理(Catalog Service)"></a>元数据管理(Catalog Service)</h2><p>元数据管理（Catalog Service）的功能主要是对读写请求的元数据进行读写操作。元数据服务是一个非常关键的服务，其决定了查询的可用性和正确性。在 ByConity 里，我们不仅提供了高可用，可扩展的元数据管理服务，还在其之上实现了完备的事务语义保证（ACID）。除此之外，ByConity 还借助缓存，对查询涉及到的原数据提供低延迟读取，保证查询性能高效稳定。</p><h2 id="查询优化器-Query-Optimizer"><a href="#查询优化器-Query-Optimizer" class="headerlink" title="查询优化器(Query Optimizer)"></a>查询优化器(Query Optimizer)</h2><p>优化器（Query Optimizer) 是数据库系统的核心之一，优秀的优化器能极大提高查询性能，特别是在复杂查询场景下优化器能带来数倍至数百倍的性能提升。</p><p>ByConity 自研优化器基于四个大的优化方向提供极致优化能力：</p><ul><li>RBO：基于规则的优化能力。支持：列裁剪、分区裁剪、表达式简化、子查询解关联、谓词下推、冗余算子消除、Outer-JOIN 转 INNER-JOIN、算子下推存储、分布式算子拆分等常见的启发式优化能力。</li><li>CBO：基于代价的优化能力。支持：Join Reorder、Outer-Join Reorder、Join&#x2F;Agg Reorder、CTE、物化视图、Dynamic Filter 下推、Magic Set 等基于代价的优化能力。并且面向分布式计划融合了 Property Enforcement。</li><li>DBO：基于数据依赖的优化能力。支持：唯一键、functional dependency、Order dependency、Inclusion dependency 等基于数据依赖关系的优化能力。</li><li>HBO：基于查询反馈的优化能力。支持：基数估计动态调整、并行度动态调整、执行计划动态调整等基于历史执行反馈的优化能力。</li></ul><h2 id="计算组（Virtual-Warehouse"><a href="#计算组（Virtual-Warehouse" class="headerlink" title="计算组（Virtual Warehouse)"></a>计算组（Virtual Warehouse)</h2><p>计算组(Virtual Warehouse: 简称 VW) 是计算资源的虚拟组织，可以将计算资源按需划分为多个虚拟集群，在不同租户之间提供物理资源隔离。每个虚拟集群里包含 0 到多台计算节点，按照实际资源需求进行动态扩缩容。</p><p>计算资源扩缩容的方式有两种：</p><ul><li>一种是纵向扩容，即调整计算组的 CPU 核数和内存大小；</li><li>另一种是横向扩容，增减计算组的数量，提升系统并发能力；</li></ul><p>在存储计算分离的架构下，计算资源与存储资源是解耦的且无状态的，扩缩容过程不需要迁移和平衡数据，因而可以实现快速弹性扩缩容。</p><p>计算节点主要承担的是计算任务，这些任务可以是数据写入、用户查询，也可以是一些后台任务。在 ByConity 存储分离架构下，用户查询可以实现读写分离，降低读写作业之间的互相干扰。用户查询和后台任务，可以共享相同的计算节点以提高利用率，也可以使用独立的计算节点以保证严格的资源隔离。用户可以根据计算任务的特性、优先级和业务类别不同，构建多个计算组，并设置不同的资源弹性策略，提高计算效率降低成本。</p><h2 id="虚拟文件系统（Virtual-File-System-VFS）"><a href="#虚拟文件系统（Virtual-File-System-VFS）" class="headerlink" title="虚拟文件系统（Virtual File System-VFS）"></a>虚拟文件系统（Virtual File System-VFS）</h2><p>ByConity 采用 HDFS 或 S3 等云存储服务作为数据存储层，用来存储实际数据、索引等内容。数据表的数据文件存储在远端的统一分布式存储系统中，与计算节点分离开来。底层存储系统可能会对应不同类型的分布式系统。例如 HDFS，Amazon S3, Google cloud storage，Azure blob storage，阿里云对象存储等等。</p><p>不同的分布式存储系统，有很多不同的功能和不一样的性能，会影响到功能的设计和实现。例如 hdfs 不支持文件的 update, S3 object move 操作时重操作需要复制数据等。ByConity 通过存储的服务化，对计算层提供统一的抽象文件系统接口，存储层采用 S3 还是 HDFS 对计算层透明；计算层可以支持 ByConity 自身的计算引擎之外，将来还可以便捷地对接其他计算引擎，例如 Presto、Spark 等。</p><h2 id="列式存储（Columnar-Storage"><a href="#列式存储（Columnar-Storage" class="headerlink" title="列式存储（Columnar Storage)"></a>列式存储（Columnar Storage)</h2><p>与主流分析数据类似，ByConity 采用列式存储格式，减少不必要的数据 IO 提高查询性能，并对数据进行高效压缩，降低存储成本。除此之外，对于连续存储的列式数据，ByConity 通过向量化执行技术，进一步提升查询性能。</p><h1 id="主要流程"><a href="#主要流程" class="headerlink" title="主要流程"></a>主要流程</h1><h2 id="查询执行"><a href="#查询执行" class="headerlink" title="查询执行"></a>查询执行</h2><ol><li>用户提交 Select Query 到服务节点；</li><li>从元数据服务获取需要的元数据信息，对 Query 进行 Parsing，Planning，Optimising，生成执行计划；</li><li>服务节点根据可用的计算资源对执行计划进行调度，发送任务到计算节点；</li><li>计算节点接收到 Query 子查询；</li><li>Query 从虚拟文件系统（VFS） 获取数据，并根据 Query 的执行计划在计算节点上执行，并发回计算结果给服务节点汇总；</li></ol><h2 id="数据写入"><a href="#数据写入" class="headerlink" title="数据写入"></a>数据写入</h2><ol><li>用户提交 Write Query 到服务节点；</li><li>服务节点对写入请求根据调度策略选择合适的写入节点执行；</li><li>写入节点执行写入，讲数据写到本地盘并 dump 到云存储端；</li><li>提交 part 元数据到元数据服务（Catalog Service)，提交事务，写入完成；</li></ol><h2 id="计算组扩缩容"><a href="#计算组扩缩容" class="headerlink" title="计算组扩缩容"></a>计算组扩缩容</h2><p>资源管理器（Resource Manager）负责对计算资源进行统一的管理和调度，能够收集各个计算组的性能数据，资源使用量，为读写任务和后台任务动态分配资源并进行扩缩容，提高资源使用率。ByConity 的组件都已经容器化，通过调整 kubernets 的 replica 数量可以非常方便的对指定的计算组进行扩缩容。除此之外，还可以结合计算组资源使用量，通过设置 kubernets 的扩缩容阈值实现动态扩缩容。</p>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> Introduction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速上手</title>
      <link href="/zh-cn/docs/ByConity%E7%AE%80%E4%BB%8B/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
      <url>/zh-cn/docs/ByConity%E7%AE%80%E4%BB%8B/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h1><p>集群搭建和启动之后，让我们快速的试用一下：）</p><h1 id="入门教程"><a href="#入门教程" class="headerlink" title="入门教程"></a>入门教程</h1><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./clickhouse-client -m -h HOST --port PORT</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="创建库表"><a href="#创建库表" class="headerlink" title="创建库表"></a>创建库表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS helloworld</span><br><span class="line"></span><br><span class="line">CREATE TABLE helloworld.my_first_table</span><br><span class="line">(</span><br><span class="line">    user_id UInt32,</span><br><span class="line">    message String,</span><br><span class="line">    timestamp DateTime</span><br><span class="line">)</span><br><span class="line">ENGINE = CnchMergeTree()</span><br><span class="line">PARTITION BY timestamp</span><br><span class="line">ORDER BY (user_id, timestamp);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="写入和查询"><a href="#写入和查询" class="headerlink" title="写入和查询"></a>写入和查询</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO helloworld.my_first_table (user_id, message, timestamp) VALUES</span><br><span class="line">    (101, &#x27;Hello, ByConity!&#x27;,                                 now()),</span><br><span class="line">    (102, &#x27;Insert a lot of rows per batch&#x27;,                     yesterday()),</span><br><span class="line">    (102, &#x27;Sort your data based on your commonly-used queries&#x27;, today()),</span><br><span class="line">    (101, &#x27;Granules are the smallest chunks of data read&#x27;,      now() + 5);</span><br><span class="line"></span><br><span class="line">SELECT * FROM helloworld.my_first_table;</span><br><span class="line"></span><br><span class="line">SELECT * FROM helloworld.my_first_table ORDER BY timestamp;</span><br><span class="line"></span><br><span class="line">SELECT *　FROM helloworld.my_first_table　ORDER BY timestamp　FORMAT JSON;</span><br><span class="line"></span><br><span class="line">exit;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><p>假设我们有一个数据文件 data.csv</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">102,This is data in a file,2022-02-22 10:43:28</span><br><span class="line">101,It is comma-separated,2022-02-23 00:00:00</span><br><span class="line">103,Use FORMAT to specify the format,2022-02-21 10:43:30</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./clickhouse-client -h &#123;HOST&#125; --port &#123;PORT&#125; --query=&#x27;INSERT INTO helloworld.my_first_table FORMAT CSV&#x27; &lt; data.csv</span><br><span class="line"></span><br><span class="line">./clickhouse-client -h &#123;HOST&#125; --port &#123;PORT&#125; --query=&#x27;SELECT * FROM helloworld.my_first_table&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="查看计算组状态"><a href="#查看计算组状态" class="headerlink" title="查看计算组状态"></a>查看计算组状态</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM system.worker_groups</span><br><span class="line"></span><br><span class="line">Query id: f60481b4-b9a7-494d-a639-ac7be3aa5292</span><br><span class="line"></span><br><span class="line">Row 1:</span><br><span class="line">──────</span><br><span class="line">id:             wg_default</span><br><span class="line">type:           Physical</span><br><span class="line">vw_uuid:        1a415df1-6265-40b3-9c00-230fc3b026c1</span><br><span class="line">vw_name:        vw_default</span><br><span class="line">linked_id:</span><br><span class="line">active_workers: 1</span><br><span class="line">min_cpu_usage:  9</span><br><span class="line">max_cpu_usage:  9</span><br><span class="line">avg_cpu_usage:  9</span><br><span class="line">min_mem_usage:  8</span><br><span class="line">max_mem_usage:  8</span><br><span class="line">avg_mem_usage:  8</span><br><span class="line">is_auto_linked: 0</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">FROM system.workers</span><br><span class="line"></span><br><span class="line">Query id: f2377b52-38eb-4437-9813-d34f9dd28049</span><br><span class="line"></span><br><span class="line">Row 1:</span><br><span class="line">──────</span><br><span class="line">worker_id:             w1</span><br><span class="line">host:                  &#123;HOST&#125;</span><br><span class="line">tcp_port:              &#123;TCP_PORT&#125;</span><br><span class="line">rpc_port:              &#123;RPC_PORT&#125;</span><br><span class="line">http_port:             &#123;HTTP_PORT&#125;</span><br><span class="line">exchange_port:         &#123;EXCHANGE_PORT&#125;</span><br><span class="line">exchange_status_port:  &#123;EXCHANGE_STATUS_PORT&#125;</span><br><span class="line">vw_name:               vw_default</span><br><span class="line">worker_group_id:       wg_default</span><br><span class="line">query_num:             0</span><br><span class="line">cpu_usage:             &#123;xxx&#125;</span><br><span class="line">reserved_cpu_cores:    0</span><br><span class="line">memory_usage:          &#123;xxx&#125;</span><br><span class="line">disk_space:            &#123;xxx&#125;</span><br><span class="line">memory_available:      &#123;xxx&#125;</span><br><span class="line">reserved_memory_bytes: 0</span><br><span class="line">register_time:         2022-11-30 18:19:49</span><br><span class="line">last_update_time:      2022-11-30 18:21:09</span><br><span class="line">state:                 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="查看历史查询"><a href="#查看历史查询" class="headerlink" title="查看历史查询"></a>查看历史查询</h1><p><a href="https://clickhouse.com/docs/en/operations/system-tables/query_log/">https://clickhouse.com/docs/en/operations/system-tables/query_log&#x2F;</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM system.query_log;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> Introduction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐场景案例</title>
      <link href="/zh-cn/docs/ByConity%E7%AE%80%E4%BB%8B/%E6%8E%A8%E8%8D%90%E5%9C%BA%E6%99%AF%E6%A1%88%E4%BE%8B/"/>
      <url>/zh-cn/docs/ByConity%E7%AE%80%E4%BB%8B/%E6%8E%A8%E8%8D%90%E5%9C%BA%E6%99%AF%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="推荐场景案例"><a href="#推荐场景案例" class="headerlink" title="推荐场景案例"></a>推荐场景案例</h1><h1 id="通用场景"><a href="#通用场景" class="headerlink" title="通用场景"></a>通用场景</h1><p>ByConity 使用大量成熟 OLAP 技术，例如列存引擎，MPP 执行，智能查询优化，向量化执行，Codegen, indexing，数据压缩，主要用于 OLAP 查询和计算场景。在实时数据接入、大宽表聚合查询、海量数据下复杂分析计算、多表关联查询场景下有非常好的性能。</p><table><thead><tr><th align="left">场景分类</th><th align="left">场景</th><th align="left">描述</th><th align="left">特点</th></tr></thead><tbody><tr><td align="left">交互式查询</td><td align="left">用户自定义查询</td><td align="left">支持多维查询分析的数据应用</td><td align="left">自由维度、多表关联、响应快</td></tr><tr><td align="left"></td><td align="left">自助式报表</td><td align="left">支持Tableau等BI工具</td><td align="left">自由维度、多表关联、响应快</td></tr><tr><td align="left"></td><td align="left">用户画像分析</td><td align="left">支持DMP等圈人画像平台</td><td align="left">自由维度、多表关联、响应快</td></tr><tr><td align="left"></td><td align="left">营销效果分析</td><td align="left">支持流量效果漏斗分析</td><td align="left">多表关联、实时</td></tr><tr><td align="left"></td><td align="left">行为日志分析</td><td align="left">支持日志探索分析</td><td align="left">日志检索、数据量大</td></tr><tr><td align="left">实时数据看板</td><td align="left">实时业务监控大屏</td><td align="left">支持DataV等可视化大屏</td><td align="left">实时</td></tr><tr><td align="left"></td><td align="left">直播数据统计看板</td><td align="left">支持实时报表</td><td align="left">实时</td></tr><tr><td align="left"></td><td align="left">业务仪表盘</td><td align="left">支持报表工具</td><td align="left">统计、响应快</td></tr><tr><td align="left"></td><td align="left">系统链路监控</td><td align="left">支持实时监控应用</td><td align="left">实时</td></tr><tr><td align="left">实时数据仓库</td><td align="left">实时数据接入</td><td align="left">支持实时数据写入、更新</td><td align="left">实时数据写入，立即可见</td></tr><tr><td align="left"></td><td align="left">准实时ETL计算</td><td align="left">支持复杂计算，数据清洗</td><td align="left">混合负载</td></tr></tbody></table><h1 id="多租户隔离和资源共享"><a href="#多租户隔离和资源共享" class="headerlink" title="多租户隔离和资源共享"></a>多租户隔离和资源共享</h1><p>在 ByConity 里，用户可以为查询 SQL 指定计算组，实现物理资源隔离，避免不同租户之间查询互相干扰。当然，为了提高资源利用率，ByConity 也支持计算组之间的资源租借，实现资源共享。</p><h1 id="读写计算分离"><a href="#读写计算分离" class="headerlink" title="读写计算分离"></a>读写计算分离</h1><p>ByConity 存储计算分离的架构，使其原生支持存储计算分离，insert 使用专门用于写入的计算组，select 使用专门用于读取的计算组，读写作业之间不会相互影响。</p><h1 id="实时扩缩容"><a href="#实时扩缩容" class="headerlink" title="实时扩缩容"></a>实时扩缩容</h1><p>ByConity 存储计算分离架构设计使其完美契合有动态扩缩容需求的场景，根据实际资源需求最大化资源利用率，降低成本。ByConity 的元数据和数据存储在远端，计算节点的无状态化使扩缩容变得十分轻量，只需等计算实例启动完成，即可立即服务，无需额外的数据迁移开销，实现实时扩缩容。</p>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> Introduction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背景和技术架构</title>
      <link href="/zh-cn/docs/ByConity%E7%AE%80%E4%BB%8B/%E8%83%8C%E6%99%AF%E5%92%8C%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/"/>
      <url>/zh-cn/docs/ByConity%E7%AE%80%E4%BB%8B/%E8%83%8C%E6%99%AF%E5%92%8C%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="背景和技术架构"><a href="#背景和技术架构" class="headerlink" title="背景和技术架构"></a>背景和技术架构</h1><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>ByConity 是面向现代 IT 架构变化而设计的一款数仓系统，它采用云原生架构设计，在满足数仓用户对资源弹性扩缩容，读写分离，资源隔离，数据强一致性等多种需求的同时，并提供优异的查询，写入性能。</p><p>ByConity 在使用大量成熟 OLAP 技术，例如列存引擎，MPP 执行，智能查询优化，向量化执行，Codegen, indexing，数据压缩；也针对云场景和存算分离架构的特殊性做了技术创新，并向社区开源。</p><h1 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h1><p>ByConity 大体上可以分为 3 层：服务接入层，计算层和 存储层。服务接入层响应用户的查询，计算层负责对计算数据，存储层存放用户数据。</p><p><img src="/static/boxcnb2OyIV70Plb6Nrx6Fyc1Sc.png"></p><h2 id="服务接入层"><a href="#服务接入层" class="headerlink" title="服务接入层"></a>服务接入层</h2><p>ByConity 的服务接入层接受用户的查询，首先对查询进行解析，并结合 catalog api 获取元数据信息生成高效的执行计划，然后通过资源管理器（Resource manager）获取可用的计算资源，最后把查询计划调度到适合（e.g.，拥有缓存）的计算节点进行执行。服务接入层由一个或者多个 server 构成，并支持水平扩张，充当的是响应用户服务和协调调度的角色。除了用户作业之外，在 ByConity 里还有后台任务，例如 compaction&#x2F;gc 等等，这些后台任务由 Daemon manager 管理，调度到相应的 server 进行执行。</p><p>查询优化器是 ByConity 系统的核心之一，优秀的优化器能极大提高查询性能，特别是在复杂查询场景下优化器能带来数倍至数百倍的性能提升。ByConity 自研优化器基于四个大的优化方向（基于规则，基于 cost，基于数据依赖，基于反馈）提供极致优化能力。</p><h2 id="计算层"><a href="#计算层" class="headerlink" title="计算层"></a>计算层</h2><p>ByConity 的计算层由一个或者多个计算组构成，不同的租户可以使用不同的计算组实现物理资源隔离。资源管理器（Resource Manager）负责对计算资源进行统一的管理和调度，能够收集各个计算组的性能数据，资源使用量，为查询、写入和后台任务动态分配资源并进行动态扩缩容，提高资源使用率。</p><p>一个计算组由多个 worker 构成每个节点收到 PlanSegment 之后，开始驱动 PlanSegment 执行，包含数据源的 PlanSegment 开始读取数据，将数据按照一定的 shuffle 规则分发到下游的各个节点上，包含 exchange 输入的 PlanSegment 等待上游的数据，如果需要继续做 shuffle 则会继续将数据下发给各个节点，多轮 stage 完成之后，结果会返回到服务端。</p><h2 id="数据存储层"><a href="#数据存储层" class="headerlink" title="数据存储层"></a>数据存储层</h2><p>ByConity 的元数据和数据都实现了存储计算分离，元数据存储在分布式 key-value store 里，数据存储在分布式文件系统或者对象存储里。</p><ul><li>元数据存储</li></ul><p>ByConity 的元数据存储基于高性能的分布式 key-value store（FoundationDB）实现了一套通用的 catalog api，使得后端可插拔，方便扩展适配其他的 key-value store。ByConity 还在 catalog api 上层实现了完备事务语义（ACID）支持，提供了高效可靠的元数据服务，保证高数据质量。</p><ul><li>数据存储</li></ul><p>ByConity 采用 HDFS 或 S3 等云存储服务作为数据存储层，用来存储实际数据、索引等内容。数据表的数据文件存储在远端的统一分布式存储系统中，与计算节点分离开来。ByConity 在远端分布式存储系统之上，实现了一层通用的 virtual file system api，方便底层扩展和适配不同的存储后端，例如 HDFS，Amazon S3, Google cloud storage，Azure blob storage，阿里云对象存储等等。</p><p>与主流分析数据类似，ByConity 采用列式存储格式，减少不必要的数据 IO 提高查询性能，并对数据进行高效压缩，降低存储成本。除此之外，对于连续存储的列式数据，ByConity 通过向量化执行技术，进一步提升查询性能。</p>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> Introduction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ANSI Compatibility</title>
      <link href="/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/ansi-compatibility/"/>
      <url>/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/ansi-compatibility/</url>
      
        <content type="html"><![CDATA[<p>ByteHouse provides a rich set of SQL syntax through ANSI SQL dialect. When using this dialect, SQL statements will be parsed and validated by Apache Calcite and then sent to servers for execution. Apache Calcite supports standard ANSI SQL, please refer to the BNF-grammar here for more details: <a href="https://calcite.apache.org/docs/reference.html">https://calcite.apache.org/docs/reference.html</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> SQL_Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Types</title>
      <link href="/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/data-types/"/>
      <url>/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/data-types/</url>
      
        <content type="html"><![CDATA[<p>The data types provided in ByteHouse are adapted from ClickHouse. Visit this <a href="https://clickhouse.tech/docs/en/sql-reference/data-types/">page</a> for more information on ClickHouse data types.</p><h2 id="Summary-of-Data-Types"><a href="#Summary-of-Data-Types" class="headerlink" title="Summary of Data Types"></a>Summary of Data Types</h2><ul><li>Numeric Data Types<ul><li>Int8, TINYINT Int16, SMALLINT Int32, INT, INTEGER Int64, BIGINT UInt8 UInt16 UInt32 UInt64</li><li>Float32, FLOAT Float64, DOUBLE  </li><li>Decimal, DEC Decimal32 Decimal64 Decimal128</li></ul></li><li>String &amp; Binary Data Types<ul><li>String, TEXT, TINYTEXT, MEDIUMTEXT, LONGTEXT, BLOB, TINYBLOB, MEDIUMBLOB , LONGBLOB, CHAR, VARCHAR  </li><li>FixedString, BINARY</li></ul></li><li>Date &amp; Time Data Types<ul><li>Date</li><li>DateTime, TIMESTAMP</li></ul></li><li>Semi-structured Data Types<ul><li>Array</li><li>Map</li><li>Tuple</li><li>Enum8 Enum16  </li><li>Nested</li></ul></li><li>Other Special Data Types<ul><li>IPv4 IPv6  </li><li>Nullable</li><li>UUID</li></ul></li></ul><h2 id="Numeric-Data-Types"><a href="#Numeric-Data-Types" class="headerlink" title="Numeric Data Types"></a>Numeric Data Types</h2><h3 id="UInt8-UInt16-UInt32-UInt64-UInt256-Int8-Int16-Int32-Int64-Int128-Int256"><a href="#UInt8-UInt16-UInt32-UInt64-UInt256-Int8-Int16-Int32-Int64-Int128-Int256" class="headerlink" title="UInt8, UInt16, UInt32, UInt64, UInt256, Int8, Int16, Int32, Int64, Int128, Int256"></a>UInt8, UInt16, UInt32, UInt64, UInt256, Int8, Int16, Int32, Int64, Int128, Int256</h3><p>Fixed-length integers, with or without a sign.</p><p>When creating tables, numeric parameters for integer numbers can be set (e.g. <code>TINYINT(8)</code>, <code>SMALLINT(16)</code>, <code>INT(32)</code>, <code>BIGINT(64)</code>), but ByteHouse ignores them.</p><p><strong>Aliases</strong></p><ul><li><p><code>Int8</code> — <code>TINYINT</code></p></li><li><p><code>Int16</code> — <code>SMALLINT</code></p></li><li><p><code>Int32</code> — <code>INT</code>,<code>INTEGER</code>.</p></li><li><p><code>Int64</code> — <code>BIGINT</code>.</p></li></ul><p><strong>Int Ranges</strong></p><ul><li><p><code>Int8</code> — [-128 : 127]</p></li><li><p><code>Int16</code> — [-32768 : 32767]</p></li><li><p><code>Int32</code> — [-2147483648 : 2147483647]</p></li><li><p><code>Int64</code> — [-9223372036854775808 : 9223372036854775807]</p></li><li><p><code>Int128</code> — [-170141183460469231731687303715884105728 : 170141183460469231731687303715884105727]</p></li><li><p><code>Int256</code> — [-57896044618658097711785492504343953926634992332820282019728792003956564819968 : 57896044618658097711785492504343953926634992332820282019728792003956564819967]</p></li></ul><p><strong>UInt Ranges</strong></p><ul><li><code>UInt8</code> — [0 : 255]</li><li><code>UInt16</code> — [0 : 65535]</li><li><code>UInt32</code> — [0 : 4294967295]</li><li><code>UInt64</code> — [0 : 18446744073709551615]</li><li><code>UInt256</code> — [0 : 115792089237316195423570985008687907853269984665640564039457584007913129639935]</li></ul><h3 id="Float32-Float64"><a href="#Float32-Float64" class="headerlink" title="Float32, Float64"></a>Float32, Float64</h3><p><strong>Aliases</strong></p><ul><li><p><code>Float32</code> — <code>FLOAT</code>.</p></li><li><p><code>Float64</code> — <code>DOUBLE</code>.</p></li></ul><p>When creating tables, numeric parameters for floating point numbers can be set (e.g. <code>FLOAT(12)</code>, <code>FLOAT(15, 22)</code>, <code>DOUBLE(12)</code>, <code>DOUBLE(4, 18)</code>), but ByteHouse ignores them.</p><h3 id="Decimal-P-S-Decimal32-S-Decimal64-S-Decimal128-S"><a href="#Decimal-P-S-Decimal32-S-Decimal64-S-Decimal128-S" class="headerlink" title="Decimal(P, S), Decimal32(S), Decimal64(S), Decimal128(S)"></a>Decimal(P, S), Decimal32(S), Decimal64(S), Decimal128(S)</h3><p>Signed fixed-point numbers that keep precision during add, subtract and multiply operations. For division least significant digits are discarded (not rounded).</p><p><strong>Aliases</strong></p><ul><li><code>Decimal</code> — <code>DEC</code></li></ul><p><strong>Parameters</strong></p><ul><li><p>P - precision. Valid range: [ 1 : 76 ]. Determines how many decimal digits number can have (including fraction).</p></li><li><p>S - scale. Valid range: [ 0 : P ]. Determines how many decimal digits fraction can have.</p></li></ul><p>Depending on P parameter value Decimal(P, S) is a synonym for:</p><ul><li>P from [ 1 : 9 ] - for Decimal32(S)</li><li>P from [ 10 : 18 ] - for Decimal64(S)</li><li>P from [ 19 : 38 ] - for Decimal128(S)</li></ul><p><strong>Decimal Value Ranges</strong></p><ul><li><p>Decimal32(S) - ( -1 * 10^(9 - S), 1 * 10^(9 - S) )</p></li><li><p>Decimal64(S) - ( -1 * 10^(18 - S), 1 * 10^(18 - S) )</p></li><li><p>Decimal128(S) - ( -1 * 10^(38 - S), 1 * 10^(38 - S) )</p></li></ul><p>For example, Decimal32(4) can contain numbers from -99999.9999 to 99999.9999 with 0.0001 step.</p><h2 id="String-amp-Binary-Data-Types"><a href="#String-amp-Binary-Data-Types" class="headerlink" title="String &amp; Binary Data Types"></a>String &amp; Binary Data Types</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>Strings of an arbitrary length. The length is not limited. The value can contain an arbitrary set of bytes, including null bytes.</p><p>The String type replaces the types VARCHAR, BLOB, CLOB, and others from other DBMSs.</p><p>When creating tables, numeric parameters for string fields can be set (e.g. <code>VARCHAR(255)</code>), but ByteHouse ignores them.</p><p><strong>Encodings</strong></p><p>ByteHouse doesn’t have the concept of encodings. Strings can contain an arbitrary set of bytes, which are stored and output as-is.</p><p>If you need to store texts, we recommend using UTF-8 encoding. At the very least, if your terminal uses UTF-8 (as recommended), you can read and write your values without making conversions.</p><p>Similarly, certain functions for working with strings have separate variations that work under the assumption that the string contains a set of bytes representing a UTF-8 encoded text.</p><p>For example, the ‘length’ function calculates the string length in bytes, while the ‘lengthUTF8’ function calculates the string length in Unicode code points, assuming that the value is UTF-8 encoded.</p><h3 id="Fixedstring-N"><a href="#Fixedstring-N" class="headerlink" title="Fixedstring(N)"></a>Fixedstring(N)</h3><p>A fixed-length string of <code>N</code> bytes (neither characters nor code points).</p><p>To declare a column of <code>FixedString</code> type, use the following syntax:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;column_name&gt; FixedString(N)</span><br></pre></td></tr></table></figure><p>Where <code>N</code> is a natural number.</p><p>The <code>FixedString</code> type is efficient when data has the length of precisely <code>N</code> bytes. In all other cases, it is likely to reduce efficiency.</p><p>Examples of the values that can be efficiently stored in <code>FixedString</code>-typed columns:</p><ul><li><p>The binary representation of IP addresses (<code>FixedString(16)</code> for IPv6).</p></li><li><p>Language codes (ru_RU, en_US … ).</p></li><li><p>Currency codes (USD, RUB … ).</p></li><li><p>Binary representation of hashes (<code>FixedString(16)</code> for MD5, <code>FixedString(32)</code> for SHA256).</p></li></ul><p>To store UUID values, use the UUID data type.</p><p>When inserting the data, ByteHouse:</p><ul><li><p>Complements a string with null bytes if the string contains fewer than <code>N</code> bytes.</p></li><li><p>Throws the <code>Too large value for FixedString(N)</code> exception if the string contains more than <code>N</code> bytes.</p></li></ul><p>When selecting the data, ByteHouse does not remove the null bytes at the end of the string. If you use the <code>WHERE</code> clause, you should add null bytes manually to match the <code>FixedString</code> value. The following example illustrates how to use the <code>WHERE</code> clause with <code>FixedString</code>.</p><p>This behaviour differs from MySQL for the <code>CHAR</code> type (where strings are padded with spaces, and the spaces are removed for output).</p><p>Note that the length of the <code>FixedString(N)</code> value is constant. The <a href="https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#array_functions-length">length</a> function returns <code>N</code> even if the <code>FixedString(N)</code> value is filled only with null bytes, but the <a href="https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#empty">empty</a> function returns <code>1</code> in this case.</p><h3 id="Date-amp-Time-Data-Types"><a href="#Date-amp-Time-Data-Types" class="headerlink" title="Date &amp; Time Data Types"></a>Date &amp; Time Data Types</h3><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><p>A date. Stored in two bytes as the number of days since 1970-01-01 (unsigned). Allows storing values from just after the beginning of the Unix Epoch to the upper threshold defined by a constant at the compilation stage (currently, this is until the year 2149, but the final fully-supported year is 2148).</p><p>The date value is stored without the time zone.</p><h3 id="DateTime"><a href="#DateTime" class="headerlink" title="DateTime"></a>DateTime</h3><p>Aliases:</p><ul><li><code>DateTime</code> — <code>TIMESTAMP</code></li></ul><p>Allows storing an instant in time, which can be expressed as a calendar date and a time of a day.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DateTime([timezone])</span><br></pre></td></tr></table></figure><p>Supported range of values: [1970-01-01 00:00:00, 2105-12-31 23:59:59].</p><p>Resolution: 1 second.</p><h2 id="Semi-structured-Data-Types"><a href="#Semi-structured-Data-Types" class="headerlink" title="Semi-structured Data Types"></a>Semi-structured Data Types</h2><h3 id="Array-T"><a href="#Array-T" class="headerlink" title="Array(T)"></a>Array(T)</h3><p>An array of <code>T</code>-type items. <code>T</code> can be any data type, including an array.</p><p>The maximum size of an array is limited to one million elements.</p><p><strong>Example</strong></p><p>You can use a function to create an array:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array(T)</span><br></pre></td></tr></table></figure><p>You can also use square brackets.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[]</span><br></pre></td></tr></table></figure><h3 id="Map-key-value"><a href="#Map-key-value" class="headerlink" title="Map(key, value)"></a>Map(key, value)</h3><p><code>Map(key, value)</code> data type stores <code>key:value</code> pairs.</p><p><strong>Parameters</strong></p><p>- <code>key</code> — The key part of the pair. <a href="https://clickhouse.tech/docs/en/sql-reference/data-types/string/">String</a> or <a href="https://clickhouse.tech/docs/en/sql-reference/data-types/int-uint/">Integer</a>.</p><p>- <code>value</code> — The value part of the pair. <a href="https://clickhouse.tech/docs/en/sql-reference/data-types/string/">String</a>, <a href="https://clickhouse.tech/docs/en/sql-reference/data-types/int-uint/">Integer</a> or <a href="https://clickhouse.tech/docs/en/sql-reference/data-types/array/">Array</a>.</p><p>To get the value from an <code>a Map(&#39;key&#39;, &#39;value&#39;)</code> column, use <code>a&#123;&#39;key&#39;&#125;</code> syntax. </p><p><strong>Example</strong></p><p>Consider the table:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE table_map (a Map(String, UInt64)) ENGINE=Memory;</span><br><span class="line"></span><br><span class="line">INSERT INTO table_map VALUES (&#123;&#x27;key1&#x27;:1, &#x27;key2&#x27;:10&#125;), (&#123;&#x27;key1&#x27;:2,&#x27;key2&#x27;:20&#125;), (&#123;&#x27;key1&#x27;:3,&#x27;key2&#x27;:30&#125;);</span><br></pre></td></tr></table></figure><p>Select all <code>key2</code> values:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT a&#123;&#x27;key2&#x27;&#125; FROM table_map;</span><br></pre></td></tr></table></figure><p>Result</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">┌─mapElement(a, &#x27;key2&#x27;)─┐</span><br><span class="line"></span><br><span class="line">│                    10  │</span><br><span class="line"></span><br><span class="line">│                    20  │</span><br><span class="line"></span><br><span class="line">│                    30  │</span><br><span class="line"></span><br><span class="line">└────────────── ┘</span><br></pre></td></tr></table></figure><h3 id="Tuple-T1-T2…"><a href="#Tuple-T1-T2…" class="headerlink" title="Tuple(T1,T2…)"></a>Tuple(T1,T2…)</h3><p>A tuple of elements, each having an individual type.</p><p><strong>Example</strong></p><p>You can use a function to create a tuple:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuple(T1, T2, ...)</span><br></pre></td></tr></table></figure><p>Example of creating a tuple:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT tuple(1,&#x27;a&#x27;) AS x, toTypeName(x)</span><br></pre></td></tr></table></figure><h3 id="Enum8-Enum-16"><a href="#Enum8-Enum-16" class="headerlink" title="Enum8, Enum 16"></a>Enum8, Enum 16</h3><p>Enumerated type consisting of named values.</p><p>Named values must be declared as <code>&#39;string&#39; = integer</code> pairs. ByteHouse stores only numbers, but supports operations with the values through their names.</p><p>ByteHouse supports:</p><ul><li><p><code>Enum8</code>: 8-bit Enum. It can contain up to 256 values enumerated in the <code>[-128, 127]</code> range.</p></li><li><p><code>Enum16</code>: 16-bit Enum. It can contain up to 65536 values enumerated in the <code>[-32768, 32767]</code> range.</p></li></ul><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t_enum(x Enum8(&#x27;hello&#x27; = 1, &#x27;world&#x27; = 2)) ENGINE = Memory;</span><br><span class="line"></span><br><span class="line">INSERT INTO t_enum VALUES (&#x27;hello&#x27;), (&#x27;world&#x27;), (&#x27;hello&#x27;);</span><br></pre></td></tr></table></figure><p>Column <code>x</code> can only store values that are listed in the type definition: <code>&#39;hello&#39;</code> or <code>&#39;world&#39;</code>. If you try to save any other value, ByteHouse will raise an exception. </p><p>When you query data from the table, ByteHouse outputs the string values from <code>Enum</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM t_enum</span><br></pre></td></tr></table></figure><h3 id="Nested-n1-T1-n2-T2-…"><a href="#Nested-n1-T1-n2-T2-…" class="headerlink" title="Nested(n1 T1, n2 T2, …)"></a>Nested(n1 T1, n2 T2, …)</h3><p>A nested data structure is like a table inside a cell. The parameters of a nested data structure – the column names and types – are specified the same way as in a CREATE TABLE query. Each table row can correspond to any number of rows in a nested data structure.</p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE visits(Goals Nested(ID UInt32, Price Int64)) ENGINE = Memory;</span><br><span class="line"></span><br><span class="line">INSERT INTO visits values ([1],[1]);</span><br></pre></td></tr></table></figure><p>This example declares the <code>Goals</code> nested data structure, which contains data about conversions (goals reached). Each row in the ‘visits’ table can correspond to zero or any number of conversions.</p><p>Only a single nesting level is supported. </p><p>In most cases, when working with a nested data structure, its columns are specified with column names separated by a dot. These columns make up an array of matching types. All the column arrays of a single nested data structure have the same length.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT Goals.ID, Goals.Price FROM visits WHERE length(Goals.ID) &lt; 5 LIMIT 10;</span><br></pre></td></tr></table></figure><h2 id="Other-Special-Data-Types"><a href="#Other-Special-Data-Types" class="headerlink" title="Other Special Data Types"></a>Other Special Data Types</h2><h3 id="IPv4"><a href="#IPv4" class="headerlink" title="IPv4"></a>IPv4</h3><p><code>IPv4</code> is a domain based on <code>UInt32</code> type and serves as a typed replacement for storing IPv4 values. It provides compact storage with the human-friendly input-output format and column type information on inspection.</p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE hits (url String, from IPv4) ENGINE = Memory;</span><br><span class="line"></span><br><span class="line">DESCRIBE TABLE hits;</span><br></pre></td></tr></table></figure><p><code>IPv4</code> domain supports custom input format as IPv4-strings:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO hits (url, from) VALUES (&#x27;https://wikipedia.org&#x27;, &#x27;116.253.40.133&#x27;)(&#x27;https://bytehouse.cloud&#x27;, &#x27;108.156.83.2&#x27;)(&#x27;https://docs.bytehouse.cloud&#x27;, &#x27;104.18.211.56&#x27;);</span><br><span class="line"></span><br><span class="line">SELECT * FROM hits;</span><br></pre></td></tr></table></figure><h3 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h3><p><code>IPv6</code> is a domain based on <code>FixedString(16)</code> type and serves as a typed replacement for storing IPv6 values. It provides compact storage with the human-friendly input-output format and column type information on inspection.</p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE hits (url String, from IPv6) ENGINE = Memory;</span><br><span class="line"></span><br><span class="line">DESCRIBE TABLE hits;</span><br></pre></td></tr></table></figure><p><code>IPv6</code> domain supports custom input as IPv6-strings:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO hits (url, from) VALUES (&#x27;https://wikipedia.org&#x27;, &#x27;2a02:aa08:e000:3100::2&#x27;)(&#x27;https://bytehouse.cloud&#x27;, &#x27;2001:44c8:129:2632:33:0:252:2&#x27;)(&#x27;https://docs.bytehouse.cloud&#x27;, &#x27;2a02:e980:1e::1&#x27;);</span><br><span class="line"></span><br><span class="line">SELECT * FROM hits;</span><br></pre></td></tr></table></figure><h3 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h3><p>A universally unique identifier (UUID) is a 16-byte number used to identify records.</p><p>The example of UUID type value is represented below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">61f0c404-5cb3-11e7-907b-a6006ad3dba0</span><br></pre></td></tr></table></figure><p>If you do not specify the UUID column value when inserting a new record, the UUID value is filled with zero:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00000000-0000-0000-0000-000000000000</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><p>This example demonstrates creating a table with the UUID type column and inserting a value into the table.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t_uuid (x UUID, y String) ENGINE=Memory;</span><br><span class="line"></span><br><span class="line">INSERT INTO t_uuid SELECT generateUUIDv4(), &#x27;Example 1&#x27;;</span><br><span class="line"></span><br><span class="line">SELECT * FROM t_uuid</span><br></pre></td></tr></table></figure><h3 id="Nullable-T"><a href="#Nullable-T" class="headerlink" title="Nullable(T)"></a>Nullable(T)</h3><p>Allows storing special marker (NULL) that denotes “missing value” alongside normal values allowed by <code>TypeName</code>. For example, a <code>Nullable(Int8)</code> type column can store <code>Int8</code> type values, and the rows that don’t have a value will store <code>NULL</code>.</p><p>For a <code>TypeName</code>, you can’t use composite data types <a href="https://clickhouse.tech/docs/en/sql-reference/data-types/array/">Array</a> and <a href="https://clickhouse.tech/docs/en/sql-reference/data-types/tuple/">Tuple</a>. Composite data types can contain <code>Nullable</code> type values, such as <code>Array(Nullable(Int8))</code>.</p><p>A <code>Nullable</code> type field can’t be included in table indexes.</p><p><code>NULL</code> is the default value for any <code>Nullable</code> type, unless specified otherwise in the ByteHouse server configuration.</p><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t_null(x Int8, y Nullable(Int8)) ENGINE = Memory;</span><br><span class="line"></span><br><span class="line">INSERT INTO t_null VALUES (1, NULL), (2, 3);</span><br><span class="line"></span><br><span class="line">SELECT x + y FROM t_null;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> SQL_Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Functions</title>
      <link href="/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/"/>
      <url>/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/</url>
      
        <content type="html"><![CDATA[<p>ByteHouse provides two SQL dialects, (1) <strong>ClickHouse</strong> and (2) <strong>ANSI</strong>. </p><p>For the ClickHouse SQL, the SQL functions are mostly similar to what is provided in the community ClickHouse version, but it also includes additional functions that are only supported in ByteHouse. The following sections will use the content from <a href="https://clickhouse.tech/docs/en/sql-reference/functions/">ClickHouse.tech documentation site</a> as the reference to describe how to use them in ByteHouse.</p><p>For the ANSI mode, ByteHouse provides a rich set of SQL syntax through ANSI SQL mode by using Apache Calcite. For the details please refer to the BNF-grammar here for more details: <a href="https://calcite.apache.org/docs/reference.html">https://calcite.apache.org/docs/reference.html</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> SQL_Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aggregation</title>
      <link href="/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/aggregate/"/>
      <url>/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/aggregate/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Notice:<br>Some of the examples below are referenced from <a href="https://clickhouse.com/docs/en/sql-reference/functions/">ClickHouse Documentation</a> but have been adapted and modified to work in ByteHouse.</p></blockquote><h2 id="any"><a href="#any" class="headerlink" title="any"></a>any</h2><p>Selects the first encountered value.<br>The query can be executed in any order and even in a different order each time, so the result of this function is indeterminate.<br>To get a determinate result, you can use the ‘min’ or ‘max’ function instead of ‘any’.</p><p>In some cases, you can rely on the order of execution. This applies to cases when SELECT comes from a subquery that uses ORDER BY.</p><p>When a <code>SELECT</code> query has the <code>GROUP BY</code> clause or at least one aggregate function, ByteHouse (in contrast to MySQL) requires that all expressions in the <code>SELECT</code> , <code>HAVING</code> , and <code>ORDER BY</code> clauses be calculated from keys or from aggregate functions. In other words, each column selected from the table must be used either in keys or inside aggregate functions. To get behavior like in MySQL, you can put the other columns in the <code>any</code> aggregate function.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">any</span>(<span class="keyword">column</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>column</code> – The column name.</li></ul><p><strong>Returned value</strong></p><ul><li>first value encontered. Type is same as input column.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">any</span>(number) <span class="keyword">FROM</span> numbers(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─any(number)─┐</span><br><span class="line">│ 0           │</span><br><span class="line">└─────────────┘</span><br></pre></td></tr></table></figure><h2 id="anyHeavy"><a href="#anyHeavy" class="headerlink" title="anyHeavy"></a>anyHeavy</h2><p>Selects a frequently occurring value using the <a href="http://www.cs.umd.edu/~samir/498/karp.pdf">heavy hitters</a> algorithm. If there is a value that occurs more than in half the cases in each of the query’s execution threads, this value is returned. Normally, the result is nondeterministic.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anyHeavy(<span class="keyword">column</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>column</code> – The column name.</li></ul><p><strong>Returned value</strong></p><ul><li>most frequent value. Type is same as input column.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.functionAnyHeavy(id <span class="type">Int</span>) ENGINE<span class="operator">=</span>CnchMergeTree() <span class="keyword">ORDER</span> <span class="keyword">BY</span> id;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.functionAnyHeavy <span class="keyword">values</span> (<span class="number">1</span>),(<span class="number">1</span>),(<span class="number">1</span>),(<span class="number">2</span>),(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">SELECT</span> anyHeavy(id) <span class="keyword">FROM</span> test.functionAnyHeavy;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─anyHeavy(id)─┐</span><br><span class="line">│ 1            │</span><br><span class="line">└──────────────┘</span><br></pre></td></tr></table></figure><h2 id="anyLast"><a href="#anyLast" class="headerlink" title="anyLast"></a>anyLast</h2><p>Selects the last value encountered.<br>The result is just as indeterminate.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anyLast(<span class="keyword">column</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>column</code> – The column name.</li></ul><p><strong>Returned value</strong></p><ul><li>last value encountered. Type is same as input column.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> anyLast(number) <span class="keyword">FROM</span> numbers(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─anyLast(number)─┐</span><br><span class="line">│ 9               │</span><br><span class="line">└─────────────────┘</span><br></pre></td></tr></table></figure><h2 id="argMax"><a href="#argMax" class="headerlink" title="argMax"></a>argMax</h2><p>Calculates the <code>arg</code> value for a maximum <code>val</code> value. If there are several different values of <code>arg</code> for maximum values of <code>val</code> , returns the first of these values encountered.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">argMax(arg, val)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>arg</code> — Argument. </li><li><code>val</code> — Value.</li></ul><p><strong>Returned value</strong></p><ul><li>arg value that corresponds to maximum val value. Type is same as arg type.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.functionArgMax (<span class="keyword">user</span> String, salary <span class="type">Int</span>) Engine<span class="operator">=</span>CnchMergeTree() <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.functionArgMax <span class="keyword">VALUES</span> (<span class="string">&#x27;director&#x27;</span>,<span class="number">5000</span>),(<span class="string">&#x27;manager&#x27;</span>,<span class="number">3000</span>),(<span class="string">&#x27;worker&#x27;</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">SELECT</span> argMax(<span class="keyword">user</span>, salary) <span class="keyword">FROM</span> test.functionArgMax;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─argMax(user, salary)─┐</span><br><span class="line">│ director             │</span><br><span class="line">└──────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="argMin"><a href="#argMin" class="headerlink" title="argMin"></a>argMin</h2><p>Calculates the <code>arg</code> value for a minimum <code>val</code> value. If there are several different values of <code>arg</code> for minimum values of <code>val</code> , returns the first of these values encountered.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">argMin(arg, val)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>arg</code> — Argument. </li><li><code>val</code> — Value.</li></ul><p><strong>Returned value</strong></p><ul><li>arg value that corresponds to minimum val value. Type is same as arg type.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.functionArgMin (<span class="keyword">user</span> String, salary <span class="type">Int</span>) Engine<span class="operator">=</span>CnchMergeTree() <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.functionArgMin <span class="keyword">VALUES</span> (<span class="string">&#x27;director&#x27;</span>,<span class="number">5000</span>),(<span class="string">&#x27;manager&#x27;</span>,<span class="number">3000</span>),(<span class="string">&#x27;worker&#x27;</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">SELECT</span> argMin(<span class="keyword">user</span>, salary) <span class="keyword">FROM</span> test.functionArgMin;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─argMin(user, salary)─┐</span><br><span class="line">│ worker               │</span><br><span class="line">└──────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="avg"><a href="#avg" class="headerlink" title="avg"></a>avg</h2><p>Calculates the arithmetic mean.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">avg</span>(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> — input values, must be Integer, Float or Decimal.</li></ul><p><strong>Returned value</strong></p><ul><li>The arithmetic mean, always as Float64. </li><li><code>NaN</code> if the input parameter <code>x</code> is empty.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.functionAvg (x Int8) ENGINE<span class="operator">=</span>CnchMergeTree() <span class="keyword">ORDER</span> <span class="keyword">BY</span> x;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.functionAvg <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> numbers(<span class="number">6</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">avg</span>(x) <span class="keyword">FROM</span> test.functionAvg;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─avg(x)──┐</span><br><span class="line">│ 2.5e+00 │</span><br><span class="line">└─────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.functionAvg (x Int8) ENGINE<span class="operator">=</span>CnchMergeTree() <span class="keyword">ORDER</span> <span class="keyword">BY</span> x;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">avg</span>(x) <span class="keyword">FROM</span> test.functionAvg;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─avg(x)─┐</span><br><span class="line">│ NaN    │</span><br><span class="line">└────────┘</span><br></pre></td></tr></table></figure><h2 id="corr"><a href="#corr" class="headerlink" title="corr"></a>corr</h2><p>Calculates the Pearson correlation coefficient: <code>Σ((x - x̅)(y - y̅)) / sqrt(Σ((x - x̅)^2) * Σ((y - y̅)^2))</code>.<br>This function uses a numerically unstable algorithm. If you need <a href="https://en.wikipedia.org/wiki/Numerical_stability">numerical stability</a> in calculations, use the <code>corrStable</code> function. It works slower but provides a lower computational error.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">corr</span>(x, y)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> — input values, must be Integer, Float. </li><li><code>y</code> — input values, must be Integer, Float.</li></ul><p><strong>Returned value</strong></p><ul><li>Pearson correlation coefficient, always as Float64.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.functionCorr (x Int8, y Int8) ENGINE<span class="operator">=</span>CnchMergeTree() <span class="keyword">ORDER</span> <span class="keyword">BY</span> x;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.functionCorr <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">5</span>),(<span class="number">2</span>,<span class="number">4</span>),(<span class="number">3</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="number">2</span>),(<span class="number">5</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">corr</span>(x,y) <span class="keyword">FROM</span> test.functionCorr;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─corr(x, y)─┐</span><br><span class="line">│ -1e+00     │</span><br><span class="line">└────────────┘</span><br></pre></td></tr></table></figure><h2 id="covarPop"><a href="#covarPop" class="headerlink" title="covarPop"></a>covarPop</h2><p>Calculates the value of <code>Σ((x - x̅)(y - y̅)) / n</code>.<br>This function uses a numerically unstable algorithm. If you need <a href="https://en.wikipedia.org/wiki/Numerical_stability">numerical stability</a> in calculations, use the <code>covarPopStable</code> function. It works slower but provides a lower computational error.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">covarPop(x, y)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> — input values, must be Integer, Float. </li><li><code>y</code> — input values, must be Integer, Float.</li></ul><p><strong>Returned value</strong></p><ul><li><code>Σ((x - x̅)(y - y̅)) / n</code>, always as Float64.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.functionCovarPop (x Int8, y Int8) ENGINE<span class="operator">=</span>CnchMergeTree() <span class="keyword">ORDER</span> <span class="keyword">BY</span> x;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.functionCovarPop <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">5</span>),(<span class="number">2</span>,<span class="number">4</span>),(<span class="number">3</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="number">2</span>),(<span class="number">5</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">SELECT</span> covarPop(x,y) <span class="keyword">FROM</span> test.functionCovarPop;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─covarPop(x, y)─┐</span><br><span class="line">│ -2e+00         │</span><br><span class="line">└────────────────┘</span><br></pre></td></tr></table></figure><h2 id="covarSamp"><a href="#covarSamp" class="headerlink" title="covarSamp"></a>covarSamp</h2><p>Calculates the value of <code>Σ((x - x̅)(y - y̅)) / (n - 1)</code>.<br>This function uses a numerically unstable algorithm. If you need <a href="https://en.wikipedia.org/wiki/Numerical_stability">numerical stability</a> in calculations, use the <code>covarSampStable</code> function. It works slower but provides a lower computational error.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">covarSamp(x, y)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> — input values, must be Integer, Float. </li><li><code>y</code> — input values, must be Integer, Float.</li></ul><p><strong>Returned value</strong></p><ul><li><code>Σ((x - x̅)(y - y̅)) / (n - 1)</code>, always as Float64.</li><li>When n &lt;&#x3D; 1, returns NaN.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.functionCovarSamp (x Int8, y Int8) ENGINE<span class="operator">=</span>CnchMergeTree() <span class="keyword">ORDER</span> <span class="keyword">BY</span> x;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.functionCovarSamp <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">5</span>),(<span class="number">2</span>,<span class="number">4</span>),(<span class="number">3</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="number">2</span>),(<span class="number">5</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">SELECT</span> covarSamp(x,y) <span class="keyword">FROM</span> test.functionCovarSamp;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─covarSamp(x, y)─┐</span><br><span class="line">│ -2.5e+00        │</span><br><span class="line">└─────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.functionCovarSamp (x Int8, y Int8) ENGINE<span class="operator">=</span>CnchMergeTree() <span class="keyword">ORDER</span> <span class="keyword">BY</span> x;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.functionCovarSamp <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">SELECT</span> covarSamp(x,y) <span class="keyword">FROM</span> test.functionCovarSamp;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─covarSamp(x, y)─┐</span><br><span class="line">│ NaN             │</span><br><span class="line">└─────────────────┘</span><br></pre></td></tr></table></figure><h2 id="groupArray"><a href="#groupArray" class="headerlink" title="groupArray"></a>groupArray</h2><p>Creates an array of argument values.<br>Values can be added to the array in any (indeterminate) order.</p><p>The second version (with the <code>max_size</code> parameter) limits the size of the resulting array to <code>max_size</code> elements. For example, <code>groupArray(1)(x)</code> is equivalent to <code>[any (x)]</code> .</p><p>In some cases, you can still rely on the order of execution. This applies to cases when <code>SELECT</code> comes from a subquery that uses <code>ORDER BY</code> .</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupArray(x)</span><br><span class="line">groupArray(max_size)(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> — input values.</li></ul><p><strong>Returned value</strong></p><ul><li>array of values. Type is Array.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> groupArray(number) <span class="keyword">from</span> numbers(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─groupArray(number)─────────────┐</span><br><span class="line">│ [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] │</span><br><span class="line">└────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> groupArray(<span class="number">5</span>)(number) <span class="keyword">from</span> numbers(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─groupArray(5)(number)─┐</span><br><span class="line">│ [0, 1, 2, 3, 4]       │</span><br><span class="line">└───────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="groupBitAnd"><a href="#groupBitAnd" class="headerlink" title="groupBitAnd"></a>groupBitAnd</h2><p>Applies bitwise <code>AND</code> for series of numbers.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupBitAnd(expr)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>expr</code> – An expression that results in <code>UInt*</code> type.</li></ul><p><strong>Return value</strong></p><ul><li>Value of the <code>UInt*</code> type.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.groupBitAnd (num UInt8) ENGINE<span class="operator">=</span>CnchMergeTree() <span class="keyword">ORDER</span> <span class="keyword">BY</span> num;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.groupBitAnd <span class="keyword">VALUES</span> (<span class="number">44</span>),(<span class="number">28</span>),(<span class="number">13</span>),(<span class="number">85</span>);</span><br><span class="line"><span class="keyword">SELECT</span> groupBitAnd(num) <span class="keyword">FROM</span> test.groupBitAnd;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─groupBitAnd(num)─┐</span><br><span class="line">│ 4                │</span><br><span class="line">└──────────────────┘</span><br></pre></td></tr></table></figure><p>Bit representation of 44,28,13 and 85 are 00101100,00011100,00001101 and 01010101. The bit and of the four numbers is 00000100 which is equal to 4.</p><h2 id="groupBitOr"><a href="#groupBitOr" class="headerlink" title="groupBitOr"></a>groupBitOr</h2><p>Applies bitwise <code>OR</code> for series of numbers.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupBitOr(expr)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>expr</code> – An expression that results in <code>UInt*</code> type.</li></ul><p><strong>Returned value</strong></p><ul><li>Value of the <code>UInt*</code> type.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.functionGroupBitOr (num UInt8) ENGINE<span class="operator">=</span>CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> num;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.functionGroupBitOr <span class="keyword">VALUES</span> (<span class="number">44</span>),(<span class="number">28</span>),(<span class="number">13</span>),(<span class="number">85</span>);</span><br><span class="line"><span class="keyword">SELECT</span> groupBitOr(num) <span class="keyword">FROM</span> test.functionGroupBitOr;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─groupBitOr(num)─┐</span><br><span class="line">│ 125             │</span><br><span class="line">└─────────────────┘</span><br></pre></td></tr></table></figure><p>Bit representation of 44,28,13 and 85 are 00101100,00011100,00001101 and 01010101. The bit or of the four numbers is 01111101 which is equal to 125.</p><h2 id="groupBitXor"><a href="#groupBitXor" class="headerlink" title="groupBitXor"></a>groupBitXor</h2><p>Applies bitwise <code>XOR</code> for series of numbers.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupBitXor(expr)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>expr</code> – An expression that results in <code>UInt*</code> type.</li></ul><p><strong>Return value</strong></p><ul><li>Value of the <code>UInt*</code> type.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.functionGroupBitXor (num UInt8) ENGINE<span class="operator">=</span>CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> num;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.functionGroupBitXor <span class="keyword">VALUES</span> (<span class="number">44</span>),(<span class="number">28</span>),(<span class="number">13</span>),(<span class="number">85</span>);</span><br><span class="line"><span class="keyword">SELECT</span> groupBitXor(num) <span class="keyword">FROM</span> test.functionGroupBitXor;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─groupBitXor(num)─┐</span><br><span class="line">│ 104              │</span><br><span class="line">└──────────────────┘</span><br></pre></td></tr></table></figure><p>Bit representation of 44,28,13 and 85 are 00101100,00011100,00001101 and 01010101. The bit xor of the four numbers is 01101000 which is equal to 104.</p><h2 id="groupBitmap"><a href="#groupBitmap" class="headerlink" title="groupBitmap"></a>groupBitmap</h2><p>Bitmap or Aggregate calculations from a unsigned integer column, return cardinality of type UInt64, if add suffix -State, then return bitmap object.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupBitmap(expr)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>expr</code> – An expression that results in <code>UInt*</code> type.</li></ul><p><strong>Return value</strong></p><ul><li>Value of the <code>UInt64</code> type.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> groupBitmapState(number) <span class="keyword">FROM</span> numbers(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─groupBitmap(number)─┐</span><br><span class="line">│ 4                   │</span><br><span class="line">└─────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="groupBitmapAnd"><a href="#groupBitmapAnd" class="headerlink" title="groupBitmapAnd"></a>groupBitmapAnd</h2><p>Calculations the AND of a bitmap column, return cardinality of type UInt64, if add suffix -State, then return bitmap object.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupBitmapAnd(expr)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>expr</code> – An expression that results in <code>AggregateFunction(groupBitmap, UInt*)</code> type.</li></ul><p><strong>Return value</strong></p><ul><li>Value of the <code>UInt64</code> type.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> bitmap_column_expr_test2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> bitmap_column_expr_test2(tag_id String,z AggregateFunction(groupBitmap, UInt32)) ENGINE <span class="operator">=</span> CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> tag_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> bitmap_column_expr_test2 <span class="keyword">VALUES</span> (<span class="string">&#x27;tag1&#x27;</span>, bitmapBuild(<span class="built_in">cast</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>] <span class="keyword">as</span> <span class="keyword">Array</span>(UInt32))));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> bitmap_column_expr_test2 <span class="keyword">VALUES</span> (<span class="string">&#x27;tag2&#x27;</span>, bitmapBuild(<span class="built_in">cast</span>([<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>] <span class="keyword">as</span> <span class="keyword">Array</span>(UInt32))));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> bitmap_column_expr_test2 <span class="keyword">VALUES</span> (<span class="string">&#x27;tag3&#x27;</span>, bitmapBuild(<span class="built_in">cast</span>([<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span>] <span class="keyword">as</span> <span class="keyword">Array</span>(UInt32))));</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> groupBitmapAnd(z) <span class="keyword">FROM</span> bitmap_column_expr_test2 <span class="keyword">WHERE</span> <span class="keyword">like</span>(tag_id, <span class="string">&#x27;tag%&#x27;</span>);</span><br><span class="line">┌─groupBitmapAnd(z)─┐</span><br><span class="line">│               <span class="number">3</span>   │</span><br><span class="line">└───────────────────┘</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> arraySort(bitmapToArray(groupBitmapAndState(z))) <span class="keyword">FROM</span> bitmap_column_expr_test2 <span class="keyword">WHERE</span> <span class="keyword">like</span>(tag_id, <span class="string">&#x27;tag%&#x27;</span>);</span><br><span class="line">┌─arraySort(bitmapToArray(groupBitmapAndState(z)))─┐</span><br><span class="line">│ [<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>]                                         │</span><br><span class="line">└──────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="groupBitmapOr"><a href="#groupBitmapOr" class="headerlink" title="groupBitmapOr"></a>groupBitmapOr</h2><p>Calculations the OR of a bitmap column, return cardinality of type UInt64, if add suffix -State, then return bitmap object. This is equivalent to <code>groupBitmapMerge</code> .</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupBitmapOr(expr)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>expr</code> – An expression that results in <code>AggregateFunction(groupBitmap, UInt*)</code> type.</li></ul><p><strong>Returned value</strong></p><ul><li>Value of the <code>UInt64</code> type.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> bitmap_column_expr_test2;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> bitmap_column_expr_test2(tag_id String,z AggregateFunction(groupBitmap, UInt32)) ENGINE <span class="operator">=</span> CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> tag_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> bitmap_column_expr_test2 <span class="keyword">VALUES</span> (<span class="string">&#x27;tag1&#x27;</span>, bitmapBuild(<span class="built_in">cast</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>] <span class="keyword">as</span> <span class="keyword">Array</span>(UInt32))));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> bitmap_column_expr_test2 <span class="keyword">VALUES</span> (<span class="string">&#x27;tag2&#x27;</span>, bitmapBuild(<span class="built_in">cast</span>([<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>] <span class="keyword">as</span> <span class="keyword">Array</span>(UInt32))));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> bitmap_column_expr_test2 <span class="keyword">VALUES</span> (<span class="string">&#x27;tag3&#x27;</span>, bitmapBuild(<span class="built_in">cast</span>([<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span>] <span class="keyword">as</span> <span class="keyword">Array</span>(UInt32))));</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> groupBitmapOr(z) <span class="keyword">FROM</span> bitmap_column_expr_test2 <span class="keyword">WHERE</span> <span class="keyword">like</span>(tag_id, <span class="string">&#x27;tag%&#x27;</span>);</span><br><span class="line"></span><br><span class="line">┌─groupBitmapOr(z)─┐</span><br><span class="line">│             <span class="number">15</span>   │</span><br><span class="line">└──────────────────┘</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> arraySort(bitmapToArray(groupBitmapOrState(z))) <span class="keyword">FROM</span> bitmap_column_expr_test2 <span class="keyword">WHERE</span> <span class="keyword">like</span>(tag_id, <span class="string">&#x27;tag%&#x27;</span>);</span><br><span class="line">┌─arraySort(bitmapToArray(groupBitmapOrState(z)))─┐</span><br><span class="line">│ [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>]           │</span><br><span class="line">└─────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="groupBitmapXor"><a href="#groupBitmapXor" class="headerlink" title="groupBitmapXor"></a>groupBitmapXor</h2><p>Calculations the XOR of a bitmap column, return cardinality of type UInt64, if add suffix -State, then return bitmap object.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupBitmapOr(expr)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>expr</code> – An expression that results in <code>AggregateFunction(groupBitmap, UInt*)</code> type.</li></ul><p><strong>Returned value</strong></p><ul><li>Value of the <code>UInt64</code> type.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> bitmap_column_expr_test2;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> bitmap_column_expr_test2(tag_id String, z AggregateFunction(groupBitmap, UInt32)) ENGINE <span class="operator">=</span> CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> tag_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> bitmap_column_expr_test2 <span class="keyword">VALUES</span> (<span class="string">&#x27;tag1&#x27;</span>, bitmapBuild(<span class="built_in">cast</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>] <span class="keyword">as</span> <span class="keyword">Array</span>(UInt32))));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> bitmap_column_expr_test2 <span class="keyword">VALUES</span> (<span class="string">&#x27;tag2&#x27;</span>, bitmapBuild(<span class="built_in">cast</span>([<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>] <span class="keyword">as</span> <span class="keyword">Array</span>(UInt32))));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> bitmap_column_expr_test2 <span class="keyword">VALUES</span> (<span class="string">&#x27;tag3&#x27;</span>, bitmapBuild(<span class="built_in">cast</span>([<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span>] <span class="keyword">as</span> <span class="keyword">Array</span>(UInt32))));</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> groupBitmapXor(z) <span class="keyword">FROM</span> bitmap_column_expr_test2 <span class="keyword">WHERE</span> <span class="keyword">like</span>(tag_id, <span class="string">&#x27;tag%&#x27;</span>);</span><br><span class="line">┌─groupBitmapXor(z)─┐</span><br><span class="line">│              <span class="number">10</span>   │</span><br><span class="line">└───────────────────┘</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> arraySort(bitmapToArray(groupBitmapXorState(z))) <span class="keyword">FROM</span> bitmap_column_expr_test2 <span class="keyword">WHERE</span> <span class="keyword">like</span>(tag_id, <span class="string">&#x27;tag%&#x27;</span>);</span><br><span class="line"></span><br><span class="line">┌─arraySort(bitmapToArray(groupBitmapXorState(z)))─┐</span><br><span class="line">│ [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>]                       │</span><br><span class="line">└──────────────────────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="groupUniqArray"><a href="#groupUniqArray" class="headerlink" title="groupUniqArray"></a>groupUniqArray</h2><p>Creates an array from different argument values. Memory consumption is the same as for the uniqExact function.</p><p>The second version (with the <code>max_size</code> parameter) limits the size of the resulting array to <code>max_size</code> elements.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupUniqArray(x)</span><br><span class="line">groupUniqArray(max_size)(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> — input values.</li></ul><p><strong>Returned value</strong></p><ul><li>array of values. Type is Array.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> groupUniqArray(number) <span class="keyword">from</span> numbers(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─groupUniqArray(number)─────────┐</span><br><span class="line">│ [0, 8, 3, 9, 7, 2, 1, 6, 4, 5] │</span><br><span class="line">└────────────────────────────────┘</span><br></pre></td></tr></table></figure><!-- TODO: Below Function Does Not Work In CNCH, Check with ChenXing --><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> groupUniqArray(<span class="number">5</span>)(number) <span class="keyword">from</span> numbers(<span class="number">10</span>); </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─groupArray(5)(number)─┐</span><br><span class="line">│ [0, 1, 2, 3, 4]       │</span><br><span class="line">└───────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="histogram"><a href="#histogram" class="headerlink" title="histogram"></a>histogram</h2><p>Calculates an adaptive histogram. It does not guarantee precise results.</p><p>The functions uses <a href="http://jmlr.org/papers/volume11/ben-haim10a/ben-haim10a.pdf">A Streaming Parallel Decision Tree Algorithm</a> . The borders of histogram bins are adjusted as new data enters a function. In common case, the widths of bins are not equal.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">histogram(number_of_bins)(<span class="keyword">values</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>number_of_bins</code> — Upper limit for the number of bins in the histogram. The function automatically calculates the number of bins. It tries to reach the specified number of bins, but if it fails, it uses fewer bins.</li><li><code>values</code> — Expression resulting in input values.</li></ul><p><strong>Returned values</strong></p><ul><li>Array of Tuples of the following format:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[(lower_1, upper_1, height_1), ... (lower_N, upper_N, height_N)]</span><br><span class="line"></span><br><span class="line">- `lower` — Lower bound of the bin.</span><br><span class="line">- `upper` — Upper bound of the bin.</span><br><span class="line">- `height` — Calculated height of the bin.</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> histogram(<span class="number">5</span>)(number <span class="operator">+</span> <span class="number">1</span>) <span class="keyword">FROM</span> numbers(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─histogram(5)(plus(number, 1))───────────────────────────────────────────┐</span><br><span class="line">│ [(1,4.5,4),(4.5,8.5,4),(8.5,12.75,4.125),(12.75,17,4.625),(17,20,3.25)] │</span><br><span class="line">└─────────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>You can visualize a histogram with the bar function, for example:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">WITH</span> histogram(<span class="number">5</span>)(rand() <span class="operator">%</span> <span class="number">100</span>) <span class="keyword">AS</span> hist</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    arrayJoin(hist)<span class="number">.3</span> <span class="keyword">AS</span> height,</span><br><span class="line">    bar(height, <span class="number">0</span>, <span class="number">6</span>, <span class="number">5</span>) <span class="keyword">AS</span> bar</span><br><span class="line"><span class="keyword">FROM</span> numbers(<span class="number">20</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌─height─┬─bar───┐</span><br><span class="line"></span><br><span class="line">│  2.125 │ █▋    │</span><br><span class="line"></span><br><span class="line">│   3.25 │ ██▌   │</span><br><span class="line"></span><br><span class="line">│  5.625 │ ████▏ │</span><br><span class="line"></span><br><span class="line">│  5.625 │ ████▏ │</span><br><span class="line"></span><br><span class="line">│  3.375 │ ██▌   │</span><br><span class="line"></span><br><span class="line">└────────┴───────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>In this case, you should remember that you do not know the histogram bin borders.</p><h2 id="max"><a href="#max" class="headerlink" title="max"></a>max</h2><p>Aggregate function that calculates the maximum across a group of values.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">max</span>(<span class="keyword">values</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>values</code> — input values.</li></ul><p><strong>Returned values</strong></p><ul><li>maximum value. Type is same as values</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">max</span>(number) <span class="keyword">FROM</span> numbers(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─max(number)─┐</span><br><span class="line">│ 19          │</span><br><span class="line">└─────────────┘</span><br></pre></td></tr></table></figure><p>If you need non-aggregate function to choose a maximum of two values, see <code>greatest</code> :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> greatest(a, b) <span class="keyword">FROM</span> <span class="keyword">table</span>;</span><br></pre></td></tr></table></figure><h2 id="median"><a href="#median" class="headerlink" title="median"></a>median</h2><p>The <code>median*</code> functions are the aliases for the corresponding <code>quantile*</code> functions. They calculate median of a numeric data sample.</p><p>Functions:</p><ul><li><code>median</code> — Alias for quantile. </li><li><code>medianDeterministic</code> — Alias for quantileDeterministic. </li><li><code>medianExact</code> — Alias for quantileExact. </li><li><code>medianExactWeighted</code> — Alias for quantileExactWeighted. </li><li><code>medianTiming</code> — Alias for quantileTiming.</li><li><code>medianTimingWeighted</code> — Alias for quantileTimingWeighted. </li><li><code>medianTDigest</code> — Alias for quantileTDigest. </li><li><code>medianTDigestWeighted</code> — Alias for quantileTDigestWeighted. </li><li><code>medianBFloat16</code> — Alias for quantileBFloat16.</li></ul><h2 id="medianDeterministic"><a href="#medianDeterministic" class="headerlink" title="medianDeterministic"></a>medianDeterministic</h2><p>Alias for quantileDeterministic.</p><h2 id="medianExact"><a href="#medianExact" class="headerlink" title="medianExact"></a>medianExact</h2><p>Alias for quantileExact.</p><h2 id="medianExactWeighted"><a href="#medianExactWeighted" class="headerlink" title="medianExactWeighted"></a>medianExactWeighted</h2><p>Alias for quantileExactWeighted.</p><h2 id="medianTDigest"><a href="#medianTDigest" class="headerlink" title="medianTDigest"></a>medianTDigest</h2><p>Alias for quantileTDigest.</p><h2 id="medianTDigestWeighted"><a href="#medianTDigestWeighted" class="headerlink" title="medianTDigestWeighted"></a>medianTDigestWeighted</h2><p>Alias for quantileTDigestWeighted.</p><h2 id="medianTiming"><a href="#medianTiming" class="headerlink" title="medianTiming"></a>medianTiming</h2><p>Alias for quantileTiming.</p><h2 id="medianTimingWeighted"><a href="#medianTimingWeighted" class="headerlink" title="medianTimingWeighted"></a>medianTimingWeighted</h2><p>Alias for quantileTimingWeighted.</p><h2 id="quantile"><a href="#quantile" class="headerlink" title="quantile"></a>quantile</h2><p>Computes an approximate <a href="https://en.wikipedia.org/wiki/Quantile">quantile</a> of a numeric data sequence.</p><p>This function applies <a href="https://en.wikipedia.org/wiki/Reservoir_sampling">reservoir sampling</a> with a reservoir size up to 8192 and a random number generator for sampling. The result is non-deterministic. To get an exact quantile, use the quantileExact function.</p><p>When using multiple <code>quantile*</code> functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quantile(level)(expr)</span><br></pre></td></tr></table></figure><p>Alias: <code>median</code> .</p><p><strong>Arguments</strong></p><ul><li><code>level</code> — Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a <code>level</code> value in the range of <code>[0.01, 0.99]</code> . Default value: 0.5. At <code>level=0.5</code> the function calculates <a href="https://en.wikipedia.org/wiki/Median">median</a> . </li><li><code>expr</code> — Expression over the column values resulting in numeric, Date, or DateTime.</li></ul><p><strong>Returned value</strong></p><ul><li>Approximate quantile of the specified level.<br>Type:</li><li>Float64 for numeric data type input. </li><li>Date if input values have the <code>Date</code> type.</li><li>DateTime if input values have the <code>DateTime</code> type.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> quantile(number) <span class="keyword">FROM</span> numbers(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─quantile(number)─┐</span><br><span class="line">│ 4.5e+00          │</span><br><span class="line">└──────────────────┘</span><br></pre></td></tr></table></figure><h2 id="quantileDeterministic"><a href="#quantileDeterministic" class="headerlink" title="quantileDeterministic"></a>quantileDeterministic</h2><p>Computes an approximate <a href="https://en.wikipedia.org/wiki/Quantile">quantile</a> of a numeric data sequence.</p><p>This function applies <a href="https://en.wikipedia.org/wiki/Reservoir_sampling">reservoir sampling</a> with a reservoir size up to 8192 and deterministic algorithm of sampling. The result is deterministic. To get an exact quantile, use the quantileExact function.</p><p>When using multiple <code>quantile*</code> functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quantileDeterministic(level)(expr, determinator)</span><br></pre></td></tr></table></figure><p>Alias: <code>medianDeterministic</code> .</p><p><strong>Arguments</strong></p><ul><li><code>level</code> — Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a <code>level</code> value in the range of <code>[0.01, 0.99]</code> . Default value: 0.5. At <code>level=0.5</code> the function calculates <a href="https://en.wikipedia.org/wiki/Median">median</a> . </li><li><code>expr</code> — Expression over the column values resulting in numeric data types, Date or DateTime. </li><li><code>determinator</code> — Number whose hash is used instead of a random number generator in the reservoir sampling algorithm to make the result of sampling deterministic. As a determinator you can use any deterministic positive number, for example, a user id or an event id. If the same determinator value occures too often, the function works incorrectly.</li></ul><p><strong>Returned value</strong></p><ul><li>Approximate quantile of the specified level.<br>Type:</li><li>Float64 for numeric data type input. </li><li>Date if input values have the <code>Date</code> type.</li><li>DateTime if input values have the <code>DateTime</code> type.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> quantileDeterministic(number, <span class="number">1</span>) <span class="keyword">FROM</span> numbers(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─quantileDeterministic(number, 1)─┐</span><br><span class="line">│ 4.5e+00                          │</span><br><span class="line">└──────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="quantileExact"><a href="#quantileExact" class="headerlink" title="quantileExact"></a>quantileExact</h2><p>Exactly computes the <a href="https://en.wikipedia.org/wiki/Quantile">quantile</a> of a numeric data sequence.</p><p>To get exact value, all the passed values are combined into an array, which is then partially sorted. Therefore, the function consumes <code>O(n)</code> memory, where <code>n</code> is a number of values that were passed. However, for a small number of values, the function is very effective.</p><p>When using multiple <code>quantile*</code> functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quantileExact(level)(expr)</span><br></pre></td></tr></table></figure><p>Alias: <code>medianExact</code> .</p><p><strong>Arguments</strong></p><ul><li><code>level</code> — Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a <code>level</code> value in the range of <code>[0.01, 0.99]</code> . Default value: 0.5. At <code>level=0.5</code> the function calculates <a href="https://en.wikipedia.org/wiki/Median">median</a> . </li><li><code>expr</code> — Expression over the column values resulting in numeric data types, Date or DateTime.</li></ul><p><strong>Returned value</strong></p><ul><li>Quantile of the specified level.<br>Type:</li><li>Float64 for numeric data type input. </li><li>Date if input values have the <code>Date</code> type. </li><li>DateTime if input values have the <code>DateTime</code> type.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> quantileExact(number) <span class="keyword">FROM</span> numbers(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─quantileExact(number)─┐</span><br><span class="line">│                     5 │</span><br><span class="line">└───────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="quantileExactWeighted"><a href="#quantileExactWeighted" class="headerlink" title="quantileExactWeighted"></a>quantileExactWeighted</h2><p>Exactly computes the <a href="https://en.wikipedia.org/wiki/Quantile">quantile</a> of a numeric data sequence, taking into account the weight of each element.</p><p>To get exact value, all the passed values are combined into an array, which is then partially sorted. Each value is counted with its weight, as if it is present <code>weight</code> times. A hash table is used in the algorithm. Because of this, if the passed values are frequently repeated, the function consumes less RAM than quantileExact. You can use this function instead of <code>quantileExact</code> and specify the weight 1.</p><p>When using multiple <code>quantile*</code> functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quantileExactWeighted(level)(expr, weight)</span><br></pre></td></tr></table></figure><p>Alias: <code>medianExactWeighted</code> .</p><p><strong>Arguments</strong></p><ul><li><code>level</code> — Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a <code>level</code> value in the range of <code>[0.01, 0.99]</code> . Default value: 0.5. At <code>level=0.5</code> the function calculates <a href="https://en.wikipedia.org/wiki/Median">median</a> . </li><li><code>expr</code> — Expression over the column values resulting in numeric, Date or DateTime. </li><li><code>weight</code> — Column with weights of sequence members. Weight is a number of value occurrences.</li></ul><p><strong>Returned value</strong></p><ul><li>Quantile of the specified level.<br>Type:</li><li>Float64 for numeric data type input. </li><li>Date if input values have the <code>Date</code> type. </li><li>DateTime if input values have the <code>DateTime</code> type.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.functionQuantileExactWeighted (n UInt8, val UInt8) ENGINE<span class="operator">=</span>CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> n;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.functionQuantileExactWeighted <span class="keyword">VALUES</span> (<span class="number">0</span>,<span class="number">3</span>),(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">2</span>,<span class="number">1</span>),(<span class="number">5</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">SELECT</span> quantileExactWeighted(n, val) <span class="keyword">FROM</span> test.functionQuantileExactWeighted;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─quantileExactWeighted(n, val)─┐</span><br><span class="line">│                             1 │</span><br><span class="line">└───────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="quantileTDigest"><a href="#quantileTDigest" class="headerlink" title="quantileTDigest"></a>quantileTDigest</h2><p>Computes an approximate <a href="https://en.wikipedia.org/wiki/Quantile">quantile</a> of a numeric data sequence using the <a href="https://github.com/tdunning/t-digest/blob/master/docs/t-digest-paper/histo.pdf">t-digest</a> algorithm.</p><p>Memory consumption is <code>log(n)</code> , where <code>n</code> is a number of values. The result depends on the order of running the query, and is nondeterministic.</p><p>The performance of the function is lower than performance of quantile or quantileTiming. In terms of the ratio of State size to precision, this function is much better than <code>quantile</code> .</p><p>When using multiple <code>quantile*</code> functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quantileTDigest(level)(expr)</span><br></pre></td></tr></table></figure><p>Alias: <code>medianTDigest</code> .</p><p><strong>Arguments</strong></p><ul><li><code>level</code> — Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a <code>level</code> value in the range of <code>[0.01, 0.99]</code> . Default value: 0.5. At <code>level=0.5</code> the function calculates <a href="https://en.wikipedia.org/wiki/Median">median</a> . </li><li><code>expr</code> — Expression over the column values resulting in numeric data types, Date or DateTime.</li></ul><p><strong>Returned value</strong></p><ul><li>Approximate quantile of the specified level.<br>Type:</li><li>Float64 for numeric data type input. </li><li>Date if input values have the <code>Date</code> type. </li><li>DateTime if input values have the <code>DateTime</code> type.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> quantileTDigest(number) <span class="keyword">FROM</span> numbers(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─quantileTDigest(number)─┐</span><br><span class="line">│ 4.5e+00                 │</span><br><span class="line">└─────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="quantileTDigestWeighted"><a href="#quantileTDigestWeighted" class="headerlink" title="quantileTDigestWeighted"></a>quantileTDigestWeighted</h2><p>Computes an approximate <a href="https://en.wikipedia.org/wiki/Quantile">quantile</a> of a numeric data sequence using the <a href="https://github.com/tdunning/t-digest/blob/master/docs/t-digest-paper/histo.pdf">t-digest</a> algorithm. The function takes into account the weight of each sequence member. The maximum error is 1%. Memory consumption is <code>log(n)</code> , where <code>n</code> is a number of values.</p><p>The performance of the function is lower than the performance of quantile or quantileTiming. In terms of the ratio of State size to precision, this function is much better than <code>quantile</code>.</p><p>The result depends on the order of running the query and is nondeterministic.</p><p>When using multiple <code>quantile*</code> functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.</p><p>[block:callout]<br>{<br>  “type”: “info”,<br>  “title”: “Note”,<br>  “body”: “Using <code>quantileTDigestWeighted</code> <a href="https://github.com/tdunning/t-digest/issues/167#issuecomment-828650275">is not recommended for tiny data sets</a> and can lead to significat error. In this case, consider possibility of using <code>quantileTDigest</code> instead.”<br>}<br>[&#x2F;block]<br><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quantileTDigestWeighted(level)(expr, weight)</span><br></pre></td></tr></table></figure><p>Alias: <code>medianTDigestWeighted</code> .</p><p><strong>Arguments</strong></p><ul><li><code>level</code> — Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a <code>level</code> value in the range of <code>[0.01, 0.99]</code> . Default value: 0.5. At <code>level=0.5</code> the function calculates <a href="https://en.wikipedia.org/wiki/Median">median</a> . </li><li><code>expr</code> — Expression over the column values resulting in numeric data types, Date or DateTime. </li><li><code>weight</code> — Column with weights of sequence elements. Weight is a number of value occurrences.</li></ul><p><strong>Returned value</strong></p><ul><li>Approximate quantile of the specified level.<br>Type:</li><li>Float64 for numeric data type input. </li><li>Date if input values have the <code>Date</code> type. </li><li>DateTime if input values have the <code>DateTime</code> type.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> quantileTDigestWeighted(number, <span class="number">1</span>) <span class="keyword">FROM</span> numbers(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─quantileTDigestWeighted(number, 1)─┐</span><br><span class="line">│ 4.5e+00                            │</span><br><span class="line">└────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="quantileTiming"><a href="#quantileTiming" class="headerlink" title="quantileTiming"></a>quantileTiming</h2><p>With the determined precision computes the <a href="https://en.wikipedia.org/wiki/Quantile">quantile</a> of a numeric data sequence.</p><p>The result is deterministic (it does not depend on the query processing order). The function is optimized for working with sequences which describe distributions like loading web pages times or backend response times.</p><p>When using multiple <code>quantile*</code> functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quantileTiming(level)(expr)</span><br></pre></td></tr></table></figure><p>Alias: <code>medianTiming</code> .</p><p><strong>Arguments</strong></p><ul><li><code>level</code> — Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a <code>level</code> value in the range of <code>[0.01, 0.99]</code> . Default value: 0.5. At <code>level=0.5</code> the function calculates <a href="https://en.wikipedia.org/wiki/Median">median</a> . </li><li><code>expr</code> — Expression over a column values returning a Float* -type number. <ul><li>If negative values are passed to the function, the behavior is undefined. </li><li>If the value is greater than 30,000 (a page loading time of more than 30 seconds), it is assumed to be 30,000.</li></ul></li></ul><p><strong>Accuracy</strong><br>The calculation is accurate if:</p><ul><li>Total number of values does not exceed 5670. </li><li>Total number of values exceeds 5670, but the page loading time is less than 1024ms.</li></ul><p>Otherwise, the result of the calculation is rounded to the nearest multiple of 16 ms.</p><p>!!! note “Note”<br>For calculating page loading time quantiles, this function is more effective and accurate than quantile.</p><p><strong>Returned value</strong></p><ul><li>Quantile of the specified level.<br>Type: <code>Float32</code> .</li></ul><p>!!! note “Note”<br>If no values are passed to the function (when using <code>quantileTimingIf</code> ), NaN is returned. The purpose of this is to differentiate these cases from cases that result in zero. See ORDER BY clause for notes on sorting <code>NaN</code> values.</p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.functionQuantileTiming (response_time UInt32) ENGINE<span class="operator">=</span>CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> response_time;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.functionQuantileTiming <span class="keyword">VALUES</span> (<span class="number">72</span>),(<span class="number">112</span>),(<span class="number">126</span>),(<span class="number">145</span>),(<span class="number">104</span>),(<span class="number">242</span>),(<span class="number">313</span>),(<span class="number">168</span>),(<span class="number">108</span>);</span><br><span class="line"><span class="keyword">SELECT</span> quantileTiming(response_time) <span class="keyword">FROM</span> test.functionQuantileTiming;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─quantileTiming(response_time)─┐</span><br><span class="line">│ 1.26e+02                      │</span><br><span class="line">└───────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="quantileTimingWeighted"><a href="#quantileTimingWeighted" class="headerlink" title="quantileTimingWeighted"></a>quantileTimingWeighted</h2><p>With the determined precision computes the <a href="https://en.wikipedia.org/wiki/Quantile">quantile</a> of a numeric data sequence according to the weight of each sequence member.</p><p>The result is deterministic (it does not depend on the query processing order). The function is optimized for working with sequences which describe distributions like loading web pages times or backend response times.</p><p>When using multiple <code>quantile*</code> functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quantileTimingWeighted(level)(expr, weight)</span><br></pre></td></tr></table></figure><p>Alias: <code>medianTimingWeighted</code> .</p><p><strong>Arguments</strong></p><ul><li><code>level</code> — Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a <code>level</code> value in the range of <code>[0.01, 0.99]</code> . Default value: 0.5. At <code>level=0.5</code> the function calculates <a href="https://en.wikipedia.org/wiki/Median">median</a> . </li><li><code>expr</code> — Expression over a column values returning a Float* -type number. </li><li>If negative values are passed to the function, the behavior is undefined.</li><li>If the value is greater than 30,000 (a page loading time of more than 30 seconds), it is assumed to be 30,000.</li><li><code>weight</code> — Column with weights of sequence elements. Weight is a number of value occurrences.</li></ul><p><strong>Accuracy</strong><br>The calculation is accurate if:</p><ul><li>Total number of values does not exceed 5670. </li><li>Total number of values exceeds 5670, but the page loading time is less than 1024ms.</li></ul><p>Otherwise, the result of the calculation is rounded to the nearest multiple of 16 ms.</p><p>!!! note “Note”<br>For calculating page loading time quantiles, this function is more effective and accurate than quantile.</p><p><strong>Returned value</strong></p><ul><li>Quantile of the specified level.<br>Type: <code>Float32</code> .</li></ul><p>!!! note “Note”<br>If no values are passed to the function (when using <code>quantileTimingIf</code> ), NaN is returned. The purpose of this is to differentiate these cases from cases that result in zero. See ORDER BY clause for notes on sorting <code>NaN</code> values.</p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.functionQuantileTimingWeighted (response_time UInt32, weight UInt32) ENGINE<span class="operator">=</span>CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> response_time;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.functionQuantileTimingWeighted <span class="keyword">VALUES</span> (<span class="number">68</span>,<span class="number">1</span>),(<span class="number">104</span>,<span class="number">2</span>),(<span class="number">112</span>,<span class="number">3</span>),(<span class="number">126</span>,<span class="number">2</span>),(<span class="number">138</span>,<span class="number">1</span>),(<span class="number">162</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">SELECT</span> quantileTimingWeighted(response_time, weight) <span class="keyword">FROM</span> test.functionQuantileTimingWeighted;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─quantileTimingWeighted(response_time, weight)─┐</span><br><span class="line">│ 1.12e+02                                      │</span><br><span class="line">└───────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="quantiles"><a href="#quantiles" class="headerlink" title="quantiles"></a>quantiles</h2><p>All the quantile functions also have corresponding quantiles functions: <code>quantiles</code> , <code>quantilesDeterministic</code> , <code>quantilesTiming</code> , <code>quantilesTimingWeighted</code> , <code>quantilesExact</code> , <code>quantilesExactWeighted</code> , <code>quantilesTDigest</code> , <code>quantilesBFloat16</code> . These functions calculate all the quantiles of the listed levels in one pass, and return an array of the resulting values.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quantiles(level1, level2, …)(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>level1,level2...</code> — Levels of quantiles. Each level is a constant floating-point number from 0 to 1. We recommend using a <code>level</code> value in the range of <code>[0.01, 0.99]</code>.</li></ul><p><strong>Returned value</strong></p><ul><li>A list of quantiles.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> quantiles(<span class="number">0.5</span>,<span class="number">0.4</span>)(number) <span class="keyword">FROM</span> numbers(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─quantiles(0.5, 0.4)(number)─┐</span><br><span class="line">│ [4.5e+00, 3.6e+00]          │</span><br><span class="line">└─────────────────────────────┘</span><br></pre></td></tr></table></figure><p>quantiles(0.5,0.4)(number) equivalent to quantile(0.5)(number) and quantile(0.4)(number).</p><h2 id="quantilesTimingWeighted"><a href="#quantilesTimingWeighted" class="headerlink" title="quantilesTimingWeighted"></a>quantilesTimingWeighted</h2><p>Same as <code>quantileTimingWeighted</code> , but accept multiple parameters with quantile levels and return an Array filled with many values of that quantiles.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quantileTimingWeighted(level1, level2, …)(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>level1,level2...</code> — Levels of quantiles. Each level is a constant floating-point number from 0 to 1. We recommend using a <code>level</code> value in the range of <code>[0.01, 0.99]</code>.</li></ul><p><strong>Returned value</strong></p><ul><li>A list of quantiles.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.functionQuantilesTimingWeighted (response_time UInt32, weight UInt32) ENGINE<span class="operator">=</span>CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> response_time;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.functionQuantilesTimingWeighted <span class="keyword">VALUES</span> (<span class="number">68</span>,<span class="number">1</span>),(<span class="number">104</span>,<span class="number">2</span>),(<span class="number">112</span>,<span class="number">3</span>),(<span class="number">126</span>,<span class="number">2</span>),(<span class="number">138</span>,<span class="number">1</span>),(<span class="number">162</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">SELECT</span> quantilesTimingWeighted(<span class="number">0.5</span>, <span class="number">0.99</span>)(response_time, weight) <span class="keyword">FROM</span> test.functionQuantilesTimingWeighted;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─quantilesTimingWeighted(0.5, 0.99)(response_time, weight)─┐</span><br><span class="line">│ [1.12e+02, 1.62e+02]                                      │</span><br><span class="line">└───────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="sequenceCount"><a href="#sequenceCount" class="headerlink" title="sequenceCount"></a>sequenceCount</h2><p>sequenceCount(pattern)(time, cond1, cond2, …)</p><p>Counts the number of event chains that matched the pattern. The function searches event chains that do not overlap. It starts to search for the next chain after the current chain is matched.</p><p>!!! warning “Warning”<br>Events that occur at the same second may lay in the sequence in an undefined order affecting the result.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sequenceCount(<span class="keyword">pattern</span>)(<span class="type">timestamp</span>, cond1, cond2, ...)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>pattern</code> — Pattern string. See Pattern syntax. </li><li><code>timestamp</code> — Column considered to contain time data. Typical data types are <code>Date</code> and <code>DateTime</code> . You can also use any of the supported UInt data types. </li><li><code>cond1</code> , <code>cond2</code> — Conditions that describe the chain of events. Data type: <code>UInt8</code> . You can pass up to 32 condition arguments. The function takes only the events described in these conditions into account. If the sequence contains data that isn’t described in a condition, the function skips them.</li></ul><p><strong>Returned values</strong></p><ul><li>Number of non-overlapping event chains that are matched.<br>Type: <code>UInt64</code> .</li></ul><p><strong>Example</strong><br>Count how many times the number 2 occurs after the number 1 with any amount of other numbers between them:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test.functionSequenceCount (<span class="type">time</span> DateTime, number UInt8) ENGINE<span class="operator">=</span>CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="type">time</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.functionSequenceCount <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">2</span>),(<span class="number">4</span>,<span class="number">1</span>),(<span class="number">5</span>,<span class="number">3</span>),(<span class="number">6</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">SELECT</span> sequenceCount(<span class="string">&#x27;(?1).*(?2)&#x27;</span>)(<span class="type">time</span>, number <span class="operator">=</span> <span class="number">1</span>, number <span class="operator">=</span> <span class="number">2</span>) <span class="keyword">FROM</span> test.functionSequenceCount;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─sequenceCount(&#x27;(?1).*(?2)&#x27;)(time, equals(number, 1), equals(number, 2))─┐</span><br><span class="line">│                                                                       2 │</span><br><span class="line">└─────────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="sequenceMatch"><a href="#sequenceMatch" class="headerlink" title="sequenceMatch"></a>sequenceMatch</h2><p>sequenceMatch(pattern)(timestamp, cond1, cond2, …)</p><p>Checks whether the sequence contains an event chain that matches the pattern.</p><p>!!! warning “Warning”<br>Events that occur at the same second may lay in the sequence in an undefined order affecting the result.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sequenceMatch(<span class="keyword">pattern</span>)(<span class="type">timestamp</span>, cond1, cond2, ...)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>pattern</code> — Pattern string. See Pattern syntax. </li><li><code>timestamp</code> — Column considered to contain time data. Typical data types are <code>Date</code> and <code>DateTime</code> . You can also use any of the supported UInt data types. </li><li><code>cond1</code> , <code>cond2</code> — Conditions that describe the chain of events. Data type: <code>UInt8</code> . You can pass up to 32 condition arguments. The function takes only the events described in these conditions into account. If the sequence contains data that isn’t described in a condition, the function skips them.</li></ul><p><strong>Returned values</strong></p><ul><li>1, if the pattern is matched. </li><li>0, if the pattern isn’t matched.<br>Type: <code>UInt8</code> .</li></ul><p><strong>Pattern syntax</strong></p><ul><li><code>(?N)</code> — Matches the condition argument at position <code>N</code> . Conditions are numbered in the <code>[1, 32]</code> range. For example, <code>(?1)</code> matches the argument passed to the <code>cond1</code> parameter. </li><li><code>.*</code> — Matches any number of events. You do not need conditional arguments to match this element of the pattern. </li><li><code>(?t operator value)</code> — Sets the time in seconds that should separate two events. For example, pattern <code>(?1)(?t&gt;1800)(?2)</code> matches events that occur more than 1800 seconds from each other. An arbitrary number of any events can lay between these events. You can use the <code>&gt;=</code> , <code>&gt;</code> , <code>&lt;</code> , <code>&lt;=</code> , <code>==</code> operators.</li></ul><p><strong>Examples</strong><br>Consider data in the <code>t</code> table:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌─time─┬─number─┐</span><br><span class="line"></span><br><span class="line">│    1 │      1 │</span><br><span class="line"></span><br><span class="line">│    2 │      3 │</span><br><span class="line"></span><br><span class="line">│    3 │      2 │</span><br><span class="line"></span><br><span class="line">└──────┴────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Perform the query:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.functionSequenceMatch (<span class="type">time</span> DateTime, number UInt8) ENGINE<span class="operator">=</span>CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="type">time</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.functionSequenceMatch <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">SELECT</span> sequenceMatch(<span class="string">&#x27;(?1)(?2)&#x27;</span>)(<span class="type">time</span>, number <span class="operator">=</span> <span class="number">1</span>, number <span class="operator">=</span> <span class="number">2</span>) <span class="keyword">FROM</span> test.functionSequenceMatch;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─sequenceMatch(&#x27;(?1)(?2)&#x27;)(time, equals(number, 1), equals(number, 2))─┐</span><br><span class="line">│                                                                     1 │</span><br><span class="line">└───────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>The function found the event chain where number 2 follows number 1. It skipped number 3 between them, because the number is not described as an event. If we want to take this number into account when searching for the event chain given in the example, we should make a condition for it.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sequenceMatch(<span class="string">&#x27;(?1)(?2)&#x27;</span>)(<span class="type">time</span>, number <span class="operator">=</span> <span class="number">1</span>, number <span class="operator">=</span> <span class="number">2</span>, number <span class="operator">=</span> <span class="number">3</span>) <span class="keyword">FROM</span> test.functionSequenceMatch;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─sequenceMatch(&#x27;(?1)(?2)&#x27;)(time, equals(number, 1), equals(number, 2), equals(number, 3))─┐</span><br><span class="line">│                                                                                        0 │</span><br><span class="line">└──────────────────────────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>In this case, the function couldn’t find the event chain matching the pattern, because the event for number 3 occured between 1 and 2. If in the same case we checked the condition for number 4, the sequence would match the pattern.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sequenceMatch(<span class="string">&#x27;(?1)(?2)&#x27;</span>)(<span class="type">time</span>, number <span class="operator">=</span> <span class="number">1</span>, number <span class="operator">=</span> <span class="number">2</span>, number <span class="operator">=</span> <span class="number">4</span>) <span class="keyword">FROM</span> test.functionSequenceMatch;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─sequenceMatch(&#x27;(?1)(?2)&#x27;)(time, equals(number, 1), equals(number, 2), equals(number, 4))─┐</span><br><span class="line">│                                                                                        1 │</span><br><span class="line">└──────────────────────────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="stddevPop"><a href="#stddevPop" class="headerlink" title="stddevPop"></a>stddevPop</h2><p>The result is equal to the square root of varPop.</p><p>This function uses a numerically unstable algorithm. If you need <a href="https://en.wikipedia.org/wiki/Numerical_stability">numerical stability</a> in calculations, use the <code>stddevPopStable</code> function. It works slower but provides a lower computational error.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stddevPop(<span class="keyword">values</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>values</code> — input values.</li></ul><p><strong>Returned values</strong></p><ul><li>stddevPop of values. Returns Float64.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> stddevPop(number) <span class="keyword">FROM</span> numbers(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─stddevPop(number)──────┐</span><br><span class="line">│ 2.8722813232690143e+00 │</span><br><span class="line">└────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="stddevSamp"><a href="#stddevSamp" class="headerlink" title="stddevSamp"></a>stddevSamp</h2><p>The result is equal to the square root of varSamp.</p><p>This function uses a numerically unstable algorithm. If you need <a href="https://en.wikipedia.org/wiki/Numerical_stability">numerical stability</a> in calculations, use the <code>stddevSampStable</code> function. It works slower but provides a lower computational error.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stddevSamp(<span class="keyword">values</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>values</code> — input values.</li></ul><p><strong>Returned values</strong></p><ul><li>stddevSamp of values. Returns Float64.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> stddevSamp(number) <span class="keyword">FROM</span> numbers(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─stddevSamp(number)─────┐</span><br><span class="line">│ 3.0276503540974917e+00 │</span><br><span class="line">└────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="STDDEV-POP"><a href="#STDDEV-POP" class="headerlink" title="STDDEV_POP"></a>STDDEV_POP</h2><p>Alias to stddevPop.</p><h2 id="STDDEV-SAMP"><a href="#STDDEV-SAMP" class="headerlink" title="STDDEV_SAMP"></a>STDDEV_SAMP</h2><p>Alias to stddevSamp.</p><h2 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h2><p>Calculates the sum. Only works for numbers.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>(<span class="keyword">values</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>values</code> — input values.</li></ul><p><strong>Returned values</strong></p><ul><li>sum of values. Type is same as values</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sum</span>(number) <span class="keyword">FROM</span> numbers(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─sum(number)─┐</span><br><span class="line">│ 45          │</span><br><span class="line">└─────────────┘</span><br></pre></td></tr></table></figure><p>sum from 0 to 9.</p><h2 id="sumKahan"><a href="#sumKahan" class="headerlink" title="sumKahan"></a>sumKahan</h2><p>Calculates the sum of the numbers with <a href="https://en.wikipedia.org/wiki/Kahan_summation_algorithm">Kahan compensated summation algorithm</a><br>Slower than sum function.</p><p>The compensation works only for Float types.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sumKahan(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong> </p><ul><li><code>x</code> — Input value, must be Integer, Float, or Decimal.</li></ul><p><strong>Returned value</strong></p><ul><li>the sum of numbers, with type Integer, Float, or Decimal depends on type of input arguments</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sum</span>(<span class="number">0.1</span>), sumKahan(<span class="number">0.1</span>) <span class="keyword">FROM</span> numbers(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─sum(0.1)──────────────┬─sumKahan(0.1)─┐</span><br><span class="line">│ 9.999999999999999e-01 │ 1e+00         │</span><br><span class="line">└───────────────────────┴───────────────┘</span><br></pre></td></tr></table></figure><h2 id="sumMap"><a href="#sumMap" class="headerlink" title="sumMap"></a>sumMap</h2><p>Totals the <code>value</code> array according to the keys specified in the <code>key</code> array.<br>The number of elements in <code>key</code> and <code>value</code> must be the same for each row that is totaled.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sumMap(key, <span class="keyword">value</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong> </p><ul><li><code>key</code> — Input keys. Type Array</li><li><code>value</code> — Input values. Type Array</li></ul><p><strong>Returned value</strong></p><ul><li>Returns a tuple of two arrays: keys in sorted order, and values summed for the corresponding keys.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test.functionSumMap(</span><br><span class="line">    <span class="type">date</span> <span class="type">Date</span>,</span><br><span class="line">    timeslot DateTime,</span><br><span class="line">    status UInt16,</span><br><span class="line">    requests UInt64</span><br><span class="line">) ENGINE <span class="operator">=</span> CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="type">date</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.functionSumMap <span class="keyword">VALUES</span></span><br><span class="line">    (<span class="string">&#x27;2000-01-01&#x27;</span>, <span class="string">&#x27;2000-01-01 00:00:00&#x27;</span>, <span class="number">1</span>,<span class="number">2</span>),</span><br><span class="line">    (<span class="string">&#x27;2000-01-01&#x27;</span>, <span class="string">&#x27;2000-01-01 00:00:00&#x27;</span>, <span class="number">1</span>,<span class="number">5</span>),</span><br><span class="line">    (<span class="string">&#x27;2000-01-01&#x27;</span>, <span class="string">&#x27;2000-01-01 00:00:00&#x27;</span>, <span class="number">3</span>,<span class="number">4</span>),</span><br><span class="line">    (<span class="string">&#x27;2000-01-01&#x27;</span>, <span class="string">&#x27;2000-01-01 00:01:00&#x27;</span>, <span class="number">5</span>,<span class="number">6</span>),</span><br><span class="line">    (<span class="string">&#x27;2000-01-01&#x27;</span>, <span class="string">&#x27;2000-01-01 00:01:00&#x27;</span>, <span class="number">7</span>,<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> timeslot, sumMap([status], [requests]) <span class="keyword">FROM</span> test.functionSumMap <span class="keyword">GROUP</span> <span class="keyword">BY</span> timeslot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─timeslot────────────┬─sumMap(array(status), array(requests))─┐</span><br><span class="line">│ 2000-01-01 00:00:00 │ ([1, 3], [7, 4])                       │</span><br><span class="line">│ 2000-01-01 00:01:00 │ ([5, 7], [6, 8])                       │</span><br><span class="line">└─────────────────────┴────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="sumMapFiltered"><a href="#sumMapFiltered" class="headerlink" title="sumMapFiltered"></a>sumMapFiltered</h2><p>Same behavior as sumMap except that an array of keys is passed as a parameter. This can be especially useful when working with a high cardinality of keys.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sumMapFiltered(keys_to_keep)(keys, <span class="keyword">values</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong> </p><ul><li><code>keys_to_keep</code> - Input keys_to_keep. Type Array</li><li><code>key</code> — Input keys. Type Array</li><li><code>value</code> — Input values. Type Array</li></ul><p><strong>Returned value</strong></p><ul><li>Returns a tuple of two arrays: keys in sorted order, and values summed for the corresponding keys.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test.functionSumMapFiltered(</span><br><span class="line">    <span class="type">date</span> <span class="type">Date</span>,</span><br><span class="line">    timeslot DateTime,</span><br><span class="line">    status UInt16,</span><br><span class="line">    requests UInt64</span><br><span class="line">) ENGINE <span class="operator">=</span> CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="type">date</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.functionSumMapFiltered <span class="keyword">VALUES</span></span><br><span class="line">    (<span class="string">&#x27;2000-01-01&#x27;</span>, <span class="string">&#x27;2000-01-01 00:00:00&#x27;</span>, <span class="number">1</span>,<span class="number">2</span>),</span><br><span class="line">    (<span class="string">&#x27;2000-01-01&#x27;</span>, <span class="string">&#x27;2000-01-01 00:00:00&#x27;</span>, <span class="number">1</span>,<span class="number">5</span>),</span><br><span class="line">    (<span class="string">&#x27;2000-01-01&#x27;</span>, <span class="string">&#x27;2000-01-01 00:00:00&#x27;</span>, <span class="number">3</span>,<span class="number">4</span>),</span><br><span class="line">    (<span class="string">&#x27;2000-01-01&#x27;</span>, <span class="string">&#x27;2000-01-01 00:01:00&#x27;</span>, <span class="number">5</span>,<span class="number">6</span>),</span><br><span class="line">    (<span class="string">&#x27;2000-01-01&#x27;</span>, <span class="string">&#x27;2000-01-01 00:01:00&#x27;</span>, <span class="number">7</span>,<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> timeslot, sumMapFiltered([<span class="number">1</span>])([status], [requests]) <span class="keyword">FROM</span> test.functionSumMapFiltered <span class="keyword">GROUP</span> <span class="keyword">BY</span> timeslot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─timeslot────────────┬─sumMapFiltered([1])(array(status), array(requests))─┐</span><br><span class="line">│ 2000-01-01 00:00:00 │ ([1], [7])                                          │</span><br><span class="line">│ 2000-01-01 00:01:00 │ ([], [])                                            │</span><br><span class="line">└─────────────────────┴─────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="sumWithOverflow"><a href="#sumWithOverflow" class="headerlink" title="sumWithOverflow"></a>sumWithOverflow</h2><p>Computes the sum of the numbers, using the same data type for the result as for the input parameters. If the sum exceeds the maximum value for this data type, it is calculated with overflow.</p><p>Only works for numbers.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sumWithOverflow(<span class="keyword">values</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong> </p><ul><li><code>values</code> - Input Values.</li></ul><p><strong>Returned value</strong></p><ul><li>Sum of the numbers.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.functionSumWithOverflow (x UInt8) ENGINE<span class="operator">=</span>CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> x;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.functionSumWithOverflow <span class="keyword">values</span> (<span class="number">254</span>),(<span class="number">254</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sum</span>(x), sumWithOverflow(x) <span class="keyword">FROM</span> test.functionSumWithOverflow;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─sum(x)─┬─sumWithOverflow(x)─┐</span><br><span class="line">│ 508    │ 252                │</span><br><span class="line">└────────┴────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="topK"><a href="#topK" class="headerlink" title="topK"></a>topK</h2><p>Returns an array of the approximately most frequent values in the specified column. The resulting array is sorted in descending order of approximate frequency of values (not by the values themselves).</p><p>Implements the <a href="http://www.l2f.inesc-id.pt/~fmmb/wiki/uploads/Work/misnis.ref0a.pdf">Filtered Space-Saving</a> algorithm for analyzing TopK, based on the reduce-and-combine algorithm from <a href="https://arxiv.org/pdf/1401.0702.pdf">Parallel Space Saving</a> .</p><p>This function does not provide a guaranteed result. In certain situations, errors might occur and it might return frequent values that aren’t the most frequent values.</p><p>We recommend using the <code>N &lt; 10</code> value; performance is reduced with large <code>N</code> values. Maximum value of <code>N = 65536</code> .</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">topK(N)(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>N</code> – The number of elements to return. If the parameter is omitted, default value 10 is used.</li><li><code>x</code> – The values to calculate frequency.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> topK(<span class="number">3</span>)(number) <span class="keyword">FROM</span> numbers(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─topK(3)(number)─┐</span><br><span class="line">│ [0, 1, 2]       │</span><br><span class="line">└─────────────────┘</span><br></pre></td></tr></table></figure><h2 id="topKWeighted"><a href="#topKWeighted" class="headerlink" title="topKWeighted"></a>topKWeighted</h2><p>Returns an array of the approximately most frequent values in the specified column. The resulting array is sorted in descending order of approximate frequency of values (not by the values themselves). Additionally, the weight of the value is taken into account.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">topKWeighted(N)(x, weight)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>N</code> — The number of elements to return. </li><li><code>x</code> — The value. </li><li><code>weight</code> — The weight. Every value is accounted <code>weight</code> times for frequency calculation. UInt64.</li></ul><p><strong>Returned value</strong><br>Returns an array of the values with maximum approximate sum of weights.</p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> topKWeighted(<span class="number">10</span>)(number, number) <span class="keyword">FROM</span> numbers(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><!-- TODO: Verified WITH CNCH. Result Incorrect. --><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─topKWeighted(10)(number, number)──────────┐</span><br><span class="line">│ [999,998,997,996,995,994,993,992,991,990] │</span><br><span class="line">└───────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h2><p>Calculates the approximate number of different values of the argument.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uniq(x[, ...])</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li>The function takes a variable number of parameters. Parameters can be <code>Tuple</code> , <code>Array</code> , <code>Date</code> , <code>DateTime</code> , <code>String</code> , or numeric types.</li></ul><p><strong>Returned value</strong></p><ul><li>A UInt64 -type number.</li></ul><p><strong>Implementation details</strong><br>Function:</p><ul><li>Calculates a hash for all parameters in the aggregate, then uses it in calculations. </li><li>Uses an adaptive sampling algorithm. For the calculation state, the function uses a sample of element hash values up to 65536.</li></ul><p>This algorithm is very accurate and very efficient on the CPU. When the query contains several of these functions, using <code>uniq</code> is almost as fast as using other aggregate functions.This algorithm is very accurate and very efficient on the CPU. When the query contains several of these functions, using <code>uniq</code> is almost as fast as using other aggregate functions.</p><ul><li>Provides the result deterministically (it does not depend on the query processing order).</li></ul><p>We recommend using this function in almost all scenarios.</p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> uniq(number) <span class="keyword">FROM</span> numbers(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="uniqCombined"><a href="#uniqCombined" class="headerlink" title="uniqCombined"></a>uniqCombined</h2><p>Calculates the approximate number of different argument values.<br>The <code>uniqCombined</code> function is a good choice for calculating the number of different values.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uniqCombined(HLL_precision)(x[, ...])</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li>The function takes a variable number of parameters. Parameters can be <code>Tuple</code> , <code>Array</code> , <code>Date</code> , <code>DateTime</code> , <code>String</code> , or numeric types.</li><li><code>HLL_precision</code> is the base-2 logarithm of the number of cells in <a href="https://en.wikipedia.org/wiki/HyperLogLog">HyperLogLog</a> . Optional, you can use the function as <code>uniqCombined(x[, ...])</code> . The default value for <code>HLL_precision</code> is 17, which is effectively 96 KiB of space (2^17 cells, 6 bits each).</li></ul><p><strong>Returned value</strong></p><ul><li>A number UInt64 -type number.</li></ul><p><strong>Implementation details</strong><br>Function:</p><ul><li>Calculates a hash (64-bit hash for <code>String</code> and 32-bit otherwise) for all parameters in the aggregate, then uses it in calculations. </li><li>Uses a combination of three algorithms: array, hash table, and HyperLogLog with an error correction table.</li></ul><p>For a small number of distinct elements, an array is used. When the set size is larger, a hash table is used. For a larger number of elements, HyperLogLog is used, which will occupy a fixed amount of memory.For a small number of distinct elements, an array is used. When the set size is larger, a hash table is used. For a larger number of elements, HyperLogLog is used, which will occupy a fixed amount of memory.</p><ul><li>Provides the result deterministically (it does not depend on the query processing order).</li></ul><p>Note</p><p>Since it uses 32-bit hash for non- <code>String</code> type, the result will have very high error for cardinalities significantly larger than <code>UINT_MAX</code> (error will raise quickly after a few tens of billions of distinct values), hence in this case you should use uniqCombined64</p><p>Compared to the uniq function, the <code>uniqCombined</code> :</p><ul><li>Consumes several times less memory. </li><li>Calculates with several times higher accuracy. </li><li>Usually has slightly lower performance. In some scenarios, <code>uniqCombined</code> can perform better than <code>uniq</code> , for example, with distributed queries that transmit a large number of aggregation states over the network.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> uniqCombined(number) <span class="keyword">FROM</span> numbers(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="uniqExact"><a href="#uniqExact" class="headerlink" title="uniqExact"></a>uniqExact</h2><p>Calculates the exact number of different argument values.</p><p>Use the <code>uniqExact</code> function if you absolutely need an exact result. Otherwise use the uniq function.</p><p>The <code>uniqExact</code> function uses more memory than <code>uniq</code> , because the size of the state has unbounded growth as the number of different values increases.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uniqExact(x[, ...])</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong><br>The function takes a variable number of parameters. Parameters can be <code>Tuple</code> , <code>Array</code> , <code>Date</code> , <code>DateTime</code> , <code>String</code> , or numeric types.</p><p><strong>Returned value</strong></p><ul><li>A number UInt64 -type number.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> uniqExact(number) <span class="keyword">FROM</span> numbers(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─uniqExact(number)─┐</span><br><span class="line">│ 1000              │</span><br><span class="line">└───────────────────┘</span><br></pre></td></tr></table></figure><h2 id="uniqHLL12"><a href="#uniqHLL12" class="headerlink" title="uniqHLL12"></a>uniqHLL12</h2><p>Calculates the approximate number of different argument values, using the <a href="https://en.wikipedia.org/wiki/HyperLogLog">HyperLogLog</a> algorithm.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uniqHLL12(x[, ...])</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong><br>The function takes a variable number of parameters. Parameters can be <code>Tuple</code> , <code>Array</code> , <code>Date</code> , <code>DateTime</code> , <code>String</code> , or numeric types.</p><p><strong>Returned value</strong></p><ul><li>A UInt64 -type number.</li></ul><p><strong>Implementation details</strong><br>Function:</p><ul><li>Calculates a hash for all parameters in the aggregate, then uses it in calculations. </li><li>Uses the HyperLogLog algorithm to approximate the number of different argument values.<br>2^12 5-bit cells are used. The size of the state is slightly more than 2.5 KB. The result is not very accurate (up to ~10% error) for small data sets (&lt;10K elements). However, the result is fairly accurate for high-cardinality data sets (10K-100M), with a maximum error of ~1.6%. Starting from 100M, the estimation error increases, and the function will return very inaccurate results for data sets with extremely high cardinality (1B+ elements).</li><li>Provides the determinate result (it does not depend on the query processing order).</li></ul><p>We do not recommend using this function. In most cases, use the uniq or uniqCombined function.</p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> uniqHLL12(number) <span class="keyword">FROM</span> numbers(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="uniqUpTo"><a href="#uniqUpTo" class="headerlink" title="uniqUpTo"></a>uniqUpTo</h2><p>Calculates the number of different argument values if it is less than or equal to N. If the number of different argument values is greater than N, it returns N + 1.</p><p>Recommended for use with small Ns, up to 10. The maximum value of N is 100.</p><p>For the state of an aggregate function, it uses the amount of memory equal to 1 + N * the size of one value of bytes.</p><p>For strings, it stores a non-cryptographic hash of 8 bytes. That is, the calculation is approximated for strings.</p><p>The function also works for several arguments.</p><p>It works as fast as possible, except for cases when a large N value is used and the number of unique values is slightly less than N.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uniqUpTo(N)(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>N</code> The function takes a variable number of parameters. Parameters can be <code>Tuple</code> , <code>Array</code> , <code>Date</code> , <code>DateTime</code> , <code>String</code> , or numeric types.</li></ul><p><strong>Returned value</strong></p><ul><li>A UInt64 -type number.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> uniqUpTo(<span class="number">5</span>)(number) <span class="keyword">FROM</span> numbers(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─uniqUpTo(5)(number)─┐</span><br><span class="line">│ 6                   │</span><br><span class="line">└─────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> uniqUpTo(<span class="number">5</span>)(number) <span class="keyword">FROM</span> numbers(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─uniqUpTo(5)(number)─┐</span><br><span class="line">│ 4                   │</span><br><span class="line">└─────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="varPop"><a href="#varPop" class="headerlink" title="varPop"></a>varPop</h2><p>Calculates the amount <code>Σ((x - x̅)^2) / n</code> , where <code>n</code> is the sample size and <code>x̅</code> is the average value of <code>x</code> .</p><p>This function uses a numerically unstable algorithm. If you need <a href="https://en.wikipedia.org/wiki/Numerical_stability">numerical stability</a> in calculations, use the <code>varPopStable</code> function. It works slower but provides a lower computational error.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">varPop(<span class="keyword">values</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>values</code> — input values.</li></ul><p><strong>Returned values</strong></p><ul><li>varPop of values. Returns Float64.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> varPop(number) <span class="keyword">FROM</span> numbers(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─varPop(number)─┐</span><br><span class="line">│ 8.25e+00       │</span><br><span class="line">└────────────────┘</span><br></pre></td></tr></table></figure><h2 id="varSamp"><a href="#varSamp" class="headerlink" title="varSamp"></a>varSamp</h2><p>Calculates the amount <code>Σ((x - x̅)^2) / (n - 1)</code> , where <code>n</code> is the sample size and <code>x̅</code> is the average value of <code>x</code> .</p><p>It represents an unbiased estimate of the variance of a random variable if passed values form its sample.</p><p>This function uses a numerically unstable algorithm. If you need <a href="https://en.wikipedia.org/wiki/Numerical_stability">numerical stability</a> in calculations, use the <code>varSampStable</code> function. It works slower but provides a lower computational error.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">varSamp(<span class="keyword">values</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>values</code> — input values.</li></ul><p><strong>Returned values</strong></p><ul><li>varSamp of values. Returns Float64.</li><li>When <code>n &lt;= 1</code> , returns <code>NaN</code> .</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> varSamp(number) <span class="keyword">FROM</span> numbers(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─varSamp(number)───────┐</span><br><span class="line">│ 9.166666666666666e+00 │</span><br><span class="line">└───────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> varSamp(number) <span class="keyword">FROM</span> numbers(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─varSamp(number)─┐</span><br><span class="line">│ NaN             │</span><br><span class="line">└─────────────────┘</span><br></pre></td></tr></table></figure><h2 id="VAR-POP"><a href="#VAR-POP" class="headerlink" title="VAR_POP"></a>VAR_POP</h2><p>Alias to varPop.</p><h2 id="VAR-SAMP"><a href="#VAR-SAMP" class="headerlink" title="VAR_SAMP"></a>VAR_SAMP</h2><p>Alias to varSamp.</p>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> SQL_Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arithmetic</title>
      <link href="/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/arithmetic/"/>
      <url>/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/arithmetic/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Notice:<br>Some of the examples below are referenced from <a href="https://clickhouse.com/docs/en/sql-reference/functions/">ClickHouse Documentation</a> but have been adapted and modified to work in ByteHouse.</p></blockquote><h2 id="abs"><a href="#abs" class="headerlink" title="abs"></a>abs</h2><p>Calculates the absolute value of the number (a). That is, if a &lt; 0, it returns -a. For unsigned types it does not do anything. For signed integer types, it returns an unsigned number.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">abs</span>(x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x</code> – The number.</li></ul><p><strong>Returned value</strong></p><ul><li>The absolute value of the number.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">abs</span>(<span class="number">-2</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─abs(-2)─┐</span><br><span class="line">│ 2       │</span><br><span class="line">└─────────┘</span><br></pre></td></tr></table></figure><h2 id="divide"><a href="#divide" class="headerlink" title="divide"></a>divide</h2><p>Calculates the quotient of the numbers. The result type is always a floating-point type.</p><p>It is not integer division. For integer division, use the ‘intDiv’ function.</p><p>When dividing by zero you get ‘inf’, ‘-inf’, or ‘nan’.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">divide(a, b) # a <span class="operator">/</span> b operator</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>a</code> – The number.</li><li><code>b</code> – The number.</li></ul><p><strong>Returned value</strong></p><ul><li>Value in floating-point type</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> divide(<span class="number">50</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─divide(50, 2)─┐</span><br><span class="line">│ 2.5e+01       │</span><br><span class="line">└───────────────┘</span><br></pre></td></tr></table></figure><h2 id="gcd"><a href="#gcd" class="headerlink" title="gcd"></a>gcd</h2><p>Returns the greatest common divisor of the numbers.</p><p>An exception is thrown when dividing by zero or when dividing a minimal negative number by minus one.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcd(a, b)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>a</code> – The number.</li><li><code>b</code> – The number.</li></ul><p><strong>Returned value</strong></p><ul><li>The greatest common divisor of the numbers</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> gcd(<span class="number">27</span>,<span class="number">18</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─gcd(27, 18)─┐</span><br><span class="line">│ 9           │</span><br><span class="line">└─────────────┘</span><br></pre></td></tr></table></figure><h2 id="intDiv"><a href="#intDiv" class="headerlink" title="intDiv"></a>intDiv</h2><p>Calculates the quotient of the numbers. Divides into integers, rounding down (by the absolute value).</p><p>An exception is thrown when dividing by zero or when dividing a minimal negative number by minus one.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">intDiv(a, b)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>a</code> – The number.</li><li><code>b</code> – The number.</li></ul><p><strong>Returned value</strong></p><ul><li>Quotient of the numbers in integer</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> intDiv(<span class="number">10</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─intDiv(10, 2)─┐</span><br><span class="line">│ 5             │</span><br><span class="line">└───────────────┘</span><br></pre></td></tr></table></figure><h2 id="intDivOrZero"><a href="#intDivOrZero" class="headerlink" title="intDivOrZero"></a>intDivOrZero</h2><p>Differs from ‘intDiv’ in that it returns zero when dividing by zero or when dividing a minimal negative number by minus one.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">intDivOrZero(a, b)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>a</code> – The number.</li><li><code>b</code> – The number.</li></ul><p><strong>Returned value</strong></p><ul><li>Quotient of the numbers in integer</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> intDivOrZero(<span class="number">10</span>, <span class="number">-2</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─intDivOrZero(10, -2)─┐</span><br><span class="line">│ -5                   │</span><br><span class="line">└──────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="lcm"><a href="#lcm" class="headerlink" title="lcm"></a>lcm</h2><p>Returns the least common multiple of the numbers.</p><p>An exception is thrown when dividing by zero or when dividing a minimal negative number by minus one.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lcm(a, b)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>a</code> – The number.</li><li><code>b</code> – The number.</li></ul><p><strong>Returned value</strong></p><ul><li>The least greatest common divisor of the numbers</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> lcm(<span class="number">27</span>,<span class="number">18</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─lcm(27, 18)─┐</span><br><span class="line">│ 54          │</span><br><span class="line">└─────────────┘</span><br></pre></td></tr></table></figure><h2 id="min"><a href="#min" class="headerlink" title="min"></a>min</h2><p>Aggregate function that calculates the minimum across a group of values.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">min</span>(<span class="keyword">column</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>column</code> – The column name.</li></ul><p><strong>Returned value</strong></p><ul><li>The minimum number in group of values</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test.test_min(id Int32) ENGINE <span class="operator">=</span> CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> id;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.test_min(id) <span class="keyword">VALUES</span>(<span class="number">1</span>),(<span class="number">2</span>),(<span class="number">3</span>),(<span class="number">4</span>),(<span class="number">5</span>); <span class="comment">-- insert 1,2,3,4,5 to table</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">min</span>(id) <span class="keyword">FROM</span> test.test_min;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─min(id)─┐</span><br><span class="line">│       1 │</span><br><span class="line">└─────────┘</span><br></pre></td></tr></table></figure><h2 id="minus"><a href="#minus" class="headerlink" title="minus"></a>minus</h2><p>Calculates the difference. The result is always signed.</p><p>You can also calculate integer numbers from a date or date with time. The idea is the same – see above for ‘plus’.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minus(a, b), a <span class="operator">-</span> b operator </span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>a</code> – The number.</li><li><code>b</code> – The number.</li></ul><p><strong>Returned value</strong></p><ul><li>The difference between <code>a</code> and <code>b</code>.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> minus(<span class="number">10</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─minus(10, 3)─┐</span><br><span class="line">│ 7            │</span><br><span class="line">└──────────────┘</span><br></pre></td></tr></table></figure><h2 id="modulo"><a href="#modulo" class="headerlink" title="modulo"></a>modulo</h2><p>Calculates the remainder after division.</p><p>If arguments are floating-point numbers, they are pre-converted to integers by dropping the decimal portion.</p><p>The remainder is taken in the same sense as in C++. Truncated division is used for negative numbers.</p><p>An exception is thrown when dividing by zero or when dividing a minimal negative number by minus one.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modulo(a, b), a <span class="operator">%</span> b operator</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>a</code> – The number.</li><li><code>b</code> – The number.</li></ul><p><strong>Returned value</strong></p><ul><li>The remainder from a divide by b.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> modulo(<span class="number">10</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─modulo(10, 3)─┐</span><br><span class="line">│ 1             │</span><br><span class="line">└───────────────┘</span><br></pre></td></tr></table></figure><h2 id="multiply"><a href="#multiply" class="headerlink" title="multiply"></a>multiply</h2><p>Calculates the product of the numbers.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">multiply(a, b) # a <span class="operator">*</span> b operator </span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>a</code> – The number. </li><li><code>b</code> – The number.</li></ul><p><strong>Returned value</strong></p><ul><li>Product value of the numbers.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> multiply(<span class="number">3</span>,<span class="number">12</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─multiply(3, 12)─┐</span><br><span class="line">│ 36              │</span><br><span class="line">└─────────────────┘</span><br></pre></td></tr></table></figure><h2 id="negate"><a href="#negate" class="headerlink" title="negate"></a>negate</h2><p>Calculates a number with the reverse sign. The result is always signed.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">negate(a) # <span class="operator">-</span>a operator</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>a</code> – The number.</li></ul><p><strong>Returned value</strong></p><ul><li>The number with the reverse sign.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> negate(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─negate(20)─┐</span><br><span class="line">│ -20        │</span><br><span class="line">└────────────┘</span><br></pre></td></tr></table></figure><h2 id="plus"><a href="#plus" class="headerlink" title="plus"></a>plus</h2><p>Calculates the sum of the numbers.</p><p>You can also add integer numbers with a date or date and time. In the case of a date, adding an integer means adding the corresponding number of days. For a date with time, it means adding the corresponding number of seconds.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> plus(a, b) # a <span class="operator">+</span> b operator</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>a</code> – The number.</li><li><code>b</code> – The number.</li></ul><p><strong>Returned value</strong></p><ul><li>The sum of the numbers.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> plus(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─plus(1, 2)─┐</span><br><span class="line">│ 3          │</span><br><span class="line">└────────────┘</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> SQL_Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Array</title>
      <link href="/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/array/"/>
      <url>/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/array/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Notice:<br>Some of the examples below are referenced from <a href="https://clickhouse.com/docs/en/sql-reference/functions/">ClickHouse Documentation</a> but have been adapted and modified to work in ByteHouse.</p></blockquote><h2 id="array"><a href="#array" class="headerlink" title="array"></a>array</h2><p>Creates an array from the function arguments.</p><p>The arguments must be constants and have types that have the smallest common type. At least one argument must be passed, because otherwise it isn’t clear which type of array to create. That is, you can’t use this function to create an empty array (to do that, use the ‘emptyArray*’ function described above).</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(x1, …)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x1,...</code> – must be constants and have types that have the smallest common type</li></ul><p><strong>Returned value</strong></p><ul><li>Returns an ‘Array(T)’ type result, where ‘T’ is the smallest common type out of the passed arguments.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─array(1, 2, 3)─┐</span><br><span class="line">│ [1, 2, 3]      │</span><br><span class="line">└────────────────┘</span><br></pre></td></tr></table></figure><h2 id="arrayAll"><a href="#arrayAll" class="headerlink" title="arrayAll"></a>arrayAll</h2><p>Returns 1 if <code>func</code> returns something other than 0 for all the elements in <code>arr</code> . Otherwise, it returns 0.<br>Note that the <code>arrayAll</code> is a higher-order function. You can pass a lambda function to it as the first argument.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayAll([func,] arr1, …)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>func</code> – higher-order function which must return UInt8</li><li><code>arr1,..</code> - arrays as input for func</li></ul><p><strong>Returned value</strong></p><ul><li>Returns 1 if <code>func</code> returns something other than 0 for all the elements in <code>arr</code></li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayAll((x,y)<span class="operator">-</span><span class="operator">&gt;</span>x<span class="operator">=</span><span class="operator">=</span>y,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─arrayAll(lambda(tuple(x, y), equals(x, y)), [1, 2, 3], [4, 5, 6])─┐</span><br><span class="line">│ 0                                                                 │</span><br><span class="line">└───────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayAll((x,y)<span class="operator">-</span><span class="operator">&gt;</span>x<span class="operator">=</span><span class="operator">=</span>y,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─arrayAll(lambda(tuple(x, y), equals(x, y)), [1, 2, 3], [1, 2, 3])─┐</span><br><span class="line">│ 1                                                                 │</span><br><span class="line">└───────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="arrayConcat"><a href="#arrayConcat" class="headerlink" title="arrayConcat"></a>arrayConcat</h2><p>Combines arrays passed as arguments.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayConcat(arrays)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>arrays</code> – Arbitrary number of arguments of Array type.</li></ul><p><strong>Returned value</strong></p><ul><li>A combined array.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayConcat([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]) <span class="keyword">AS</span> res</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res───────────┐</span><br><span class="line">│ [1,2,3,4,5,6] │</span><br><span class="line">└───────────────┘</span><br></pre></td></tr></table></figure><h2 id="arrayCount"><a href="#arrayCount" class="headerlink" title="arrayCount"></a>arrayCount</h2><p>Returns the number of elements in the arr array for which func returns something other than 0. If ‘func’ is not specified, it returns the number of non-zero elements in the array.</p><p>Note that the <code>arrayCount</code> is a higher-order function. You can pass a lambda function to it as the first argument.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayCount([func,] arr1, …)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>func</code> – higher-order function which must return UInt8</li><li><code>arr1,..</code> - arrays as input for func</li></ul><p><strong>Returned value</strong></p><ul><li>number of elements in the arr array for which func returns something other than 0</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayCount((x,y)<span class="operator">-</span><span class="operator">&gt;</span>x<span class="operator">=</span><span class="operator">=</span>y,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─arrayCount(lambda(tuple(x, y), equals(x, y)), [1, 2, 3], [1, 5, 3])─┐</span><br><span class="line">│ 2                                                                   │</span><br><span class="line">└─────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="arrayCumSum"><a href="#arrayCumSum" class="headerlink" title="arrayCumSum"></a>arrayCumSum</h2><p>Returns an array of partial sums of elements in the source array (a running sum). If the <code>func</code> function is specified, then the values of the array elements are converted by this function before summing.</p><p>Note that the <code>arrayCumSum</code> is a higher-order function. You can pass a lambda function to it as the first argument.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayCumSum([func,] arr1, …)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>func</code> – higher-order function</li><li><code>arr1,..</code> - arrays as input for func</li></ul><p><strong>Returned value</strong></p><ul><li>An array of partial sums of elements in the source array</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayCumSum([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]) <span class="keyword">AS</span> res</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res──────────┐</span><br><span class="line">│ [1, 2, 3, 4] │</span><br><span class="line">└──────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayCumSum(x<span class="operator">-</span><span class="operator">&gt;</span>x<span class="operator">+</span><span class="number">1</span>,[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]) <span class="keyword">AS</span> res</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res──────────┐</span><br><span class="line">│ [2, 4, 6, 8] │</span><br><span class="line">└──────────────┘</span><br></pre></td></tr></table></figure><h2 id="arrayCumSumNonNegative"><a href="#arrayCumSumNonNegative" class="headerlink" title="arrayCumSumNonNegative"></a>arrayCumSumNonNegative</h2><p>Same as <code>arrayCumSum</code> , returns an array of partial sums of elements in the source array (a running sum). Different <code>arrayCumSum</code> , when returned value contains a value less than zero, the value is replace with zero and the subsequent calculation is performed with zero parameters. For example:</p><p>Note that the <code>arraySumNonNegative</code> is a higher-order function. You can pass a lambda function to it as the first argument.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayCumSumNonNegative([func,] arr1, …)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>func</code> – higher-order function</li><li><code>arr1,..</code> - arrays as input for func</li></ul><p><strong>Returned value</strong></p><ul><li>An array of partial sums of elements in the source array</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayCumSumNonNegative([<span class="number">1</span>, <span class="number">1</span>, <span class="number">-4</span>, <span class="number">1</span>]) <span class="keyword">AS</span> res</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res──────────┐</span><br><span class="line">│ [1, 2, 0, 1] │</span><br><span class="line">└──────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayCumSumNonNegative(x<span class="operator">-</span><span class="operator">&gt;</span>x<span class="number">-2</span>,[<span class="number">1</span>, <span class="number">1</span>, <span class="number">-4</span>, <span class="number">3</span>]) <span class="keyword">AS</span> res</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res──────────┐</span><br><span class="line">│ [0, 0, 0, 1] │</span><br><span class="line">└──────────────┘</span><br></pre></td></tr></table></figure><h2 id="arrayDifference"><a href="#arrayDifference" class="headerlink" title="arrayDifference"></a>arrayDifference</h2><p>Calculates the difference between adjacent array elements. Returns an array where the first element will be 0, the second is the difference between <code>a[1] - a[0]</code> , etc. The type of elements in the resulting array is determined by the type inference rules for subtraction (e.g. <code>UInt8</code> - <code>UInt8</code> &#x3D; <code>Int16</code> ).</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayDifference(<span class="keyword">array</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>array</code> – an Array.</li></ul><p><strong>Returned values</strong><br>Returns an array of differences between adjacent elements.<br>Type: UInt*, Int*, Float*.</p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayDifference([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─arrayDifference([1, 2, 3, 4])─┐</span><br><span class="line">│ [0, 1, 1, 1]                  │</span><br><span class="line">└───────────────────────────────┘</span><br></pre></td></tr></table></figure><p>Example of the overflow due to result type Int64:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayDifference([<span class="number">0</span>, <span class="number">10000000000000000000</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─arrayDifference([0, 10000000000000000000])─┐</span><br><span class="line">│ [0, -8446744073709551616]                  │</span><br><span class="line">└────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="arrayDistinct"><a href="#arrayDistinct" class="headerlink" title="arrayDistinct"></a>arrayDistinct</h2><p>Takes an array, returns an array containing the distinct elements only.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayDistinct(<span class="keyword">array</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>array</code> – an Array.</li></ul><p><strong>Returned values</strong></p><ul><li>Returns an array containing the distinct elements.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayDistinct([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─arrayDistinct([1, 2, 2, 3, 1])─┐</span><br><span class="line">│ [1, 2, 3]                      │</span><br><span class="line">└────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="arrayElement"><a href="#arrayElement" class="headerlink" title="arrayElement"></a>arrayElement</h2><p>Get the element with the index <code>n</code> from the array <code>arr</code> . <code>n</code> must be any integer type.<br>Indexes in an array begin from one.</p><p>Negative indexes are supported. In this case, it selects the corresponding element numbered from the end. For example, <code>arr[-1]</code> is the last item in the array.</p><p>If the index falls outside of the bounds of an array, it returns some default value (0 for numbers, an empty string for strings, etc.), except for the case with a non-constant array and a constant index 0 (in this case there will be an error <code>Array indices are 1-based</code> ).</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayElement(<span class="keyword">array</span>, n)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>array</code> – an Array. </li><li><code>n</code> - an Index in the array.</li></ul><p><strong>Returned values</strong></p><ul><li>Get the element with the index <code>n</code> from the array <code>arr</code></li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayElement([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>],<span class="number">3</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─arrayElement([1, 2, 2, 3, 1], 3)─┐</span><br><span class="line">│ 2                                │</span><br><span class="line">└──────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="arrayEnumerate"><a href="#arrayEnumerate" class="headerlink" title="arrayEnumerate"></a>arrayEnumerate</h2><p>Returns the array [1, 2, 3, … ]</p><p>This function is normally used with ARRAY JOIN. It allows counting something just once for each array after applying ARRAY JOIN.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayEnumerate(arr)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>arr</code> – an Array.</li></ul><p><strong>Returned values</strong></p><ul><li>Returns the array [1, 2, 3, … ]</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> number, num <span class="keyword">FROM</span> numbers(<span class="number">5</span>) <span class="keyword">ARRAY</span> <span class="keyword">JOIN</span> arrayEnumerate([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="keyword">as</span> num</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">┌─number─┬─num─┐</span><br><span class="line">│ 0      │ 1   │</span><br><span class="line">│ 0      │ 2   │</span><br><span class="line">│ 0      │ 3   │</span><br><span class="line">│ 1      │ 1   │</span><br><span class="line">│ 1      │ 2   │</span><br><span class="line">│ 1      │ 3   │</span><br><span class="line">│ 2      │ 1   │</span><br><span class="line">│ 2      │ 2   │</span><br><span class="line">│ 2      │ 3   │</span><br><span class="line">│ 3      │ 1   │</span><br><span class="line">│ 3      │ 2   │</span><br><span class="line">│ 3      │ 3   │</span><br><span class="line">│ 4      │ 1   │</span><br><span class="line">│ 4      │ 2   │</span><br><span class="line">│ 4      │ 3   │</span><br><span class="line">└────────┴─────┘</span><br></pre></td></tr></table></figure><h2 id="arrayEnumerateDense"><a href="#arrayEnumerateDense" class="headerlink" title="arrayEnumerateDense"></a>arrayEnumerateDense</h2><p>Returns an array of the same size as the source array, indicating where each element first appears in the source array.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayEnumerateDense(arr)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>arr</code> – an Array.</li></ul><p><strong>Returned values</strong></p><ul><li>An array where each element first appears in the source array</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayEnumerateDense([<span class="number">10</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">30</span>])</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─arrayEnumerateDense([10, 20, 10, 30])─┐</span><br><span class="line">│ [1, 2, 1, 3]                          │</span><br><span class="line">└───────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="arrayEnumerateUniq"><a href="#arrayEnumerateUniq" class="headerlink" title="arrayEnumerateUniq"></a>arrayEnumerateUniq</h2><p>Returns an array the same size as the source array, indicating for each element what its position is among elements with the same value.</p><p>For example: arrayEnumerateUniq([10, 20, 10, 30]) &#x3D; [1, 1, 2, 1].</p><p>This function is useful when using ARRAY JOIN and aggregation of array elements.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayEnumerateUniq(arr, …)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>arr</code> – an Array.</li></ul><p><strong>Returned values</strong></p><ul><li>Returns an array the same size as the source array, indicating for each element what its position is among elements with the same value.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayEnumerateUniq([<span class="number">10</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">30</span>]) <span class="keyword">as</span> res</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res──────────┐</span><br><span class="line">│ [1, 1, 2, 1] │</span><br><span class="line">└──────────────┘</span><br></pre></td></tr></table></figure><p>The arrayEnumerateUniq function can take multiple arrays of the same size as arguments. In this case, uniqueness is considered for tuples of elements in the same positions in all the arrays.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayEnumerateUniq([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]) <span class="keyword">AS</span> res</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res────────────────┐</span><br><span class="line">│ [1, 2, 1, 1, 2, 1] │</span><br><span class="line">└────────────────────┘</span><br></pre></td></tr></table></figure><p>This is necessary when using ARRAY JOIN with a nested data structure and further aggregation across multiple elements in this structure.</p><h2 id="arrayExists"><a href="#arrayExists" class="headerlink" title="arrayExists"></a>arrayExists</h2><p>Returns 1 if there is at least one element in <code>arr</code> for which <code>func</code> returns something other than 0. Otherwise, it returns 0.</p><p>Note that the <code>arrayExists</code> is a higher-order function.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayExists([func,] arr1, …)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>func</code> – higher-order function which must return UInt8</li><li><code>arr1,..</code> - arrays as input for func</li></ul><p><strong>Returned values</strong></p><ul><li>Returns 1 if there is at least one element in <code>arr</code> for which <code>func</code> returns something other than 0. Otherwise, it returns 0.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayExists((x,y)<span class="operator">-</span><span class="operator">&gt;</span>x<span class="operator">=</span><span class="operator">=</span>y,[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>],[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─arrayExists(lambda(tuple(x, y), equals(x, y)), [1, 2, 2, 3, 1], [4, 5, 6, 7, 8])─┐</span><br><span class="line">│ 0                                                                                │</span><br><span class="line">└──────────────────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayExists((x,y)<span class="operator">-</span><span class="operator">&gt;</span>x<span class="operator">=</span><span class="operator">=</span>y,[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>],[<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─arrayExists(lambda(tuple(x, y), equals(x, y)), [1, 2, 2, 3, 1], [1, 5, 6, 7, 8])─┐</span><br><span class="line">│ 1                                                                                │</span><br><span class="line">└──────────────────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="arrayFilter"><a href="#arrayFilter" class="headerlink" title="arrayFilter"></a>arrayFilter</h2><p>Note that the <code>arrayFilter</code> is a higher-order function. You must pass a lambda function to it as the first argument, and it can’t be omitted.<br>Returns an array containing only the elements in <code>arr1</code> for which <code>func</code> returns something other than 0.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayFilter(func, arr1, …)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>func</code> – higher-order function which must return UInt8</li><li><code>arr1,..</code> - arrays as input for func</li></ul><p><strong>Returned values</strong></p><ul><li>Returns an array containing only the elements in <code>arr1</code> for which <code>func</code> returns something other than 0.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayFilter(x <span class="operator">-</span><span class="operator">&gt;</span> x <span class="keyword">LIKE</span> <span class="string">&#x27;%World%&#x27;</span>, [<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;abc World&#x27;</span>]) <span class="keyword">AS</span> res</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res───────────┐</span><br><span class="line">│ [&#x27;abc World&#x27;] │</span><br><span class="line">└───────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayFilter((i, x) <span class="operator">-</span><span class="operator">&gt;</span> x <span class="keyword">LIKE</span> <span class="string">&#x27;%World%&#x27;</span>, arrayEnumerate(arr), [<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;abc World&#x27;</span>] <span class="keyword">AS</span> arr) <span class="keyword">AS</span> res</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res─┐</span><br><span class="line">│ [2] │</span><br><span class="line">└─────┘</span><br></pre></td></tr></table></figure><p>[block:api-header]<br>{<br>  “title”: “arrayFirst”<br>}<br>[&#x2F;block]<br>Returns the first element in the <code>arr1</code> array for which <code>func</code> returns something other than 0.<br>Note that the <code>arrayFirst</code> is a higher-order function. You must pass a lambda function to it as the first argument, and it can’t be omitted.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayFirst(func, arr1, …)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>func</code> – higher-order function which must return UInt8</li><li><code>arr1,..</code> - arrays as input for func</li></ul><p><strong>Returned values</strong></p><ul><li>Returns the first element in the <code>arr1</code> array for which <code>func</code> returns something other than 0.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayFirst(x <span class="operator">-</span><span class="operator">&gt;</span> x <span class="keyword">LIKE</span> <span class="string">&#x27;%World%&#x27;</span>, [<span class="string">&#x27;Hello World&#x27;</span>, <span class="string">&#x27;abc World&#x27;</span>]) <span class="keyword">AS</span> res</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res─────────┐</span><br><span class="line">│ Hello World │</span><br><span class="line">└─────────────┘</span><br></pre></td></tr></table></figure><h2 id="arrayFirstIndex"><a href="#arrayFirstIndex" class="headerlink" title="arrayFirstIndex"></a>arrayFirstIndex</h2><p>Returns the index of the first element in the <code>arr1</code> array for which <code>func</code> returns something other than 0.</p><p>Note that the <code>arrayFirstIndex</code> is a higher-order function. You must pass a lambda function to it as the first argument, and it can’t be omitted.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayFirstIndex(func, arr1, …) </span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>func</code> – higher-order function which must return UInt8</li><li><code>arr1,..</code> - arrays as input for func</li></ul><p><strong>Returned values</strong></p><ul><li>Returns the index of the first element in the <code>arr1</code> array for which <code>func</code> returns something other than 0.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayFirstIndex(x <span class="operator">-</span><span class="operator">&gt;</span> x <span class="keyword">LIKE</span> <span class="string">&#x27;%World%&#x27;</span>, [<span class="string">&#x27;Hello World&#x27;</span>, <span class="string">&#x27;abc World&#x27;</span>]) <span class="keyword">AS</span> res</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res─┐</span><br><span class="line">│ 1   │</span><br><span class="line">└─────┘</span><br></pre></td></tr></table></figure><h2 id="arrayIntersect"><a href="#arrayIntersect" class="headerlink" title="arrayIntersect"></a>arrayIntersect</h2><p>Takes multiple arrays, returns an array with elements that are present in all source arrays. Elements order in the resulting array is the same as in the first array.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayIntersect(arr)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>arr1,..</code> - multiple arrays</li></ul><p><strong>Returned values</strong></p><ul><li>Returns an array with elements that are present in all source arrays</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    arrayIntersect([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">3</span>]) <span class="keyword">AS</span> no_intersect,</span><br><span class="line">    arrayIntersect([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">4</span>]) <span class="keyword">AS</span> <span class="keyword">intersect</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─no_intersect─┬─intersect─┐</span><br><span class="line">│ []           │ [1]       │</span><br><span class="line">└──────────────┴───────────┘</span><br></pre></td></tr></table></figure><h2 id="arrayJoin"><a href="#arrayJoin" class="headerlink" title="arrayJoin"></a>arrayJoin</h2><p>This is a very unusual function.<br>Normal functions do not change a set of rows, but just change the values in each row (map).<br>Aggregate functions compress a set of rows (fold or reduce).<br>The ‘arrayJoin’ function takes each row and generates a set of rows (unfold).</p><p>This function takes an array as an argument, and propagates the source row to multiple rows for the number of elements in the array.</p><p>All the values in columns are simply copied, except the values in the column where this function is applied; it is replaced with the corresponding array value.</p><p>A query can use multiple <code>arrayJoin</code> functions. In this case, the transformation is performed multiple times.</p><p>Note the ARRAY JOIN syntax in the SELECT query, which provides broader possibilities.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayJoin(arr)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>arr</code> - an Array</li></ul><p><strong>Returned values</strong></p><ul><li>Propagates the source row to multiple rows for the number of elements in the array.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayJoin([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="keyword">AS</span> src) <span class="keyword">AS</span> dst, <span class="string">&#x27;Hello&#x27;</span>, src</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">┌─dst─┬─&#x27;Hello&#x27;─┬─src───────┐</span><br><span class="line">│ 1   │ Hello   │ [1, 2, 3] │</span><br><span class="line">│ 2   │ Hello   │ [1, 2, 3] │</span><br><span class="line">│ 3   │ Hello   │ [1, 2, 3] │</span><br><span class="line">└─────┴─────────┴───────────┘</span><br></pre></td></tr></table></figure><h2 id="arrayMap"><a href="#arrayMap" class="headerlink" title="arrayMap"></a>arrayMap</h2><p>Returns an array obtained from the original application of the <code>func</code> function to each element in the <code>arr</code> array.</p><p>Note that the <code>arrayMap</code> is a higher-order function. You must pass a lambda function to it as the first argument, and it can’t be omitted.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayMap(func, arr1, …)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>func</code>- higher-order function</li><li><code>arr1,..</code> - multiple arrays</li></ul><p><strong>Returned values</strong></p><ul><li>Returns an array obtained from the original application of the <code>func</code> function to each element in the <code>arr</code> array.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayMap(x <span class="operator">-</span><span class="operator">&gt;</span> (x <span class="operator">+</span> <span class="number">2</span>), [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="keyword">as</span> res;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res───────┐</span><br><span class="line">│ [3, 4, 5] │</span><br><span class="line">└───────────┘</span><br></pre></td></tr></table></figure><p>The following example shows how to create a tuple of elements from different arrays:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayMap((x, y) <span class="operator">-</span><span class="operator">&gt;</span> (x, y), [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]) <span class="keyword">AS</span> res</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res──────────────────────┐</span><br><span class="line">│ [(1, 4), (2, 5), (3, 6)] │</span><br><span class="line">└──────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="arrayPopBack"><a href="#arrayPopBack" class="headerlink" title="arrayPopBack"></a>arrayPopBack</h2><p>Removes the last item from the array.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayPopBack(<span class="keyword">array</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>array</code> – Array.</li></ul><p><strong>Returned values</strong></p><ul><li><code>array</code> – An Array removes the last item from the original array.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayPopBack([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="keyword">AS</span> res;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res────┐</span><br><span class="line">│ [1, 2] │</span><br><span class="line">└────────┘</span><br></pre></td></tr></table></figure><h2 id="arrayPopFront"><a href="#arrayPopFront" class="headerlink" title="arrayPopFront"></a>arrayPopFront</h2><p>Removes the first item from the array.</p><p><strong>Arguments</strong></p><ul><li><code>array</code> – Array.</li></ul><p><strong>Returned values</strong></p><ul><li><code>array</code> – An Array removes the first item from the original array.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayPopFront([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="keyword">AS</span> res;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res────┐</span><br><span class="line">│ [2, 3] │</span><br><span class="line">└────────┘</span><br></pre></td></tr></table></figure><h2 id="arrayPushBack"><a href="#arrayPushBack" class="headerlink" title="arrayPushBack"></a>arrayPushBack</h2><p>Adds one item to the end of the array.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayPushBack(<span class="keyword">array</span>, single_value)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>array</code> – Array. </li><li><code>single_value</code> – A single value. Only numbers can be added to an array with numbers, and only strings can be added to an array of strings. When adding numbers, ByteHouse automatically sets the <code>single_value</code> type for the data type of the array. Can be <code>NULL</code> . The function adds a <code>NULL</code> element to an array, and the type of array elements converts to <code>Nullable</code> .</li></ul><p><strong>Returned values</strong></p><ul><li><code>array</code> – An Array with the new item adds to the end of original array.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayPushBack([<span class="string">&#x27;a&#x27;</span>], <span class="string">&#x27;b&#x27;</span>) <span class="keyword">AS</span> res, toTypeName(arrayPushBack([<span class="string">&#x27;a&#x27;</span>], <span class="string">&#x27;b&#x27;</span>)) <span class="keyword">as</span> type;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">┌─res────┬─type──────────┐│ [a, b] │ Array(String) │└────────┴───────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayPushBack([<span class="string">&#x27;a&#x27;</span>], <span class="keyword">NULL</span>) <span class="keyword">AS</span> res, toTypeName(arrayPushBack([<span class="string">&#x27;a&#x27;</span>], <span class="keyword">NULL</span>)) <span class="keyword">as</span> type</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res───────┬─type────────────────────┐</span><br><span class="line">│ [a, ᴺᵁᴸᴸ] │ Array(Nullable(String)) │</span><br><span class="line">└───────────┴─────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="arrayPushFront"><a href="#arrayPushFront" class="headerlink" title="arrayPushFront"></a>arrayPushFront</h2><p>Adds one element to the beginning of the array.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayPushFront(<span class="keyword">array</span>, single_value)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>array</code> – Array. </li><li><code>single_value</code> – A single value. Only numbers can be added to an array with numbers, and only strings can be added to an array of strings. When adding numbers, ByteHouse automatically sets the <code>single_value</code> type for the data type of the array. Can be <code>NULL</code> . The function adds a <code>NULL</code> element to an array, and the type of array elements converts to <code>Nullable</code> .</li></ul><p><strong>Returned values</strong></p><ul><li><code>array</code> – An Array with the new item adds to the beginning of original array.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayPushFront([<span class="string">&#x27;b&#x27;</span>], <span class="string">&#x27;a&#x27;</span>) <span class="keyword">AS</span> res, toTypeName(arrayPushFront([<span class="string">&#x27;b&#x27;</span>], <span class="string">&#x27;a&#x27;</span>)) <span class="keyword">as</span> type;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res────┬─type──────────┐</span><br><span class="line">│ [a, b] │ Array(String) │</span><br><span class="line">└────────┴───────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayPushFront([<span class="string">&#x27;b&#x27;</span>], <span class="keyword">NULL</span>) <span class="keyword">AS</span> res, toTypeName(arrayPushFront([<span class="string">&#x27;b&#x27;</span>], <span class="keyword">NULL</span>)) <span class="keyword">as</span> type;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res───────┬─type────────────────────┐</span><br><span class="line">│ [ᴺᵁᴸᴸ, b] │ Array(Nullable(String)) │</span><br><span class="line">└───────────┴─────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="arrayReduce"><a href="#arrayReduce" class="headerlink" title="arrayReduce"></a>arrayReduce</h2><p>Applies an aggregate function to array elements and returns its result. The name of the aggregation function is passed as a string in single quotes <code>&#39;max&#39;</code> , <code>&#39;sum&#39;</code> . When using parametric aggregate functions, the parameter is indicated after the function name in parentheses <code>&#39;uniqUpTo(6)&#39;</code> .</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayReduce(agg_func, arr1, arr2, ..., arrN)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>agg_func</code> — The name of an aggregate function which should be a constant string. </li><li><code>arr</code> — Any number of array type columns as the parameters of the aggregation function.</li></ul><p><strong>Returned value</strong></p><ul><li>Result of aggregate function to array elements.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayReduce(<span class="string">&#x27;max&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">┌─arrayReduce(&#x27;max&#x27;, [1, 2, 3])─┐│                             3 │└───────────────────────────────┘</span><br></pre></td></tr></table></figure><p>If an aggregate function takes multiple arguments, then this function must be applied to multiple arrays of the same size.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayReduce(<span class="string">&#x27;maxIf&#x27;</span>, [<span class="number">3</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">0</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">┌─arrayReduce(&#x27;maxIf&#x27;, [3, 5], [1, 0])─┐│                                    3 │└──────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>Example with a parametric aggregate function.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayReduce(<span class="string">&#x27;uniqUpTo(3)&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">┌─arrayReduce(&#x27;uniqUpTo(3)&#x27;, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])─┐│                                                           4 │└─────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="arrayResize"><a href="#arrayResize" class="headerlink" title="arrayResize"></a>arrayResize</h2><p>Changes the length of the array.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayResize(<span class="keyword">array</span>, size[, extender])</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>array</code> — Array. </li><li><code>size</code> — Required length of the array. <ul><li>If <code>size</code> is less than the original size of the array, the array is truncated from the right. </li><li>If <code>size</code> is larger than the initial size of the array, the array is extended to the right with <code>extender</code> values or default values for the data type of the array items.</li></ul></li><li><code>extender</code> — Value for extending an array. Can be <code>NULL</code> .</li></ul><p><strong>Returned value</strong></p><ul><li>An array of length <code>size</code> .</li></ul><p><strong>Examples of calls</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayResize([<span class="number">1</span>], <span class="number">3</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─arrayResize([1], 3)─┐</span><br><span class="line">│ [1, 0, 0]           │</span><br><span class="line">└─────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayResize([<span class="number">1</span>], <span class="number">3</span>, <span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─arrayResize([1], 3, NULL)─┐</span><br><span class="line">│ [1, ᴺᵁᴸᴸ, ᴺᵁᴸᴸ]           │</span><br><span class="line">└───────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="arrayReverse"><a href="#arrayReverse" class="headerlink" title="arrayReverse"></a>arrayReverse</h2><p>Returns an array of the same size as the original array containing the elements in reverse order.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayReverse(<span class="keyword">array</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>array</code> — Array.</li></ul><p><strong>Returned value</strong></p><ul><li>Reversed orginal array.</li></ul><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayReverse([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─arrayReverse([1, 2, 3])─┐</span><br><span class="line">│ [3, 2, 1]               │</span><br><span class="line">└─────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="arrayReverseSort"><a href="#arrayReverseSort" class="headerlink" title="arrayReverseSort"></a>arrayReverseSort</h2><p>Sorts the elements of the <code>arr</code> array in descending order. If the <code>func</code> function is specified, <code>arr</code> is sorted according to the result of the <code>func</code> function applied to the elements of the array, and then the sorted array is reversed. If <code>func</code> accepts multiple arguments, the <code>arrayReverseSort</code> function is passed several arrays that the arguments of <code>func</code> will correspond to. Detailed examples are shown at the end of <code>arrayReverseSort</code> description.</p><p>Note that the <code>arrayReverseSort</code> is a higher-order function. You can pass a lambda function to it as the first argument. Example is shown below.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayReverseSort([func,] arr, …)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>func</code> - sort function.</li><li><code>array</code> — Array.</li></ul><p><strong>Returned value</strong></p><ul><li>Reversed sorted array.</li></ul><p><strong>Examples</strong><br>Example of integer values sorting:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayReverseSort([<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">0</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─arrayReverseSort([1, 3, 3, 0])─┐</span><br><span class="line">│ [3, 3, 1, 0]                   │</span><br><span class="line">└────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>Example of string values sorting:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayReverseSort([<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;!&#x27;</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─arrayReverseSort([&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;!&#x27;])─┐</span><br><span class="line">│ [world, hello, !]                         │</span><br><span class="line">└───────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>Consider the following sorting order for the <code>NULL</code> , <code>NaN</code> and <code>Inf</code> values:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayReverseSort([<span class="number">1</span>, nan, <span class="number">2</span>, <span class="keyword">NULL</span>, <span class="number">3</span>, nan, <span class="number">-4</span>, <span class="keyword">NULL</span>, inf, <span class="operator">-</span>inf]) <span class="keyword">as</span> res;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res─────────────────────────────────────────────────────────────┐</span><br><span class="line">│ [+Inf, 3e+00, 2e+00, 1e+00, -4e+00, -Inf, NaN, NaN, ᴺᵁᴸᴸ, ᴺᵁᴸᴸ] │</span><br><span class="line">└─────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><ul><li><code>Inf</code> values are first in the array. </li><li><code>NULL</code> values are last in the array. </li><li><code>NaN</code> values are right before <code>NULL</code> . </li><li><code>-Inf</code> values are right before <code>NaN</code> .</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayReverseSort((x) <span class="operator">-</span><span class="operator">&gt;</span> <span class="operator">-</span>x, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="keyword">as</span> res;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res───────┐</span><br><span class="line">│ [1, 2, 3] │</span><br><span class="line">└───────────┘</span><br></pre></td></tr></table></figure><p>The array is sorted in the following way:</p><ol><li>At first, the source array ([1, 2, 3]) is sorted according to the result of the lambda function applied to the elements of the array. The result is an array [3, 2, 1]. </li><li>Array that is obtained on the previous step, is reversed. So, the final result is [1, 2, 3].</li></ol><p>The lambda function can accept multiple arguments. In this case, you need to pass the <code>arrayReverseSort</code> function several arrays of identical length that the arguments of lambda function will correspond to. The resulting array will consist of elements from the first input array; elements from the next input array(s) specify the sorting keys. For example:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayReverseSort((x, y) <span class="operator">-</span><span class="operator">&gt;</span> y, [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>], [<span class="number">2</span>, <span class="number">1</span>]) <span class="keyword">as</span> res;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res────────────┐</span><br><span class="line">│ [hello, world] │</span><br><span class="line">└────────────────┘</span><br></pre></td></tr></table></figure><p>In this example, the array is sorted in the following way:</p><ol><li>At first, the source array ([‘hello’, ‘world’]) is sorted according to the result of the lambda function applied to the elements of the arrays. The elements that are passed in the second array ([2, 1]), define the sorting keys for corresponding elements from the source array. The result is an array [‘world’, ‘hello’]. </li><li>Array that was sorted on the previous step, is reversed. So, the final result is [‘hello’, ‘world’].</li></ol><p>Other examples are shown below.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayReverseSort((x, y) <span class="operator">-</span><span class="operator">&gt;</span> y, [<span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>], [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]) <span class="keyword">AS</span> res;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res───────┐</span><br><span class="line">│ [5, 3, 4] │</span><br><span class="line">└───────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayReverseSort((x, y) <span class="operator">-</span><span class="operator">&gt;</span> <span class="operator">-</span>y, [<span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="keyword">AS</span> res;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res───────┐</span><br><span class="line">│ [4, 3, 5] │</span><br><span class="line">└───────────┘</span><br></pre></td></tr></table></figure><h2 id="arraySlice"><a href="#arraySlice" class="headerlink" title="arraySlice"></a>arraySlice</h2><p>Returns a slice of the array.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arraySlice(<span class="keyword">array</span>, <span class="keyword">offset</span>[, length])</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>array</code> – Array of data. </li><li><code>offset</code> – Indent from the edge of the array. A positive value indicates an offset on the left, and a negative value is an indent on the right. Numbering of the array items begins with 1. </li><li><code>length</code> – The length of the required slice. If you specify a negative value, the function returns an open slice <code>[offset, array_length - length)</code> . If you omit the value, the function returns the slice <code>[offset, the_end_of_array]</code> .</li></ul><p><strong>Returned value</strong></p><ul><li>Slice of array.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arraySlice([<span class="number">1</span>, <span class="number">2</span>, <span class="keyword">NULL</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="number">2</span>, <span class="number">3</span>) <span class="keyword">AS</span> res;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res──────────┐</span><br><span class="line">│ [2, ᴺᵁᴸᴸ, 4] │</span><br><span class="line">└──────────────┘</span><br></pre></td></tr></table></figure><p>Array elements set to <code>NULL</code> are handled as normal values.</p><h2 id="arraySort"><a href="#arraySort" class="headerlink" title="arraySort"></a>arraySort</h2><p>Sorts the elements of the <code>arr</code> array in ascending order. If the <code>func</code> function is specified, sorting order is determined by the result of the <code>func</code> function applied to the elements of the array. If <code>func</code> accepts multiple arguments, the <code>arraySort</code> function is passed several arrays that the arguments of <code>func</code> will correspond to. Detailed examples are shown at the end of <code>arraySort</code> description.</p><p>Note that <code>arraySort</code> is a higher-order function. You can pass a lambda function to it as the first argument. In this case, sorting order is determined by the result of the lambda function applied to the elements of the array.</p><p>To improve sorting efficiency, the <a href="https://en.wikipedia.org/wiki/Schwartzian_transform">Schwartzian transform</a> is used.<br><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arraySort([func,] arr, …)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>func</code> - sort function.</li><li><code>array</code> — Array.</li></ul><p><strong>Returned value</strong></p><ul><li>Sorted array.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arraySort([<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">0</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─arraySort([1, 3, 3, 0])─┐</span><br><span class="line">│ [0, 1, 3, 3]            │</span><br><span class="line">└─────────────────────────┘</span><br></pre></td></tr></table></figure><p>Example of string values sorting:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arraySort([<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;!&#x27;</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─arraySort([&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;!&#x27;])─┐</span><br><span class="line">│ [!, hello, world]                  │</span><br><span class="line">└────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>Consider the following sorting order for the <code>NULL</code> , <code>NaN</code> and <code>Inf</code> values:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arraySort([<span class="number">1</span>, nan, <span class="number">2</span>, <span class="keyword">NULL</span>, <span class="number">3</span>, nan, <span class="number">-4</span>, <span class="keyword">NULL</span>, inf, <span class="operator">-</span>inf]);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">┌─arraySort([1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf])───────┐│ [-Inf, -4e+00, 1e+00, 2e+00, 3e+00, +Inf, NaN, NaN, ᴺᵁᴸᴸ, ᴺᵁᴸᴸ] │└─────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><ul><li><code>-Inf</code> values are first in the array. </li><li><code>NULL</code> values are last in the array. </li><li><code>NaN</code> values are right before <code>NULL</code> . </li><li><code>Inf</code> values are right before <code>NaN</code> .</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arraySort((x) <span class="operator">-</span><span class="operator">&gt;</span> <span class="operator">-</span>x, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="keyword">as</span> res;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res───────┐</span><br><span class="line">│ [3, 2, 1] │</span><br><span class="line">└───────────┘</span><br></pre></td></tr></table></figure><p>For each element of the source array, the lambda function returns the sorting key, that is, [1 –&gt; -1, 2 –&gt; -2, 3 –&gt; -3]. Since the <code>arraySort</code> function sorts the keys in ascending order, the result is [3, 2, 1]. Thus, the <code>(x) –&gt; -x</code> lambda function sets the descending order in a sorting.</p><p>The lambda function can accept multiple arguments. In this case, you need to pass the <code>arraySort</code> function several arrays of identical length that the arguments of lambda function will correspond to. The resulting array will consist of elements from the first input array; elements from the next input array(s) specify the sorting keys. For example:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arraySort((x, y) <span class="operator">-</span><span class="operator">&gt;</span> y, [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>], [<span class="number">2</span>, <span class="number">1</span>]) <span class="keyword">as</span> res;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">┌─res────────────┐│ [world, hello] │└────────────────┘</span><br></pre></td></tr></table></figure><p>Here, the elements that are passed in the second array ([2, 1]) define a sorting key for the corresponding element from the source array ([‘hello’, ‘world’]), that is, [‘hello’ –&gt; 2, ‘world’ –&gt; 1]. Since the lambda function does not use <code>x</code> , actual values of the source array do not affect the order in the result. So, ‘hello’ will be the second element in the result, and ‘world’ will be the first.</p><p>Other examples are shown below.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arraySort((x, y) <span class="operator">-</span><span class="operator">&gt;</span> y, [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]) <span class="keyword">as</span> res;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res───────┐</span><br><span class="line">│ [2, 1, 0] │</span><br><span class="line">└───────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arraySort((x, y) <span class="operator">-</span><span class="operator">&gt;</span> <span class="operator">-</span>y, [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="keyword">as</span> res;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res───────┐</span><br><span class="line">│ [2, 1, 0] │</span><br><span class="line">└───────────┘</span><br></pre></td></tr></table></figure><h2 id="arraySum"><a href="#arraySum" class="headerlink" title="arraySum"></a>arraySum</h2><p>Returns the sum of elements in the source array.</p><p>If the <code>func</code> function is specified, returns the sum of elements converted by this function.</p><p>Note that the <code>arraySum</code> is a higher-order function. You can pass a lambda function to it as the first argument.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arraySum([func,] arr)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>func</code> — higher-order function. </li><li><code>arr</code> — Array.</li></ul><p><strong>Returned value</strong></p><ul><li>The sum of the function values (or the array sum).<br>Type: <ul><li>for decimal numbers in source array (or for converted values, if <code>func</code> is specified) Decimal128 Float64</li><li>for numeric unsigned UInt64</li><li>and for numeric signed Int64</li></ul></li></ul><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arraySum([<span class="number">2</span>, <span class="number">3</span>]) <span class="keyword">AS</span> res;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res─┐</span><br><span class="line">│ 5   │</span><br><span class="line">└─────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arraySum(x <span class="operator">-</span><span class="operator">&gt;</span> x<span class="operator">*</span>x, [<span class="number">2</span>, <span class="number">3</span>]) <span class="keyword">AS</span> res;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res─┐</span><br><span class="line">│ 13  │</span><br><span class="line">└─────┘</span><br></pre></td></tr></table></figure><h2 id="arrayUniq"><a href="#arrayUniq" class="headerlink" title="arrayUniq"></a>arrayUniq</h2><p>If one argument is passed, it counts the number of different elements in the array.</p><p>If multiple arguments are passed, it counts the number of different tuples of elements at corresponding positions in multiple arrays.</p><p>If you want to get a list of unique items in an array, you can use <code>arrayReduce(‘groupUniqArray’, arr)</code> .</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayUniq(arr, …)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>arr</code> — Array.</li></ul><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayUniq([<span class="number">2</span>, <span class="number">3</span>]) <span class="keyword">AS</span> res;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res─┐</span><br><span class="line">│ 2   │</span><br><span class="line">└─────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> arrayUniq([<span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="keyword">AS</span> res</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res─┐</span><br><span class="line">│ 3   │</span><br><span class="line">└─────┘</span><br></pre></td></tr></table></figure><p>There are three different tuples (2,1),(3,2),(3,3).</p><h2 id="countEqual"><a href="#countEqual" class="headerlink" title="countEqual"></a>countEqual</h2><p>Returns the number of elements in the array equal to x. Equivalent to arrayCount (elem -&gt; elem &#x3D; x, arr).</p><p><code>NULL</code> elements are handled as separate values.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">countEqual(arr, x)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>arr</code> — Array. </li><li><code>x</code> - pivot element</li></ul><p><strong>Returned value</strong></p><ul><li>Number of elements in the array equal to x.</li></ul><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> countEqual([<span class="number">1</span>, <span class="number">2</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>], <span class="keyword">NULL</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─countEqual([1, 2, NULL, NULL], NULL)─┐</span><br><span class="line">│ 2                                    │</span><br><span class="line">└──────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="flatten"><a href="#flatten" class="headerlink" title="flatten"></a>flatten</h2><p>Converts an array of arrays to a flat array.Function:- Applies to any depth of nested arrays. - Does not change arrays that are already flat. The flattened array contains all the elements from all source arrays.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flatten(array_of_arrays)</span><br></pre></td></tr></table></figure><p>Alias: <code>flatten</code> .</p><p><strong>Arguments</strong></p><ul><li><code>array_of_arrays</code> — Array of arrays. For example, <code>[[1,2,3], [4,5]]</code> .</li></ul><p><strong>Returned value</strong></p><ul><li>The flattened array.</li></ul><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> flatten([[[<span class="number">1</span>]], [[<span class="number">2</span>], [<span class="number">3</span>]]]);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─flatten(array(array([1]), array([2], [3])))─┐</span><br><span class="line">│ [1, 2, 3]                                   │</span><br><span class="line">└─────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="groupArrayInsertAt"><a href="#groupArrayInsertAt" class="headerlink" title="groupArrayInsertAt"></a>groupArrayInsertAt</h2><p>Inserts a value into the array at the specified position.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupArrayInsertAt(default_x, size)(x, pos)</span><br></pre></td></tr></table></figure><p>If in one query several values are inserted into the same position, the function behaves in the following ways:</p><ul><li>If a query is executed in a single thread, the first one of the inserted values is used.</li><li>If a query is executed in multiple threads, the resulting value is an undetermined one of the inserted values.</li></ul><p><strong>Arguments</strong></p><ul><li><code>x</code> — Value to be inserted. Expression resulting in one of the supported data types.</li><li><code>pos</code> — Position at which the specified element <code>x</code> is to be inserted. Index numbering in the array starts from zero. UInt32.</li><li><code>default_x</code> — Default value for substituting in empty positions. Optional parameter. Expression resulting in the data type configured for the <code>x</code> parameter. If <code>default_x</code> is not defined, the default values are used.</li><li><code>size</code> — Length of the resulting array. Optional parameter. When using this parameter, the default value <code>default_x</code> must be specified. UInt32.</li></ul><p><strong>Returned value</strong></p><ul><li>Array with inserted values.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> groupArrayInsertAt(toString(number), number <span class="operator">*</span> <span class="number">2</span>) <span class="keyword">FROM</span> numbers(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">┌─groupArrayInsertAt(toString(number), multiply(number, 2))─┐│ [&#x27;0&#x27;,&#x27;&#x27;,&#x27;1&#x27;,&#x27;&#x27;,&#x27;2&#x27;,&#x27;&#x27;,&#x27;3&#x27;,&#x27;&#x27;,&#x27;4&#x27;]                         │└───────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> groupArrayInsertAt(<span class="string">&#x27;-&#x27;</span>)(toString(number), number <span class="operator">*</span> <span class="number">2</span>) <span class="keyword">FROM</span> numbers(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─groupArrayInsertAt(&#x27;-&#x27;)(toString(number), multiply(number, 2))─┐</span><br><span class="line">│ [&#x27;0&#x27;,&#x27;-&#x27;,&#x27;1&#x27;,&#x27;-&#x27;,&#x27;2&#x27;,&#x27;-&#x27;,&#x27;3&#x27;,&#x27;-&#x27;,&#x27;4&#x27;]                          │</span><br><span class="line">└────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> groupArrayInsertAt(<span class="string">&#x27;-&#x27;</span>, <span class="number">5</span>)(toString(number), number <span class="operator">*</span> <span class="number">2</span>) <span class="keyword">FROM</span> numbers(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─groupArrayInsertAt(&#x27;-&#x27;, 5)(toString(number), multiply(number, 2))─┐</span><br><span class="line">│ [&#x27;0&#x27;,&#x27;-&#x27;,&#x27;1&#x27;,&#x27;-&#x27;,&#x27;2&#x27;]                                             │</span><br><span class="line">└───────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><!-- TODO: numbers_mt is not supported. This example may need to remove --><!-- Multi-threaded insertion of elements into one position.<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> groupArrayInsertAt(number, <span class="number">0</span>) <span class="keyword">FROM</span> numbers_mt(<span class="number">10</span>) SETTINGS max_block_size <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>As a result of this query you get random integer in the <code>[0,9]</code> range. For example:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">┌─groupArrayInsertAt(number, 0)─┐</span><br><span class="line">│ [7]                           │</span><br><span class="line">└───────────────────────────────┘</span><br><span class="line">``` --&gt;</span><br><span class="line">## hasAll</span><br><span class="line">Checks whether one array is a subset of another.</span><br><span class="line"></span><br><span class="line">**Syntax**</span><br><span class="line">```sql</span><br><span class="line">hasAll(set, subset)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>set</code> – Array of any type with a set of elements. </li><li><code>subset</code> – Array of any type with elements that should be tested to be a subset of <code>set</code> .</li></ul><p><strong>Return values</strong></p><ul><li><code>1</code> , if <code>set</code> contains all of the elements from <code>subset</code> . </li><li><code>0</code> , otherwise.</li></ul><p><strong>Peculiar properties</strong></p><ul><li>An empty array is a subset of any array. </li><li><code>Null</code> processed as a value. </li><li>Order of values in both of arrays does not matter.</li></ul><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> hasAll([], []);</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─hasAll(array(), array())─┐</span><br><span class="line">│ 1                        │</span><br><span class="line">└──────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> hasAll([<span class="number">1</span>, <span class="keyword">Null</span>], [<span class="keyword">Null</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─hasAll([1, NULL], [NULL])─┐</span><br><span class="line">│ 1                         │</span><br><span class="line">└───────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> hasAll([<span class="number">1.0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">1</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─hasAll([1., 2, 3, 4], [1, 3])─┐</span><br><span class="line">│ 1                             │</span><br><span class="line">└───────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> hasAll([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>], [<span class="string">&#x27;a&#x27;</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─hasAll([&#x27;a&#x27;, &#x27;b&#x27;], [&#x27;a&#x27;])─┐</span><br><span class="line">│ 1                         │</span><br><span class="line">└───────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> hasAll([<span class="number">1</span>], [<span class="string">&#x27;a&#x27;</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─hasAll([1], [&#x27;a&#x27;])─┐</span><br><span class="line">│ 0                  │</span><br><span class="line">└────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> hasAll([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]], [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">5</span>]]);</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─hasAll(array([1, 2], [3, 4]), array([1, 2], [3, 5]))─┐</span><br><span class="line">│ 0                                                    │</span><br><span class="line">└──────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="hasAny"><a href="#hasAny" class="headerlink" title="hasAny"></a>hasAny</h2><p>Checks whether two arrays have intersection by some elements.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hasAny(array1, array2)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>array1</code> – Array of any type with a set of elements. </li><li><code>array2</code> – Array of any type with a set of elements.</li></ul><p><strong>Return values</strong></p><ul><li><code>1</code> , if <code>array1</code> and <code>array2</code> have one similar element at least. </li><li><code>0</code> , otherwise.</li></ul><p><strong>Peculiar properties</strong></p><ul><li><code>Null</code> processed as a value. </li><li>Order of values in both of arrays does not matter.</li></ul><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> hasAny([<span class="number">1</span>], []);</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─hasAny([1], array())─┐</span><br><span class="line">│ 0                    │</span><br><span class="line">└──────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> hasAny([<span class="keyword">Null</span>], [<span class="keyword">Null</span>, <span class="number">1</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─hasAny([NULL], [NULL, 1])─┐</span><br><span class="line">│ 1                         │</span><br><span class="line">└───────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> hasAny([<span class="number">-128</span>, <span class="number">1.</span>, <span class="number">512</span>], [<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─hasAny([-128, 1., 512], [1])─┐</span><br><span class="line">│ 1                            │</span><br><span class="line">└──────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> hasAny([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]], [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─hasAny(array([1, 2], [3, 4]), [&#x27;a&#x27;, &#x27;c&#x27;])─┐</span><br><span class="line">│ 0                                         │</span><br><span class="line">└───────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> hasAll([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]], [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>]]);</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─hasAll(array([1, 2], [3, 4]), array([1, 2], [1, 2]))─┐</span><br><span class="line">│ 1                                                    │</span><br><span class="line">└──────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h2><p>Returns the index of the first ‘x’ element (starting from 1) if it is in the array, or 0 if it is not.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">indexOf(arr, x) </span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>arr</code> – Array of any type with a set of elements. </li><li><code>x</code> – an Element.</li></ul><p><strong>Return values</strong></p><ul><li>index of the first ‘x’ element (starting from 1)</li></ul><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> indexOf([<span class="number">1</span>, <span class="number">3</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>], <span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─indexOf([1, 3, NULL, NULL], NULL)─┐</span><br><span class="line">│ 3                                 │</span><br><span class="line">└───────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>Elements set to <code>NULL</code> are handled as normal values.</p><h2 id="length"><a href="#length" class="headerlink" title="length"></a>length</h2><p>Returns the length of a arrays.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">length(<span class="keyword">array</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>array</code> – Array of any type with a set of elements.</li></ul><p><strong>Return values</strong></p><ul><li>length of array. UInt64</li></ul><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> length([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">┌─length([1, 2, 3])─┐</span><br><span class="line">│ 3                 │</span><br><span class="line">└───────────────────┘</span><br><span class="line">```Returns an array of `UInt` numbers from 0 to `end - 1` by 1 .</span><br><span class="line"></span><br><span class="line">**Syntax**</span><br><span class="line">&lt;!-- Different with community --&gt;</span><br><span class="line">```sql</span><br><span class="line">range(end)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>end</code> — The number before which the array is constructed. Required. UInt</li></ul><p><strong>Returned value</strong></p><ul><li>Array of <code>UInt</code> numbers from 0 to <code>end - 1</code> by 1 .</li></ul><p><strong>Implementation details</strong></p><ul><li>All arguments must be positive values.</li><li>An exception is thrown if the query results in arrays with a total length of more than 100,000,000 elements.</li></ul><p><strong>Examples</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">range</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─range(5)────────┐</span><br><span class="line">│ [0, 1, 2, 3, 4] │</span><br><span class="line">└─────────────────┘</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> SQL_Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bit &amp; Bitmap</title>
      <link href="/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/bit-bitmap/"/>
      <url>/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/bit-bitmap/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Notice:<br>Some of the examples below are referenced from <a href="https://clickhouse.com/docs/en/sql-reference/functions/">ClickHouse Documentation</a> but have been adapted and modified to work in ByteHouse.</p></blockquote><h2 id="bitTest"><a href="#bitTest" class="headerlink" title="bitTest"></a>bitTest</h2><p>Takes any integer and converts it into [binary form].</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bitTest(number, index)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><p><code>number</code> – Integer number. </p></li><li><p><code>index</code> – Position of bit.</p></li></ul><p><strong>Returned values</strong></p><p>Returns a value of bit at specified position.</p><p>Type: <code>UInt8</code> .</p><p><strong>Example</strong></p><p>For example, the number 43 in base-2 (binary) numeral system is 101011.</p><p>Query:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bitTest(<span class="number">43</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─bitTest(43, 1)─┐</span><br><span class="line">│ 1              │</span><br><span class="line">└────────────────┘</span><br></pre></td></tr></table></figure><p>Another example:</p><p>Query:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bitTest(<span class="number">43</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─bitTest(43, 2)─┐</span><br><span class="line">│ 0              │</span><br><span class="line">└────────────────┘</span><br></pre></td></tr></table></figure><h2 id="bitTestAll"><a href="#bitTestAll" class="headerlink" title="bitTestAll"></a>bitTestAll</h2><p>Returns result of [logical conjuction] (AND operator) of all bits at given positions. The countdown starts from 0 from the right to the left.</p><p>The conjuction for bitwise operations:</p><p>0 AND 0 &#x3D; 0</p><p>0 AND 1 &#x3D; 0</p><p>1 AND 0 &#x3D; 0</p><p>1 AND 1 &#x3D; 1</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bitTestAll(number, index1, index2, index3, index4, ...)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><p><code>number</code> – Integer number. </p></li><li><p><code>index1</code> , <code>index2</code> , <code>index3</code> , <code>index4</code> – Positions of bit. For example, for set of positions ( <code>index1</code> , <code>index2</code> , <code>index3</code> , <code>index4</code> ) is true if and only if all of its positions are true ( <code>index1</code> ⋀ <code>index2</code> , ⋀ <code>index3</code> ⋀ <code>index4</code> ).</p></li></ul><p><strong>Returned values</strong></p><p>Returns result of logical conjuction.</p><p>Type: <code>UInt8</code> .</p><p><strong>Example</strong></p><p>For example, the number 43 in base-2 (binary) numeral system is 101011.</p><p>Query:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bitTestAll(<span class="number">43</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─bitTestAll(43, 0, 1, 3, 5)─┐</span><br><span class="line">│ 1                          │</span><br><span class="line">└────────────────────────────┘</span><br></pre></td></tr></table></figure><p>Another example:</p><p>Query:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bitTestAll(<span class="number">43</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─bitTestAll(43, 0, 1, 3, 5, 2)─┐</span><br><span class="line">│ 0                             │</span><br><span class="line">└───────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="bitTestAny"><a href="#bitTestAny" class="headerlink" title="bitTestAny"></a>bitTestAny</h2><p>Returns result of [logical disjunction](OR operator) of all bits at given positions. The countdown starts from 0 from the right to the left.</p><p>The disjunction for bitwise operations:</p><p>0 OR 0 &#x3D; 0</p><p>0 OR 1 &#x3D; 1</p><p>1 OR 0 &#x3D; 1</p><p>1 OR 1 &#x3D; 1</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> bitTestAny(number, index1, index2, index3, index4, ...)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><p><code>number</code> – Integer number. </p></li><li><p><code>index1</code> , <code>index2</code> , <code>index3</code> , <code>index4</code> – Positions of bit.</p></li></ul><p><strong>Returned values</strong></p><p>Returns result of logical disjuction.</p><p>Type: <code>UInt8</code> .</p><p><strong>Example</strong></p><p>For example, the number 43 in base-2 (binary) numeral system is 101011.</p><p>Query:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bitTestAny(<span class="number">43</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─bitTestAny(43, 0, 2)─┐</span><br><span class="line">│ 1                    │</span><br><span class="line">└──────────────────────┘</span><br></pre></td></tr></table></figure><p>Another example:</p><p>Query:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bitTestAny(<span class="number">43</span>, <span class="number">4</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─bitTestAny(43, 4, 2)─┐</span><br><span class="line">│ 0                    │</span><br><span class="line">└──────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="bitmapAnd"><a href="#bitmapAnd" class="headerlink" title="bitmapAnd"></a>bitmapAnd</h2><p>Two bitmap and calculation, the result is a new bitmap.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitmapAnd(bitmap,bitmap)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>bitmap</code> – Bitmap object.</li></ul><p><strong>Returned value</strong></p><ul><li>The Bitmap object</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bitmapToArray(bitmapAnd(bitmapBuild([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]),bitmapBuild([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]))) <span class="keyword">AS</span> res;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res─┐</span><br><span class="line">│ [3] │</span><br><span class="line">└─────┘</span><br></pre></td></tr></table></figure><h2 id="bitmapAndCardinality"><a href="#bitmapAndCardinality" class="headerlink" title="bitmapAndCardinality"></a>bitmapAndCardinality</h2><p>Two bitmap and calculation, return cardinality of type UInt64.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitmapAndCardinality(bitmap,bitmap)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>bitmap</code> – Bitmap object.</li></ul><p><strong>Returned value</strong></p><ul><li>The cardinality in type <code>UInt64</code>.</li></ul><p>Type:<code>Uint64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bitmapAndCardinality(bitmapBuild([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]),bitmapBuild([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])) <span class="keyword">AS</span> res;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res─┐</span><br><span class="line">│ 1   │</span><br><span class="line">└─────┘</span><br></pre></td></tr></table></figure><h2 id="bitmapAndnot"><a href="#bitmapAndnot" class="headerlink" title="bitmapAndnot"></a>bitmapAndnot</h2><p>Two bitmap andnot calculation, the result is a new bitmap.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitmapAndnot(bitmap,bitmap)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>bitmap</code> – Bitmap object.</li></ul><p><strong>Returned value</strong></p><ul><li>The Bitmap object</li></ul><p>Type: <code>Bitmap object</code>.</p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bitmapToArray(bitmapAndnot(bitmapBuild([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]),bitmapBuild([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]))) <span class="keyword">AS</span> res;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res────┐</span><br><span class="line">│ [1, 2] │</span><br><span class="line">└────────┘</span><br></pre></td></tr></table></figure><h2 id="bitmapAndnotCardinality"><a href="#bitmapAndnotCardinality" class="headerlink" title="bitmapAndnotCardinality"></a>bitmapAndnotCardinality</h2><p>Two bitmap andnot calculation, return cardinality of type UInt64.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitmapAndnotCardinality(bitmap,bitmap)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>bitmap</code> – Bitmap object.</li></ul><p><strong>Returned value</strong></p><ul><li>The cardinality in <code>UInt64</code>.</li></ul><p>Type: <code>UInt64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bitmapAndnotCardinality(bitmapBuild([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]),bitmapBuild([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])) <span class="keyword">AS</span> res;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res─┐</span><br><span class="line">│ 2   │</span><br><span class="line">└─────┘</span><br></pre></td></tr></table></figure><h2 id="bitmapBuild"><a href="#bitmapBuild" class="headerlink" title="bitmapBuild"></a>bitmapBuild</h2><p>Build a bitmap from unsigned integer array.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitmapBuild(<span class="keyword">array</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>array</code> – Unsigned integer array.</li></ul><p><strong>Returned value</strong></p><ul><li>The bitmap object</li></ul><p>Type: <code>Bitmap object</code>.</p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toTypeName(bitmapBuild([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]));</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toTypeName(bitmapBuild([1, 2, 3, 4, 5]))─┐</span><br><span class="line">│ AggregateFunction(groupBitmap, UInt8)    │</span><br><span class="line">└──────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="bitmapCardinality"><a href="#bitmapCardinality" class="headerlink" title="bitmapCardinality"></a>bitmapCardinality</h2><p>Return bitmap cardinality of type UInt64.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitmapCardinality(bitmap)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>bitmap</code> – Bitmap object.</li></ul><p><strong>Returned value</strong></p><ul><li>The bitmap cardinality in type <code>UInt64</code>.</li></ul><p>Type: <code>UInt64</code> .</p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bitmapCardinality(bitmapBuild([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])) <span class="keyword">AS</span> res;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res─┐</span><br><span class="line">│ 5   │</span><br><span class="line">└─────┘</span><br></pre></td></tr></table></figure><h2 id="bitmapContains"><a href="#bitmapContains" class="headerlink" title="bitmapContains"></a>bitmapContains</h2><p>Checks whether the bitmap contains an element.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitmapContains(haystack, needle)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>haystack</code> – [Bitmap object], where the function searches.</li><li><code>needle</code> – Value that the function searches. Type: [UInt32] .</li></ul><p><strong>Returned values</strong></p><ul><li>0 — If <code>haystack</code> does not contain <code>needle</code> .</li><li>1 — If <code>haystack</code> contains <code>needle</code> .</li></ul><p>Type: <code>UInt8</code> .</p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bitmapContains(bitmapBuild([<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]), toUInt32(<span class="number">9</span>)) <span class="keyword">AS</span> res;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res─┐</span><br><span class="line">│ 1   │</span><br><span class="line">└─────┘</span><br></pre></td></tr></table></figure><h2 id="bitmapHasAll"><a href="#bitmapHasAll" class="headerlink" title="bitmapHasAll"></a>bitmapHasAll</h2><p>Analogous to <code>hasAll(array, array)</code> returns 1 if the first bitmap contains all the elements of the second one, 0 otherwise.</p><p>If the second argument is an empty bitmap then returns 1.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitmapHasAll(bitmap,bitmap)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>bitmap</code> – Bitmap object.</li></ul><p><strong>Returned value</strong></p><ul><li><code>1</code> , returns 1 if the first bitmap contains all the elements of the second one or If the second argument is an empty bitmap . </li><li><code>0</code> , otherwise.</li></ul><p>Type: <code>UInt8</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bitmapHasAll(bitmapBuild([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]),bitmapBuild([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])) <span class="keyword">AS</span> res;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res─┐</span><br><span class="line">│ 0   │</span><br><span class="line">└─────┘</span><br></pre></td></tr></table></figure><h2 id="bitmapHasAny"><a href="#bitmapHasAny" class="headerlink" title="bitmapHasAny"></a>bitmapHasAny</h2><p>Checks whether two bitmaps have intersection by some elements.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitmapHasAny(bitmap1, bitmap2)</span><br></pre></td></tr></table></figure><p>If you are sure that <code>bitmap2</code> contains strictly one element, consider using the [bitmapContains] function. It works more efficiently.</p><p><strong>Arguments</strong></p><ul><li><code>bitmap*</code> – Bitmap object.</li></ul><p><strong>Return values</strong></p><ul><li><code>1</code> , if <code>bitmap1</code> and <code>bitmap2</code> have one similar element at least.</li><li><code>0</code> , otherwise.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bitmapHasAny(bitmapBuild([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]),bitmapBuild([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])) <span class="keyword">AS</span> res;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res─┐</span><br><span class="line">│ 1   │</span><br><span class="line">└─────┘</span><br></pre></td></tr></table></figure><h2 id="bitmapMax"><a href="#bitmapMax" class="headerlink" title="bitmapMax"></a>bitmapMax</h2><p>Return the greatest value of type UInt64 in the set, 0 if the set is empty.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitmapMax(bitmap)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>bitmap</code> – Bitmap object.</li></ul><p><strong>Return values</strong></p><ul><li>Return the greatest value of type UInt64 in the set.</li></ul><p>Type: <code>UInt64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bitmapMax(bitmapBuild([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])) <span class="keyword">AS</span> res;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res─┐</span><br><span class="line">│ 5   │</span><br><span class="line">└─────┘</span><br></pre></td></tr></table></figure><h2 id="bitmapMin"><a href="#bitmapMin" class="headerlink" title="bitmapMin"></a>bitmapMin</h2><p>Return the smallest value of type UInt64 in the set, UINT32_MAX if the set is empty.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitmapMin(bitmap)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>bitmap</code> – Bitmap object.</li></ul><p><strong>Return values</strong></p><ul><li>Return the smallest value of type UInt64 in the set.</li></ul><p>Type: <code>UInt64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bitmapMin(bitmapBuild([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])) <span class="keyword">AS</span> res;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res─┐</span><br><span class="line">│ 1   │</span><br><span class="line">└─────┘</span><br></pre></td></tr></table></figure><h2 id="bitmapOr"><a href="#bitmapOr" class="headerlink" title="bitmapOr"></a>bitmapOr</h2><p>Two bitmap or calculation, the result is a new bitmap.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitmapOr(bitmap,bitmap)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>bitmap</code> – Bitmap object.</li></ul><p><strong>Returned value</strong></p><ul><li>The Bitmap object</li></ul><p>Type: <code>Bitmap object</code>.</p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bitmapToArray(bitmapOr(bitmapBuild([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]),bitmapBuild([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]))) <span class="keyword">AS</span> res;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res─────────────┐</span><br><span class="line">│ [1, 2, 3, 4, 5] │</span><br><span class="line">└─────────────────┘</span><br></pre></td></tr></table></figure><h2 id="bitmapOrCardinality"><a href="#bitmapOrCardinality" class="headerlink" title="bitmapOrCardinality"></a>bitmapOrCardinality</h2><p>Two bitmap or calculation, return cardinality of type UInt64.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitmapOrCardinality(bitmap,bitmap)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>bitmap</code> – Bitmap object.</li></ul><p><strong>Return values</strong></p><ul><li>Return or calculation result in cardinality.</li></ul><p>Type:<code>UInt64</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bitmapOrCardinality(bitmapBuild([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]),bitmapBuild([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])) <span class="keyword">AS</span> res;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res─┐</span><br><span class="line">│ 5   │</span><br><span class="line">└─────┘</span><br></pre></td></tr></table></figure><h2 id="bitmapSubsetInRange"><a href="#bitmapSubsetInRange" class="headerlink" title="bitmapSubsetInRange"></a>bitmapSubsetInRange</h2><p>Return subset in specified range (not include the range_end).</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitmapSubsetInRange(bitmap, range_start, range_end)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><p><code>bitmap</code> – [Bitmap object].</p></li><li><p><code>range_start</code> – Range start point. Type: [UInt32]. </p></li><li><p><code>range_end</code> – Range end point (excluded). Type: [UInt32].</p></li></ul><p><strong>Return values</strong></p><ul><li>Return or calculation result.</li></ul><p>Type:<code>array</code></p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bitmapToArray(bitmapSubsetInRange(bitmapBuild([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">32</span>,<span class="number">33</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">500</span>]), toUInt32(<span class="number">30</span>), toUInt32(<span class="number">200</span>))) <span class="keyword">AS</span> res;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res───────────────────┐</span><br><span class="line">│ [30, 31, 32, 33, 100] │</span><br><span class="line">└───────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="bitmapSubsetLimit"><a href="#bitmapSubsetLimit" class="headerlink" title="bitmapSubsetLimit"></a>bitmapSubsetLimit</h2><p>Creates a subset of bitmap with n elements taken between <code>range_start</code> and <code>cardinality_limit</code> .</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitmapSubsetLimit(bitmap, range_start, cardinality_limit)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><p><code>bitmap</code> – [Bitmap object]. </p></li><li><p><code>range_start</code> – The subset starting point. Type: [UInt32]. </p></li><li><p><code>cardinality_limit</code> – The subset cardinality upper limit. Type: [UInt32].</p></li></ul><p><strong>Returned value</strong></p><ul><li>The subset.</li></ul><p>Type: <code>Bitmap object</code> .</p><p><strong>Example</strong></p><p>Query:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bitmapToArray(bitmapSubsetLimit(bitmapBuild([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">32</span>,<span class="number">33</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">500</span>]), toUInt32(<span class="number">30</span>), toUInt32(<span class="number">200</span>))) <span class="keyword">AS</span> res;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res─────────────────────────────┐</span><br><span class="line">│ [30, 31, 32, 33, 100, 200, 500] │</span><br><span class="line">└─────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="bitmapToArray"><a href="#bitmapToArray" class="headerlink" title="bitmapToArray"></a>bitmapToArray</h2><p>Convert bitmap to integer array.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitmapToArray(bitmap)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>bitmap</code> – Bitmap object.</li></ul><p><strong>Returned value</strong></p><ul><li>An array.</li></ul><p>Type: <code>array</code> .</p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bitmapToArray(bitmapBuild([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])) <span class="keyword">AS</span> res;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res─────────────┐</span><br><span class="line">│ [1, 2, 3, 4, 5] │</span><br><span class="line">└─────────────────┘</span><br></pre></td></tr></table></figure><h2 id="bitmapXor"><a href="#bitmapXor" class="headerlink" title="bitmapXor"></a>bitmapXor</h2><p>Two bitmap xor calculation, the result is a new bitmap.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitmapXor(bitmap,bitmap)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>bitmap</code> – Bitmap object.</li></ul><p><strong>Returned value</strong></p><ul><li>The Bitmap object</li></ul><p>Type: <code>Bitmap object</code>.</p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bitmapToArray(bitmapXor(bitmapBuild([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]),bitmapBuild([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]))) <span class="keyword">AS</span> res;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res──────────┐</span><br><span class="line">│ [1, 2, 4, 5] │</span><br><span class="line">└──────────────┘</span><br></pre></td></tr></table></figure><h2 id="bitmapXorCardinality"><a href="#bitmapXorCardinality" class="headerlink" title="bitmapXorCardinality"></a>bitmapXorCardinality</h2><p>Two bitmap xor calculation, return cardinality of type UInt64.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitmapXorCardinality(bitmap,bitmap)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><p><code>bitmap</code> – Bitmap object. </p></li><li><p><strong>Returned value</strong></p></li><li><p>The Bitmap object</p></li></ul><p>Type: <code>Bitmap object</code>.</p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bitmapXorCardinality(bitmapBuild([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]),bitmapBuild([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])) <span class="keyword">AS</span> res;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res─┐</span><br><span class="line">│ 4   │</span><br><span class="line">└─────┘</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> SQL_Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Comparison</title>
      <link href="/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/comparison/"/>
      <url>/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/comparison/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Notice:<br>Some of the examples below are referenced from <a href="https://clickhouse.com/docs/en/sql-reference/functions/">ClickHouse Documentation</a> but have been adapted and modified to work in ByteHouse.</p></blockquote><h2 id="greatest"><a href="#greatest" class="headerlink" title="greatest"></a>greatest</h2><p>Returns the largest value of a and b.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">greatest(a, b)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>a,b</code> – two values to compare</li></ul><p><strong>Returned value</strong></p><ul><li>the larger value of a,b.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> greatest(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─greatest(1, 2)─┐</span><br><span class="line">│ 2              │</span><br><span class="line">└────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> greatest(toDate(<span class="string">&#x27;2019-01-01&#x27;</span>), toDate(<span class="string">&#x27;2019-01-02&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─greatest(toDate(&#x27;2019-01-01&#x27;), toDate(&#x27;2019-01-02&#x27;))─┐</span><br><span class="line">│ 2019-01-02                                           │</span><br><span class="line">└──────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="notEquals"><a href="#notEquals" class="headerlink" title="notEquals"></a>notEquals</h2><p>notEquals, a !&#x3D; b and a &lt;&gt; b operator</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">notEquals(a, b)</span><br><span class="line">a<span class="operator">!=</span>b</span><br><span class="line">a<span class="operator">&lt;&gt;</span>b</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>a,b</code> – two values to compare</li></ul><p><strong>Returned value</strong></p><ul><li>UInt8</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> notEquals(<span class="number">1</span>, <span class="number">1</span>), <span class="number">1</span><span class="operator">!=</span><span class="number">1</span>, <span class="number">1</span><span class="operator">&lt;&gt;</span><span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─notEquals(1, 1)─┬─notEquals(1, 1)─┬─notEquals(1, 1)─┐</span><br><span class="line">│ 0               │ 0               │ 0               │</span><br><span class="line">└─────────────────┴─────────────────┴─────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> notEquals(<span class="number">1</span>, <span class="number">2</span>), <span class="number">1</span><span class="operator">!=</span><span class="number">2</span>, <span class="number">1</span><span class="operator">&lt;&gt;</span><span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─notEquals(1, 2)─┬─notEquals(1, 2)─┬─notEquals(1, 2)─┐</span><br><span class="line">│ 1               │ 1               │ 1               │</span><br><span class="line">└─────────────────┴─────────────────┴─────────────────┘</span><br></pre></td></tr></table></figure><p>[block:api-header]<br>{<br>  “title”: “notEquals”<br>}<br>[&#x2F;block]<br>notEquals, a !&#x3D; b and a &lt;&gt; b operator</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">notEquals(a, b)</span><br><span class="line">a<span class="operator">!=</span>b</span><br><span class="line">a<span class="operator">&lt;&gt;</span>b</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>a,b</code> – two values to compare</li></ul><p><strong>Returned value</strong></p><ul><li>UInt8</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> notEquals(<span class="number">1</span>, <span class="number">1</span>), <span class="number">1</span><span class="operator">!=</span><span class="number">1</span>, <span class="number">1</span><span class="operator">&lt;&gt;</span><span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─notEquals(1, 1)─┬─notEquals(1, 1)─┬─notEquals(1, 1)─┐</span><br><span class="line">│ 0               │ 0               │ 0               │</span><br><span class="line">└─────────────────┴─────────────────┴─────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> notEquals(<span class="number">1</span>, <span class="number">2</span>), <span class="number">1</span><span class="operator">!=</span><span class="number">2</span>, <span class="number">1</span><span class="operator">&lt;&gt;</span><span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─notEquals(1, 2)─┬─notEquals(1, 2)─┬─notEquals(1, 2)─┐</span><br><span class="line">│ 1               │ 1               │ 1               │</span><br><span class="line">└─────────────────┴─────────────────┴─────────────────┘</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> SQL_Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Conditional</title>
      <link href="/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/conditional/"/>
      <url>/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/conditional/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Notice:<br>Some of the examples below are referenced from <a href="https://clickhouse.com/docs/en/sql-reference/functions/">ClickHouse Documentation</a> but have been adapted and modified to work in ByteHouse.</p></blockquote><h2 id="multiIf"><a href="#multiIf" class="headerlink" title="multiIf"></a>multiIf</h2><p>Allows you to write the CASE operator more compactly in the query.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">multiIf(cond_1, then_1, cond_2, then_2, ..., <span class="keyword">else</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments:</strong></p><ul><li><code>cond_N</code> — The condition for the function to return <code>then_N</code> . </li><li><code>then_N</code> — The result of the function when executed. </li><li><code>else</code> — The result of the function if none of the conditions is met.<br>The function accepts <code>2N+1</code> parameters.</li></ul><p><strong>Returned values</strong><br>The function returns one of the values <code>then_N</code> or <code>else</code> , depending on the conditions <code>cond_N</code> .</p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test.functionMultiIf (id UInt8, <span class="keyword">left</span> Nullable(UInt8), <span class="keyword">right</span> Nullable(UInt8)) ENGINE<span class="operator">=</span>CnchMergeTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> id;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.functionMultiIf <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="keyword">NULL</span>,<span class="number">4</span>),(<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>),(<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>),(<span class="number">5</span>,<span class="number">4</span>,<span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">left</span>,</span><br><span class="line">    <span class="keyword">right</span>,</span><br><span class="line">    multiIf(<span class="keyword">left</span> <span class="operator">&lt;</span> <span class="keyword">right</span>, <span class="string">&#x27;left is smaller&#x27;</span>, <span class="keyword">left</span> <span class="operator">&gt;</span> <span class="keyword">right</span>, <span class="string">&#x27;left is greater&#x27;</span>, <span class="keyword">left</span> <span class="operator">=</span> <span class="keyword">right</span>, <span class="string">&#x27;Both equal&#x27;</span>, <span class="string">&#x27;Null value&#x27;</span>) <span class="keyword">AS</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">FROM</span> test.functionMultiIf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">┌─left─┬─right─┬─result──────────┐</span><br><span class="line">│ ᴺᵁᴸᴸ │ 4     │ Null value      │</span><br><span class="line">│ 1    │ 3     │ left is smaller │</span><br><span class="line">│ 2    │ 2     │ Both equal      │</span><br><span class="line">│ 3    │ 1     │ left is greater │</span><br><span class="line">│ 4    │ ᴺᵁᴸᴸ  │ Null value      │</span><br><span class="line">└──────┴───────┴─────────────────┘</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> SQL_Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Date &amp; Times</title>
      <link href="/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/date-times/"/>
      <url>/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/date-times/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Notice:<br>Some of the examples below are referenced from <a href="https://clickhouse.com/docs/en/sql-reference/functions/">ClickHouse Documentation</a> but have been adapted and modified to work in ByteHouse.</p></blockquote><h2 id="addDays"><a href="#addDays" class="headerlink" title="addDays"></a>addDays</h2><p>Function adds a Date&#x2F;DateTime interval to a Date&#x2F;DateTime and then return the Date&#x2F;DateTime. </p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addDays(<span class="type">date</span>, <span class="type">interval</span>)</span><br><span class="line">addDays(datetime, <span class="type">interval</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li><li><code>interval</code> - Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>Date&#x2F;DateTime</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span></span><br><span class="line">    toDate(<span class="string">&#x27;2018-01-01&#x27;</span>) <span class="keyword">AS</span> <span class="type">date</span>,</span><br><span class="line">    toDateTime(<span class="string">&#x27;2018-01-01 00:00:00&#x27;</span>) <span class="keyword">AS</span> date_time</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    addDays(<span class="type">date</span>, <span class="number">1</span>) <span class="keyword">AS</span> add_days_with_date,</span><br><span class="line">    addDays(date_time, <span class="number">1</span>) <span class="keyword">AS</span> add_days_with_date_time</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─add_days_with_date─┬─add_days_with_date_time─┐</span><br><span class="line">│ 2018-01-02         │ 2018-01-02 00:00:00     │</span><br><span class="line">└────────────────────┴─────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="addHours"><a href="#addHours" class="headerlink" title="addHours"></a>addHours</h2><p>Function adds a Date&#x2F;DateTime interval to a Date&#x2F;DateTime and then return the Date&#x2F;DateTime.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addHours(<span class="type">date</span>, <span class="type">interval</span>)</span><br><span class="line">addHours(datetime, <span class="type">interval</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li><li><code>interval</code> - Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>Date&#x2F;DateTime</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span></span><br><span class="line">    toDate(<span class="string">&#x27;2018-01-01&#x27;</span>) <span class="keyword">AS</span> <span class="type">date</span>,</span><br><span class="line">    toDateTime(<span class="string">&#x27;2018-01-01 00:00:00&#x27;</span>) <span class="keyword">AS</span> date_time</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    addHours(<span class="type">date</span>, <span class="number">1</span>) <span class="keyword">AS</span> add_hours_with_date,</span><br><span class="line">    addHours(date_time, <span class="number">1</span>) <span class="keyword">AS</span> add_hours_with_date_time</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─add_hours_with_date─┬─add_hours_with_date_time─┐</span><br><span class="line">│ 2018-01-01 01:00:00 │ 2018-01-01 01:00:00      │</span><br><span class="line">└─────────────────────┴──────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="addMinutes"><a href="#addMinutes" class="headerlink" title="addMinutes"></a>addMinutes</h2><p>Function adds a Date&#x2F;DateTime interval to a Date&#x2F;DateTime and then return the Date&#x2F;DateTime.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addMinutes(<span class="type">date</span>, <span class="type">interval</span>)</span><br><span class="line">addMinutes(datetime, <span class="type">interval</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li><li><code>interval</code> - Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>Date&#x2F;DateTime</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span></span><br><span class="line">    toDate(<span class="string">&#x27;2018-01-01&#x27;</span>) <span class="keyword">AS</span> <span class="type">date</span>,</span><br><span class="line">    toDateTime(<span class="string">&#x27;2018-01-01 00:00:00&#x27;</span>) <span class="keyword">AS</span> date_time</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    addMinutes(<span class="type">date</span>, <span class="number">1</span>) <span class="keyword">AS</span> add_minutes_with_date,</span><br><span class="line">    addMinutes(date_time, <span class="number">1</span>) <span class="keyword">AS</span> add_minutes_with_date_time</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─add_minutes_with_date─┬─add_minutes_with_date_time─┐</span><br><span class="line">│ 2018-01-01 00:01:00   │ 2018-01-01 00:01:00        │</span><br><span class="line">└───────────────────────┴────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="addMonths"><a href="#addMonths" class="headerlink" title="addMonths"></a>addMonths</h2><p>Function adds a Date&#x2F;DateTime interval to a Date&#x2F;DateTime and then return the Date&#x2F;DateTime. For example:</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addMonths(<span class="type">date</span>, <span class="type">interval</span>)</span><br><span class="line">addMonths(datetime, <span class="type">interval</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li><li><code>interval</code> - Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>Date&#x2F;DateTime</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span></span><br><span class="line">    toDate(<span class="string">&#x27;2018-01-01&#x27;</span>) <span class="keyword">AS</span> <span class="type">date</span>,</span><br><span class="line">    toDateTime(<span class="string">&#x27;2018-01-01 00:00:00&#x27;</span>) <span class="keyword">AS</span> date_time</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    addMonths(<span class="type">date</span>, <span class="number">1</span>) <span class="keyword">AS</span> add_months_with_date,</span><br><span class="line">    addMonths(date_time, <span class="number">1</span>) <span class="keyword">AS</span> add_months_with_date_time</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─add_months_with_date─┬─add_months_with_date_time─┐</span><br><span class="line">│ 2018-02-01           │ 2018-02-01 00:00:00       │</span><br><span class="line">└──────────────────────┴───────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="addQuarters"><a href="#addQuarters" class="headerlink" title="addQuarters"></a>addQuarters</h2><p>Function adds a Date&#x2F;DateTime interval to a Date&#x2F;DateTime and then return the Date&#x2F;DateTime.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addQuarters(<span class="type">date</span>, <span class="type">interval</span>)</span><br><span class="line">addQuarters(datetime, <span class="type">interval</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li><li><code>interval</code> - Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>Date&#x2F;DateTime</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span></span><br><span class="line">    toDate(<span class="string">&#x27;2018-01-01&#x27;</span>) <span class="keyword">AS</span> <span class="type">date</span>,</span><br><span class="line">    toDateTime(<span class="string">&#x27;2018-01-01 00:00:00&#x27;</span>) <span class="keyword">AS</span> date_time</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    addQuarters(<span class="type">date</span>, <span class="number">1</span>) <span class="keyword">AS</span> add_quarters_with_date,</span><br><span class="line">    addQuarters(date_time, <span class="number">1</span>) <span class="keyword">AS</span> add_quarters_with_date_time</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─add_quarters_with_date─┬─add_quarters_with_date_time─┐</span><br><span class="line">│ 2018-04-01             │ 2018-04-01 00:00:00         │</span><br><span class="line">└────────────────────────┴─────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="addSeconds"><a href="#addSeconds" class="headerlink" title="addSeconds"></a>addSeconds</h2><p>Function adds a Date&#x2F;DateTime interval to a Date&#x2F;DateTime and then return the Date&#x2F;DateTime. For example:</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addSeconds(<span class="type">date</span>, <span class="type">interval</span>)</span><br><span class="line">addSeconds(datetime, <span class="type">interval</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li><li><code>interval</code> - Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>Date&#x2F;DateTime</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span></span><br><span class="line">    toDate(<span class="string">&#x27;2018-01-01&#x27;</span>) <span class="keyword">AS</span> <span class="type">date</span>,</span><br><span class="line">    toDateTime(<span class="string">&#x27;2018-01-01 00:00:00&#x27;</span>) <span class="keyword">AS</span> date_time</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    addSeconds(<span class="type">date</span>, <span class="number">1</span>) <span class="keyword">AS</span> add_seconds_with_date,</span><br><span class="line">    addSeconds(date_time, <span class="number">1</span>) <span class="keyword">AS</span> add_seconds_with_date_time</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─add_seconds_with_date─┬─add_seconds_with_date_time─┐</span><br><span class="line">│ 2018-01-01 00:00:01   │ 2018-01-01 00:00:01        │</span><br><span class="line">└───────────────────────┴────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="addWeeks"><a href="#addWeeks" class="headerlink" title="addWeeks"></a>addWeeks</h2><p>Function adds a Date&#x2F;DateTime interval to a Date&#x2F;DateTime and then return the Date&#x2F;DateTime.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addWeeks(<span class="type">date</span>, <span class="type">interval</span>)</span><br><span class="line">addWeeks(datetime, <span class="type">interval</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li><li><code>interval</code> - Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>Date&#x2F;DateTime</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span></span><br><span class="line">    toDate(<span class="string">&#x27;2018-01-01&#x27;</span>) <span class="keyword">AS</span> <span class="type">date</span>,</span><br><span class="line">    toDateTime(<span class="string">&#x27;2018-01-01 00:00:00&#x27;</span>) <span class="keyword">AS</span> date_time</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    addWeeks(<span class="type">date</span>, <span class="number">1</span>) <span class="keyword">AS</span> add_weeks_with_date,</span><br><span class="line">    addWeeks(date_time, <span class="number">1</span>) <span class="keyword">AS</span> add_weeks_with_date_time</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─add_weeks_with_date─┬─add_weeks_with_date_time─┐</span><br><span class="line">│ 2018-01-08          │ 2018-01-08 00:00:00      │</span><br><span class="line">└─────────────────────┴──────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="addYears"><a href="#addYears" class="headerlink" title="addYears"></a>addYears</h2><p>Function adds a Date&#x2F;DateTime interval to a Date&#x2F;DateTime and then return the Date&#x2F;DateTime. For example:</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addYears(<span class="type">date</span>, <span class="type">interval</span>)</span><br><span class="line">addYears(datetime, <span class="type">interval</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li><li><code>interval</code> - Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>Date&#x2F;DateTime</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span></span><br><span class="line">    toDate(<span class="string">&#x27;2018-01-01&#x27;</span>) <span class="keyword">AS</span> <span class="type">date</span>,</span><br><span class="line">    toDateTime(<span class="string">&#x27;2018-01-01 00:00:00&#x27;</span>) <span class="keyword">AS</span> date_time</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    addYears(<span class="type">date</span>, <span class="number">1</span>) <span class="keyword">AS</span> add_years_with_date,</span><br><span class="line">    addYears(date_time, <span class="number">1</span>) <span class="keyword">AS</span> add_years_with_date_time</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─add_years_with_date─┬─add_years_with_date_time─┐</span><br><span class="line">│ 2019-01-01          │ 2019-01-01 00:00:00      │</span><br><span class="line">└─────────────────────┴──────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="dateDiff"><a href="#dateDiff" class="headerlink" title="dateDiff"></a>dateDiff</h2><p>Returns the difference between two dates or dates with time values.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dateDiff(<span class="string">&#x27;unit&#x27;</span>, startdate, enddate, [timezone])</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>unit</code> — The type of interval for result. String.<br>Possible values:<ul><li>second</li><li>minute</li><li>hour</li><li>day</li><li>week</li><li>month</li><li>quarter</li><li>year</li></ul></li><li><code>startdate</code> — The first time value to subtract (the subtrahend). Date or DateTime.</li><li><code>enddate</code> — The second time value to subtract from (the minuend). Date or DateTime.</li><li><code>timezone</code> — Timezone name (optional). If specified, it is applied to both startdate and enddate. If not specified, timezones of startdate and enddate are used. If they are not the same, the result is unspecified. String.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> dateDiff(<span class="string">&#x27;hour&#x27;</span>, toDateTime(<span class="string">&#x27;2018-01-01 22:00:00&#x27;</span>), toDateTime(<span class="string">&#x27;2018-01-02 23:00:00&#x27;</span>));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─dateDiff(&#x27;hour&#x27;, toDateTime(&#x27;2018-01-01 22:00:00&#x27;), toDateTime(&#x27;2018-01-02 23:00:00&#x27;))─┐</span><br><span class="line">│ 25                                                                                     │</span><br><span class="line">└────────────────────────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="date-add"><a href="#date-add" class="headerlink" title="date_add"></a>date_add</h2><p>Adds the time interval or date interval to the provided date or date with time.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date_add(<span class="type">date</span>, <span class="keyword">value</span>)</span><br><span class="line">date_add(datetime, <span class="keyword">value</span> [,timezone])</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date</code> — The date or date with time to which <code>value</code> is added. Date or DateTime. </li><li><code>timezone</code> - The timezone argument is allowed only when the 1st argument has the type DateTime</li></ul><p><strong>Returned value</strong><br>Date or date with time obtained by adding <code>value</code>.</p><p>Type: Date or DateTime.</p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> date_add(toDate(<span class="string">&#x27;2018-01-01&#x27;</span>),<span class="number">3</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─date_add(toDate(&#x27;2018-01-01&#x27;), 3)─┐</span><br><span class="line">│ 2018-01-04                        │</span><br><span class="line">└───────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> date_add(toDateTime(<span class="string">&#x27;2018-01-01 00:00:00&#x27;</span>), <span class="number">3</span>, <span class="string">&#x27;UTC&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─date_add(toDateTime(&#x27;2018-01-01 00:00:00&#x27;), 3, &#x27;UTC&#x27;)─┐</span><br><span class="line">│ 2018-01-03 16:00:00                                   │</span><br><span class="line">└───────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="date-sub"><a href="#date-sub" class="headerlink" title="date_sub"></a>date_sub</h2><p>Subtracts the time interval or date interval from the provided date or date with time.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date_sub(<span class="type">date</span>, <span class="keyword">value</span>)</span><br><span class="line">date_sub(datetime, <span class="keyword">value</span> [,timezone])</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date</code> — The date or date with time to which <code>value</code> is added. Date or DateTime. </li><li><code>timezone</code> - The timezone argument is allowed only when the 1st argument has the type DateTime</li></ul><p><strong>Returned value</strong><br>Date or date with time obtained by subtracting <code>value</code>.</p><p>Type: Date or DateTime.</p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> date_sub(toDate(<span class="string">&#x27;2018-01-01&#x27;</span>),<span class="number">3</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─date_sub(toDate(&#x27;2018-01-01&#x27;), 3)─┐</span><br><span class="line">│ 2017-12-29                        │</span><br><span class="line">└───────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> date_sub(toDateTime(<span class="string">&#x27;2018-01-01 00:00:00&#x27;</span>), <span class="number">3</span>, <span class="string">&#x27;UTC&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─date_sub(toDateTime(&#x27;2018-01-01 00:00:00&#x27;), 3, &#x27;UTC&#x27;)─┐</span><br><span class="line">│ 2017-12-28 16:00:00                                   │</span><br><span class="line">└───────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="formatDateTime"><a href="#formatDateTime" class="headerlink" title="formatDateTime"></a>formatDateTime</h2><p>Formats a Time according to the given Format string. Format is a constant expression, so you cannot have multiple formats for a single result column.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">formatDateTime(<span class="type">Time</span>, Format\[, Timezone\])</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>Time</code> - Date&#x2F;DateTime</li><li><code>Format</code> - Format pattern</li></ul><p><strong>Replacement fields</strong><br>Using replacement fields, you can define a pattern for the resulting string. “Example” column shows formatting result for <code>2018-01-02 22:33:44</code> .</p><table><thead><tr><th><strong>Placeholder</strong></th><th><strong>Description</strong></th><th><strong>Example</strong></th></tr></thead><tbody><tr><td>%C</td><td>year divided by 100 and truncated to integer (00-99)</td><td>20</td></tr><tr><td>%d</td><td>day of the month, zero-padded (01-31)</td><td>02</td></tr><tr><td>%D</td><td>Short MM&#x2F;DD&#x2F;YY date, equivalent to %m&#x2F;%d&#x2F;%y</td><td>01&#x2F;02&#x2F;18</td></tr><tr><td>%e</td><td>day of the month, space-padded ( 1-31)</td><td>2</td></tr><tr><td>%F</td><td>short YYYY-MM-DD date, equivalent to %Y-%m-%d</td><td>2018-01-02</td></tr><tr><td>%H</td><td>hour in 24h format (00-23)</td><td>22</td></tr><tr><td>%I</td><td>hour in 12h format (01-12)</td><td>10</td></tr><tr><td>%j</td><td>day of the year (001-366)</td><td>002</td></tr><tr><td>%m</td><td>month as a decimal number (01-12)</td><td>01</td></tr><tr><td>%M</td><td>minute (00-59)</td><td>33</td></tr><tr><td>%n</td><td>new-line character (‘’)</td><td></td></tr><tr><td>%p</td><td>AM or PM designation</td><td>PM</td></tr><tr><td>%R</td><td>24-hour HH:MMtime, equivalent to %H:%M</td><td>22:33</td></tr><tr><td>%S</td><td>second (00-59)</td><td>44</td></tr><tr><td>%t</td><td>horizontal-tab character (’)</td><td></td></tr><tr><td>%T</td><td>ISO8601 time format (HH:MM:SS), equivalent to %H:%M:%S</td><td>22:33:44</td></tr><tr><td>%u</td><td>ISO8601 weekday as number with Monday as 1 (1-7)</td><td>2</td></tr><tr><td>%V</td><td>ISO8601 week number (01-53)</td><td>01</td></tr><tr><td>%w</td><td>weekday as a decimal number with Sunday as 0 (0-6)</td><td>2</td></tr><tr><td>%y</td><td>Year, last two digits (00-99)</td><td>18</td></tr><tr><td>%Y</td><td>Year</td><td>2018</td></tr><tr><td>%%</td><td>a % sign</td><td>%</td></tr></tbody></table><p><strong>Returned value(s)</strong><br>Returns time and date values according to the determined format.</p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> formatDateTime(toDate(<span class="string">&#x27;2010-01-04&#x27;</span>), <span class="string">&#x27;%d&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">┌─formatDateTime(toDate(&#x27;2010-01-04&#x27;), &#x27;%d&#x27;)─┐</span><br><span class="line">│ 04                                         │</span><br><span class="line">└────────────────────────────────────────────┘</span><br><span class="line">```&lt;!-- TODO: NOT SUPPORT BY BYTEYARD --&gt;</span><br><span class="line">&lt;!-- ## from_unixtime </span><br><span class="line">Function converts Unix timestamp to a calendar date and a time of a day. When there is only a single argument of Integer type, it acts in the same way as toDateTime and return DateTime type.</span><br><span class="line"></span><br><span class="line">**Example**</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">SELECT FROM_UNIXTIME(423543535);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─FROM_UNIXTIME(423543535)─┐</span><br><span class="line">│      1983-06-04 10:58:55 │</span><br><span class="line">└──────────────────────────┘</span><br></pre></td></tr></table></figure><p>When there are two arguments: first is an Integer or DateTime, second is a constant format string — it acts in the same way as formatDateTime and return String type.</p><p>For example:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FROM_UNIXTIME(<span class="number">1234334543</span>, <span class="string">&#x27;%Y-%m-%d %R:%S&#x27;</span>) <span class="keyword">AS</span> DateTime;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌─DateTime────────────┐</span><br><span class="line"></span><br><span class="line">│ 2009-02-11 14:42:23 │</span><br><span class="line"></span><br><span class="line">└─────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> –&gt;</p><h2 id="now"><a href="#now" class="headerlink" title="now"></a>now</h2><p>Returns the current date and time.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">now()</span><br></pre></td></tr></table></figure><p><strong>Returned value</strong></p><ul><li>Current date and time.</li></ul><p>Type: Datetime.</p><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> now();</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─now()───────────────┐</span><br><span class="line">│ 2021-08-11 14:35:47 │</span><br><span class="line">└─────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="subtractDays"><a href="#subtractDays" class="headerlink" title="subtractDays"></a>subtractDays</h2><p>Function subtract a Date&#x2F;DateTime interval to a Date&#x2F;DateTime and then return the Date&#x2F;DateTime. </p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">subtractDays(<span class="type">date</span>, <span class="type">interval</span>)</span><br><span class="line">subtractDays(datetime, <span class="type">interval</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li><li><code>interval</code> - Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>Date&#x2F;DateTime</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span></span><br><span class="line">    toDate(<span class="string">&#x27;2019-01-01&#x27;</span>) <span class="keyword">AS</span> <span class="type">date</span>,</span><br><span class="line">    toDateTime(<span class="string">&#x27;2019-01-01 00:00:00&#x27;</span>) <span class="keyword">AS</span> date_time</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    subtractDays(<span class="type">date</span>, <span class="number">1</span>) <span class="keyword">AS</span> subtract_days_with_date,</span><br><span class="line">    subtractDays(date_time, <span class="number">1</span>) <span class="keyword">AS</span> subtract_days_with_date_time</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─subtract_days_with_date─┬─subtract_days_with_date_time─┐</span><br><span class="line">│ 2018-12-31              │ 2018-12-31 00:00:00          │</span><br><span class="line">└─────────────────────────┴──────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="subtractHours"><a href="#subtractHours" class="headerlink" title="subtractHours"></a>subtractHours</h2><p>Function subtract a Date&#x2F;DateTime interval to a Date&#x2F;DateTime and then return the Date&#x2F;DateTime. </p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">subtractHours(<span class="type">date</span>, <span class="type">interval</span>)</span><br><span class="line">subtractHours(datetime, <span class="type">interval</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li><li><code>interval</code> - Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>Date&#x2F;DateTime</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span></span><br><span class="line">    toDate(<span class="string">&#x27;2019-01-01&#x27;</span>) <span class="keyword">AS</span> <span class="type">date</span>,</span><br><span class="line">    toDateTime(<span class="string">&#x27;2019-01-01 00:00:00&#x27;</span>) <span class="keyword">AS</span> date_time</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    subtractHours(<span class="type">date</span>, <span class="number">1</span>) <span class="keyword">AS</span> subtract_hours_with_date,</span><br><span class="line">    subtractHours(date_time, <span class="number">1</span>) <span class="keyword">AS</span> subtract_hours_with_date_time</span><br></pre></td></tr></table></figure><!-- TODO: INCORRECT RESULT? --><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─subtract_hours_with_date─┬─subtract_hours_with_date_time─┐</span><br><span class="line">│ 2002-11-25               │ 2018-12-31 23:00:00           │</span><br><span class="line">└──────────────────────────┴───────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="subtractMinutes"><a href="#subtractMinutes" class="headerlink" title="subtractMinutes"></a>subtractMinutes</h2><p>Function subtract a Date&#x2F;DateTime interval to a Date&#x2F;DateTime and then return the Date&#x2F;DateTime. </p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">subtractMinutes(<span class="type">date</span>, <span class="type">interval</span>)</span><br><span class="line">subtractMinutes(datetime, <span class="type">interval</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li><li><code>interval</code> - Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>Date&#x2F;DateTime</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span></span><br><span class="line">    toDate(<span class="string">&#x27;2019-01-01&#x27;</span>) <span class="keyword">AS</span> <span class="type">date</span>,</span><br><span class="line">    toDateTime(<span class="string">&#x27;2019-01-01 00:00:00&#x27;</span>) <span class="keyword">AS</span> date_time</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    subtractMinutes(<span class="type">date</span>, <span class="number">1</span>) <span class="keyword">AS</span> subtract_minutes_with_date,</span><br><span class="line">    subtractMinutes(date_time, <span class="number">1</span>) <span class="keyword">AS</span> subtract_minutes_with_date_time</span><br></pre></td></tr></table></figure><!-- TODO: INCORRECT RESULT? --><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─subtract_minutes_with_date─┬─subtract_minutes_with_date_time─┐</span><br><span class="line">│ 2012-08-04                 │ 2018-12-31 23:59:00             │</span><br><span class="line">└────────────────────────────┴─────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="subtractMonths"><a href="#subtractMonths" class="headerlink" title="subtractMonths"></a>subtractMonths</h2><p>Function subtract a Date&#x2F;DateTime interval to a Date&#x2F;DateTime and then return the Date&#x2F;DateTime. </p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">subtractMonths(<span class="type">date</span>, <span class="type">interval</span>)</span><br><span class="line">subtractMonths(datetime, <span class="type">interval</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li><li><code>interval</code> - Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>Date&#x2F;DateTime</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span></span><br><span class="line">    toDate(<span class="string">&#x27;2019-01-01&#x27;</span>) <span class="keyword">AS</span> <span class="type">date</span>,</span><br><span class="line">    toDateTime(<span class="string">&#x27;2019-01-01 00:00:00&#x27;</span>) <span class="keyword">AS</span> date_time</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    subtractMonths(<span class="type">date</span>, <span class="number">1</span>) <span class="keyword">AS</span> subtract_months_with_date,</span><br><span class="line">    subtractMonths(date_time, <span class="number">1</span>) <span class="keyword">AS</span> subtract_months_with_date_time</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─subtract_months_with_date─┬─subtract_months_with_date_time─┐</span><br><span class="line">│ 2018-12-01                │ 2018-12-01 00:00:00            │</span><br><span class="line">└───────────────────────────┴────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="subtractQuarters"><a href="#subtractQuarters" class="headerlink" title="subtractQuarters"></a>subtractQuarters</h2><p>Function subtract a Date&#x2F;DateTime interval to a Date&#x2F;DateTime and then return the Date&#x2F;DateTime. </p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">subtractQuarters(<span class="type">date</span>, <span class="type">interval</span>)</span><br><span class="line">subtractQuarters(datetime, <span class="type">interval</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li><li><code>interval</code> - Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>Date&#x2F;DateTime</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span></span><br><span class="line">    toDate(<span class="string">&#x27;2019-01-01&#x27;</span>) <span class="keyword">AS</span> <span class="type">date</span>,</span><br><span class="line">    toDateTime(<span class="string">&#x27;2019-01-01 00:00:00&#x27;</span>) <span class="keyword">AS</span> date_time</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    subtractQuarters(<span class="type">date</span>, <span class="number">1</span>) <span class="keyword">AS</span> subtract_quarters_with_date,</span><br><span class="line">    subtractQuarters(date_time, <span class="number">1</span>) <span class="keyword">AS</span> subtract_quarters_with_date_time</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─subtract_quarters_with_date─┬─subtract_quarters_with_date_time─┐</span><br><span class="line">│ 2018-10-01                  │ 2018-10-01 00:00:00              │</span><br><span class="line">└─────────────────────────────┴──────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="subtractSeconds"><a href="#subtractSeconds" class="headerlink" title="subtractSeconds"></a>subtractSeconds</h2><p>Function subtract a Date&#x2F;DateTime interval to a Date&#x2F;DateTime and then return the Date&#x2F;DateTime. </p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">subtractSeconds(<span class="type">date</span>, <span class="type">interval</span>)</span><br><span class="line">subtractSeconds(datetime, <span class="type">interval</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li><li><code>interval</code> - Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>Date&#x2F;DateTime</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span></span><br><span class="line">    toDate(<span class="string">&#x27;2019-01-01&#x27;</span>) <span class="keyword">AS</span> <span class="type">date</span>,</span><br><span class="line">    toDateTime(<span class="string">&#x27;2019-01-01 00:00:00&#x27;</span>) <span class="keyword">AS</span> date_time</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    subtractSeconds(<span class="type">date</span>, <span class="number">1</span>) <span class="keyword">AS</span> subtract_seconds_with_date,</span><br><span class="line">    subtractSeconds(date_time, <span class="number">1</span>) <span class="keyword">AS</span> subtract_seconds_with_date_time</span><br></pre></td></tr></table></figure><!-- TODO: INCORRECT RESULT? --><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─subtract_seconds_with_date─┬─subtract_seconds_with_date_time─┐</span><br><span class="line">│ 2012-10-02                 │ 2018-12-31 23:59:59             │</span><br><span class="line">└────────────────────────────┴─────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="subtractWeeks"><a href="#subtractWeeks" class="headerlink" title="subtractWeeks"></a>subtractWeeks</h2><p>Function subtract a Date&#x2F;DateTime interval to a Date&#x2F;DateTime and then return the Date&#x2F;DateTime. </p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">subtractWeeks(<span class="type">date</span>, <span class="type">interval</span>)</span><br><span class="line">subtractWeeks(datetime, <span class="type">interval</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li><li><code>interval</code> - Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>Date&#x2F;DateTime</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span></span><br><span class="line">    toDate(<span class="string">&#x27;2019-01-01&#x27;</span>) <span class="keyword">AS</span> <span class="type">date</span>,</span><br><span class="line">    toDateTime(<span class="string">&#x27;2019-01-01 00:00:00&#x27;</span>) <span class="keyword">AS</span> date_time</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    subtractWeeks(<span class="type">date</span>, <span class="number">1</span>) <span class="keyword">AS</span> subtract_weeks_with_date,</span><br><span class="line">    subtractWeeks(date_time, <span class="number">1</span>) <span class="keyword">AS</span> subtract_weeks_with_date_time</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─subtract_weeks_with_date─┬─subtract_weeks_with_date_time─┐</span><br><span class="line">│ 2018-12-25               │ 2018-12-25 00:00:00           │</span><br><span class="line">└──────────────────────────┴───────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="subtractYears"><a href="#subtractYears" class="headerlink" title="subtractYears"></a>subtractYears</h2><p>Function subtract a Date&#x2F;DateTime interval to a Date&#x2F;DateTime and then return the Date&#x2F;DateTime. </p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">subtractYears(<span class="type">date</span>, <span class="type">interval</span>)</span><br><span class="line">subtractYears(datetime, <span class="type">interval</span>)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li><li><code>interval</code> - Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>Date&#x2F;DateTime</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span></span><br><span class="line">    toDate(<span class="string">&#x27;2019-01-01&#x27;</span>) <span class="keyword">AS</span> <span class="type">date</span>,</span><br><span class="line">    toDateTime(<span class="string">&#x27;2019-01-01 00:00:00&#x27;</span>) <span class="keyword">AS</span> date_time</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    subtractYears(<span class="type">date</span>, <span class="number">1</span>) <span class="keyword">AS</span> subtract_years_with_date,</span><br><span class="line">    subtractYears(date_time, <span class="number">1</span>) <span class="keyword">AS</span> subtract_years_with_date_time</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─subtract_years_with_date─┬─subtract_years_with_date_time─┐</span><br><span class="line">│ 2018-01-01               │ 2018-01-01 00:00:00           │</span><br><span class="line">└──────────────────────────┴───────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="timeSlot"><a href="#timeSlot" class="headerlink" title="timeSlot"></a>timeSlot</h2><p>Rounds the time to the half hour.</p><p>This function is specific to Yandex.Metrica, since half an hour is the minimum amount of time for breaking a session into two sessions if a tracking tag shows a single user’s consecutive pageviews that differ in time by strictly more than this amount. This means that tuples (the tag ID, user ID, and time slot) can be used to search for pageviews that are included in the corresponding session.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timeSlot(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>datetime</code>- DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>DateTime</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> timeSlot(toDateTime(<span class="string">&#x27;2018-01-01 01:01:01&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─timeSlot(toDateTime(&#x27;2018-01-01 01:01:01&#x27;))─┐</span><br><span class="line">│ 2018-01-01 01:00:00                         │</span><br><span class="line">└─────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="timeSlots"><a href="#timeSlots" class="headerlink" title="timeSlots"></a>timeSlots</h2><p>For a time interval starting at ‘StartTime’ and continuing for ‘Duration’ seconds, it returns an array of moments in time, consisting of points from this interval rounded down to the ‘Size’ in seconds. ‘Size’ is an optional parameter: a constant UInt32, set to 1800 by default.</p><p>This is necessary for searching for pageviews in the corresponding session.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timeSlots(StartTime, Duration,[, Size])</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>StartTime</code>- DateTime</li><li><code>Duration</code> - Duration in seconds, UInt32</li><li><code>Size</code> - Size of the interval.</li></ul><p><strong>Returned value</strong></p><ul><li>An array of timeSlot.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> timeSlots(toDateTime(<span class="string">&#x27;2012-01-01 12:20:00&#x27;</span>), toUInt32(<span class="number">600</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─timeSlots(toDateTime(&#x27;2012-01-01 12:20:00&#x27;), toUInt32(600))─┐</span><br><span class="line">│ [2012-01-01 12:00:00, 2012-01-01 12:30:00]                  │</span><br><span class="line">└─────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><!-- TODO:Sensitive Function of Bytehouse --><!-- ## timezoneReturns the timezone of the server.**Syntax**<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timezone()</span><br></pre></td></tr></table></figure><p>Alias: <code>timezone</code> .</p><p><strong>Returned value</strong></p><ul><li>Timezone.<br>Type: String.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> timezone()</span><br><span class="line">``` <span class="comment">--&gt;## toDayOfMonth</span></span><br><span class="line">Converts a <span class="type">date</span> <span class="keyword">or</span> <span class="type">date</span> <span class="keyword">with</span> <span class="type">time</span> <span class="keyword">to</span> a UInt8 number containing the number <span class="keyword">of</span> the <span class="keyword">day</span> <span class="keyword">of</span> the <span class="keyword">month</span> (<span class="number">1</span><span class="number">-31</span>).</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span>Syntax<span class="operator">*</span><span class="operator">*</span></span><br><span class="line"></span><br><span class="line">```<span class="keyword">sql</span></span><br><span class="line">toDayOfMonth(<span class="type">date</span>)</span><br><span class="line">toDayOfMonth(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>day of the month. UInt8</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toDayOfMonth(toDate(<span class="string">&#x27;2021-08-12&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toDayOfMonth(toDate(&#x27;2021-08-12&#x27;))─┐</span><br><span class="line">│ 12                                 │</span><br><span class="line">└────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toDayOfMonth(toDateTime(<span class="string">&#x27;2021-08-12 00:00:00&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toDayOfMonth(toDateTime(&#x27;2021-08-12 00:00:00&#x27;))─┐</span><br><span class="line">│ 12                                              │</span><br><span class="line">└─────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toDayOfWeek"><a href="#toDayOfWeek" class="headerlink" title="toDayOfWeek"></a>toDayOfWeek</h2><p>Converts a date or date with time to a UInt8 number containing the number of the day of the week (Monday is 1, and Sunday is 7).</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toDayOfWeek(<span class="type">date</span>)</span><br><span class="line">toDayOfWeek(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>day of the week. UInt8</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toDayOfWeek(toDate(<span class="string">&#x27;2021-08-12&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toDayOfWeek(toDate(&#x27;2021-08-12&#x27;))─┐</span><br><span class="line">│ 4                                 │</span><br><span class="line">└───────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toDayOfWeek(toDateTime(<span class="string">&#x27;2021-08-12 00:00:00&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toDayOfWeek(toDateTime(&#x27;2021-08-12 00:00:00&#x27;))─┐</span><br><span class="line">│ 4                                              │</span><br><span class="line">└────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toDayOfYear"><a href="#toDayOfYear" class="headerlink" title="toDayOfYear"></a>toDayOfYear</h2><p>Converts a date or date with time to a UInt16 number containing the number of the day of the year (1-366).</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toDayOfYear(<span class="type">date</span>)</span><br><span class="line">toDayOfYear(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>day of the year. UInt8</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toDayOfWeek(toDate(<span class="string">&#x27;2021-08-12&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toDayOfWeek(toDate(&#x27;2021-08-12&#x27;))─┐</span><br><span class="line">│ 4                                 │</span><br><span class="line">└───────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toDayOfWeek(toDateTime(<span class="string">&#x27;2021-08-12 00:00:00&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toDayOfWeek(toDateTime(&#x27;2021-08-12 00:00:00&#x27;))─┐</span><br><span class="line">│ 4                                              │</span><br><span class="line">└────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toHour"><a href="#toHour" class="headerlink" title="toHour"></a>toHour</h2><p>Converts a date with time to a UInt8 number containing the number of the hour in 24-hour time (0-23).</p><p>This function assumes that if clocks are moved ahead, it is by one hour and occurs at 2 a.m., and if clocks are moved back, it is by one hour and occurs at 3 a.m. (which is not always true – even in Moscow the clocks were twice changed at a different time).</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toHour(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>datetime</code>- DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>number of the hour in 24-hour time. UInt8</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toHour(toDateTime(<span class="string">&#x27;2021-08-12 00:00:00&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toHour(toDateTime(&#x27;2021-08-12 00:00:00&#x27;))─┐</span><br><span class="line">│ 0                                         │</span><br><span class="line">└───────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toISOWeek"><a href="#toISOWeek" class="headerlink" title="toISOWeek"></a>toISOWeek</h2><p>Converts a date or date with time to a UInt8 number containing the ISO Week number.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toISOWeek(<span class="type">date</span>)</span><br><span class="line">toISOWeek(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>ISO Week number. UInt8</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toISOWeek(toDate(<span class="string">&#x27;2021-08-12&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toISOWeek(toDate(&#x27;2021-08-12&#x27;))─┐</span><br><span class="line">│ 32                              │</span><br><span class="line">└─────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toISOWeek(toDateTime(<span class="string">&#x27;2021-08-12 00:00:00&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toISOWeek(toDateTime(&#x27;2021-08-12 00:00:00&#x27;))─┐</span><br><span class="line">│ 32                                           │</span><br><span class="line">└──────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toISOYear"><a href="#toISOYear" class="headerlink" title="toISOYear"></a>toISOYear</h2><p>Converts a date or date with time to a UInt16 number containing the ISO Year number.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toISOYear(<span class="type">date</span>)</span><br><span class="line">toISOYear(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>ISO Year number. UInt16</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toISOYear(toDate(<span class="string">&#x27;2021-08-12&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toISOYear(toDate(&#x27;2021-08-12&#x27;))─┐</span><br><span class="line">│ 2021                            │</span><br><span class="line">└─────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toISOYear(toDateTime(<span class="string">&#x27;2021-08-12 00:00:00&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toISOYear(toDateTime(&#x27;2021-08-12 00:00:00&#x27;))─┐</span><br><span class="line">│ 2021                                         │</span><br><span class="line">└──────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toMinute"><a href="#toMinute" class="headerlink" title="toMinute"></a>toMinute</h2><p>Converts a date with time to a UInt8 number containing the number of the minute of the hour (0-59).</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toMinute(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>datetime</code>- DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>minute of the hour. UInt8</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toMinute(toDateTime(<span class="string">&#x27;2021-08-12 00:00:00&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toMinute(toDateTime(&#x27;2021-08-12 00:00:00&#x27;))─┐</span><br><span class="line">│ 0                                           │</span><br><span class="line">└─────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toMonday"><a href="#toMonday" class="headerlink" title="toMonday"></a>toMonday</h2><p>Rounds down a date or date with time to the nearest Monday.</p><p>Returns the date.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toMonday(<span class="type">date</span>)</span><br><span class="line">toMonday(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>date to the nearest Monday. Date</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toMonday(toDate(<span class="string">&#x27;2021-08-12&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toMonday(toDate(&#x27;2021-08-12&#x27;))─┐</span><br><span class="line">│ 2021-08-09                     │</span><br><span class="line">└────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toMonday(toDateTime(<span class="string">&#x27;2021-08-12 00:00:00&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toMonday(toDateTime(&#x27;2021-08-12 00:00:00&#x27;))─┐</span><br><span class="line">│ 2021-08-09                                  │</span><br><span class="line">└─────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toMonth"><a href="#toMonth" class="headerlink" title="toMonth"></a>toMonth</h2><p>Converts a date or date with time to a UInt8 number containing the month number (1-12).</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toMonth(<span class="type">date</span>)</span><br><span class="line">toMonth(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>date to the nearest Monday. Date</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toMonday(toDate(<span class="string">&#x27;2021-08-12&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toMonday(toDate(&#x27;2021-08-12&#x27;))─┐</span><br><span class="line">│ 2021-08-09                     │</span><br><span class="line">└────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toMonday(toDateTime(<span class="string">&#x27;2021-08-12 00:00:00&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toMonday(toDateTime(&#x27;2021-08-12 00:00:00&#x27;))─┐</span><br><span class="line">│ 2021-08-09                                  │</span><br><span class="line">└─────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toQuarter"><a href="#toQuarter" class="headerlink" title="toQuarter"></a>toQuarter</h2><p>Converts a date or date with time to a UInt8 number containing the quarter number.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toQuarter(<span class="type">date</span>)</span><br><span class="line">toQuarter(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>quarter number. UInt8</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toQuarter(toDate(<span class="string">&#x27;2021-08-12&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toQuarter(toDate(&#x27;2021-08-12&#x27;))─┐</span><br><span class="line">│ 3                               │</span><br><span class="line">└─────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toQuarter(toDateTime(<span class="string">&#x27;2021-08-12 00:00:00&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toQuarter(toDateTime(&#x27;2021-08-12 00:00:00&#x27;))─┐</span><br><span class="line">│ 3                                            │</span><br><span class="line">└──────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toRelativeDayNum"><a href="#toRelativeDayNum" class="headerlink" title="toRelativeDayNum"></a>toRelativeDayNum</h2><p>Converts a date with time or date to the number of the day, starting from a certain fixed point in the past.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toRelativeDayNum(<span class="type">date</span>)</span><br><span class="line">toRelativeDayNum(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>number of the day, starting from a certain fixed point in the past. UInt16</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toRelativeDayNum(toDate(<span class="string">&#x27;2021-08-12&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toRelativeDayNum(toDate(&#x27;2021-08-12&#x27;))─┐</span><br><span class="line">│ 18851                                  │</span><br><span class="line">└────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toRelativeDayNum(toDateTime(<span class="string">&#x27;2021-08-12 00:00:00&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toRelativeDayNum(toDateTime(&#x27;2021-08-12 00:00:00&#x27;))─┐</span><br><span class="line">│ 18851                                               │</span><br><span class="line">└─────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toRelativeHourNum"><a href="#toRelativeHourNum" class="headerlink" title="toRelativeHourNum"></a>toRelativeHourNum</h2><p>Converts a date with time or date to the number of the hour, starting from a certain fixed point in the past.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toRelativeHourNum(<span class="type">date</span>)</span><br><span class="line">toRelativeHourNum(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>number of the hour, starting from a certain fixed point in the past. UInt32</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toRelativeHourNum(toDate(<span class="string">&#x27;2021-08-12&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toRelativeHourNum(toDate(&#x27;2021-08-12&#x27;))─┐</span><br><span class="line">│ 452416                                  │</span><br><span class="line">└─────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toRelativeHourNum(toDateTime(<span class="string">&#x27;2021-08-12 00:00:00&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toRelativeHourNum(toDateTime(&#x27;2021-08-12 00:00:00&#x27;))─┐</span><br><span class="line">│ 452416                                               │</span><br><span class="line">└──────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toRelativeMinuteNum"><a href="#toRelativeMinuteNum" class="headerlink" title="toRelativeMinuteNum"></a>toRelativeMinuteNum</h2><p>Converts a date with time or date to the number of the minute, starting from a certain fixed point in the past.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toRelativeMinuteNum(<span class="type">date</span>)</span><br><span class="line">toRelativeMinuteNum(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>number of the minute, starting from a certain fixed point in the past. UInt32</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toRelativeMinuteNum(toDate(<span class="string">&#x27;2021-08-12&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toRelativeMinuteNum(toDate(&#x27;2021-08-12&#x27;))─┐</span><br><span class="line">│ 27144960                                  │</span><br><span class="line">└───────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toRelativeMinuteNum(toDateTime(<span class="string">&#x27;2021-08-12 00:00:00&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toRelativeMinuteNum(toDateTime(&#x27;2021-08-12 00:00:00&#x27;))─┐</span><br><span class="line">│ 27144960                                               │</span><br><span class="line">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toRelativeMonthNum"><a href="#toRelativeMonthNum" class="headerlink" title="toRelativeMonthNum"></a>toRelativeMonthNum</h2><p>Converts a date with time or date to the number of the month, starting from a certain fixed point in the past.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toRelativeMonthNum(<span class="type">date</span>)</span><br><span class="line">toRelativeMonthNum(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>number of the month, starting from a certain fixed point in the past. UInt16</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toRelativeMonthNum(toDate(<span class="string">&#x27;2021-08-12&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toRelativeMonthNum(toDate(&#x27;2021-08-12&#x27;))─┐</span><br><span class="line">│ 24260                                    │</span><br><span class="line">└──────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toRelativeMonthNum(toDateTime(<span class="string">&#x27;2021-08-12 00:00:00&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toRelativeMonthNum(toDateTime(&#x27;2021-08-12 00:00:00&#x27;))─┐</span><br><span class="line">│ 24260                                                 │</span><br><span class="line">└───────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toRelativeQuarterNum"><a href="#toRelativeQuarterNum" class="headerlink" title="toRelativeQuarterNum"></a>toRelativeQuarterNum</h2><p>Converts a date with time or date to the number of the quarter, starting from a certain fixed point in the past.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toRelativeQuarterNum(<span class="type">date</span>)</span><br><span class="line">toRelativeQuarterNum(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>number of the quarter, starting from a certain fixed point in the past. UInt16</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toRelativeQuarterNum(toDate(<span class="string">&#x27;2021-08-12&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toRelativeQuarterNum(toDate(&#x27;2021-08-12&#x27;))─┐</span><br><span class="line">│ 8086                                       │</span><br><span class="line">└────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toRelativeQuarterNum(toDateTime(<span class="string">&#x27;2021-08-12 00:00:00&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toRelativeQuarterNum(toDateTime(&#x27;2021-08-12 00:00:00&#x27;))─┐</span><br><span class="line">│ 8086                                                    │</span><br><span class="line">└─────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toRelativeSecondNum"><a href="#toRelativeSecondNum" class="headerlink" title="toRelativeSecondNum"></a>toRelativeSecondNum</h2><p>Converts a date with time or date to the number of the second, starting from a certain fixed point in the past.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toRelativeSecondNum(<span class="type">date</span>)</span><br><span class="line">toRelativeSecondNum(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>number of the second, starting from a certain fixed point in the past. UInt32</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toRelativeSecondNum(toDate(<span class="string">&#x27;2021-08-12&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toRelativeSecondNum(toDate(&#x27;2021-08-12&#x27;))─┐</span><br><span class="line">│ 1628697600                                │</span><br><span class="line">└───────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toRelativeSecondNum(toDateTime(<span class="string">&#x27;2021-08-12 00:00:00&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toRelativeSecondNum(toDateTime(&#x27;2021-08-12 00:00:00&#x27;))─┐</span><br><span class="line">│ 1628697600                                             │</span><br><span class="line">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toRelativeWeekNum"><a href="#toRelativeWeekNum" class="headerlink" title="toRelativeWeekNum"></a>toRelativeWeekNum</h2><p>Converts a date with time or date to the number of the week, starting from a certain fixed point in the past.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toRelativeWeekNum(<span class="type">date</span>)</span><br><span class="line">toRelativeWeekNum(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>number of the week, starting from a certain fixed point in the past. UInt16</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toRelativeWeekNum(toDate(<span class="string">&#x27;2021-08-12&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toRelativeWeekNum(toDate(&#x27;2021-08-12&#x27;))─┐</span><br><span class="line">│ 2693                                    │</span><br><span class="line">└─────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toRelativeWeekNum(toDateTime(<span class="string">&#x27;2021-08-12 00:00:00&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toRelativeWeekNum(toDateTime(&#x27;2021-08-12 00:00:00&#x27;))─┐</span><br><span class="line">│ 2693                                                 │</span><br><span class="line">└──────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toRelativeYearNum"><a href="#toRelativeYearNum" class="headerlink" title="toRelativeYearNum"></a>toRelativeYearNum</h2><p>Converts a date with time or date to the number of the year, starting from a certain fixed point in the past.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toRelativeYearNum(<span class="type">date</span>)</span><br><span class="line">toRelativeYearNum(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>number of the year, starting from a certain fixed point in the past. UInt16</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toRelativeYearNum(toDate(<span class="string">&#x27;2021-08-12&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toRelativeYearNum(toDate(&#x27;2021-08-12&#x27;))─┐</span><br><span class="line">│ 2021                                    │</span><br><span class="line">└─────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toRelativeYearNum(toDateTime(<span class="string">&#x27;2021-08-12 00:00:00&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toRelativeYearNum(toDateTime(&#x27;2021-08-12 00:00:00&#x27;))─┐</span><br><span class="line">│ 2021                                                 │</span><br><span class="line">└──────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toSecond"><a href="#toSecond" class="headerlink" title="toSecond"></a>toSecond</h2><p>Converts a date with time to a UInt8 number containing the number of the second in the minute (0-59).</p><p>Leap seconds are not accounted for.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toSecond(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>datetime</code>- DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>number of the second in the minute. UInt8</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toSecond(toDateTime(<span class="string">&#x27;2021-08-12 00:00:00&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toSecond(toDateTime(&#x27;2021-08-12 00:00:00&#x27;))─┐</span><br><span class="line">│ 0                                           │</span><br><span class="line">└─────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toStartOfDay"><a href="#toStartOfDay" class="headerlink" title="toStartOfDay"></a>toStartOfDay</h2><p>Rounds down a date with time to the start of the day.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toStartOfDay(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>datetime</code>- DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>Rounds down a date with time to the start of the day. DateTime</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toStartOfDay(toDateTime(<span class="string">&#x27;2021-08-12 08:00:00&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toStartOfDay(toDateTime(&#x27;2021-08-12 08:00:00&#x27;))─┐</span><br><span class="line">│ 2021-08-12 00:00:00                             │</span><br><span class="line">└─────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toStartOfFifteenMinutes"><a href="#toStartOfFifteenMinutes" class="headerlink" title="toStartOfFifteenMinutes"></a>toStartOfFifteenMinutes</h2><p>Rounds down the date with time to the start of the fifteen-minute interval.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toStartOfFifteenMinutes(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>datetime</code>- DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>Rounds down the date with time to the start of the fifteen-minute interval. DateTime</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toStartOfFifteenMinutes(toDateTime(<span class="string">&#x27;2021-08-12 00:10:00&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toStartOfFifteenMinutes(toDateTime(&#x27;2021-08-12 00:10:00&#x27;))─┐</span><br><span class="line">│ 2021-08-12 00:00:00                                        │</span><br><span class="line">└────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toStartOfFiveMinute"><a href="#toStartOfFiveMinute" class="headerlink" title="toStartOfFiveMinute"></a>toStartOfFiveMinute</h2><p>Rounds down a date with time to the start of the five-minute interval.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toStartOfFiveMinute(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>datetime</code>- DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>Rounds down a date with time to the start of the five-minute interval. DateTime</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toStartOfFiveMinute(toDateTime(<span class="string">&#x27;2021-08-12 00:09:00&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toStartOfFiveMinute(toDateTime(&#x27;2021-08-12 00:09:00&#x27;))─┐</span><br><span class="line">│ 2021-08-12 00:05:00                                    │</span><br><span class="line">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toStartOfHour"><a href="#toStartOfHour" class="headerlink" title="toStartOfHour"></a>toStartOfHour</h2><p>Rounds down a date with time to the start of the hour.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toStartOfHour(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>datetime</code>- DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>Rounds down a date with time to the start of the hour. DateTime</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toStartOfHour(toDateTime(<span class="string">&#x27;2021-08-12 01:09:00&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toStartOfHour(toDateTime(&#x27;2021-08-12 01:09:00&#x27;))─┐</span><br><span class="line">│ 2021-08-12 01:00:00                              │</span><br><span class="line">└──────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toStartOfISOYear"><a href="#toStartOfISOYear" class="headerlink" title="toStartOfISOYear"></a>toStartOfISOYear</h2><p>Rounds down a date or date with time to the first day of ISO year.</p><p>Returns the date.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toStartOfISOYear(<span class="type">date</span>)</span><br><span class="line">toStartOfISOYear(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>Rounds down a date or date with time to the first day of ISO year. Date</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toStartOfISOYear(toDate(<span class="string">&#x27;2021-08-12&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toStartOfISOYear(toDate(&#x27;2021-08-12&#x27;))─┐</span><br><span class="line">│ 2021-01-04                             │</span><br><span class="line">└────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toStartOfISOYear(toDateTime(<span class="string">&#x27;2021-08-12 00:00:00&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toStartOfISOYear(toDateTime(&#x27;2021-08-12 00:00:00&#x27;))─┐</span><br><span class="line">│ 2021-01-04                                          │</span><br><span class="line">└─────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toStartOfInterval"><a href="#toStartOfInterval" class="headerlink" title="toStartOfInterval"></a>toStartOfInterval</h2><p>This is a generalization of other functions named <code>toStartOf*</code> . For example,<br><code>toStartOfInterval(t, INTERVAL 1 year)</code> returns the same as <code>toStartOfYear(t)</code> ,<br><code>toStartOfInterval(t, INTERVAL 1 month)</code> returns the same as <code>toStartOfMonth(t)</code> ,<br><code>toStartOfInterval(t, INTERVAL 1 day)</code> returns the same as <code>toStartOfDay(t)</code> ,<br><code>toStartOfInterval(t, INTERVAL 15 minute)</code> returns the same as <code>toStartOfFifteenMinutes(t)</code> etc.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toStartOfInterval(time_or_data, <span class="type">INTERVAL</span> x unit [, time_zone])</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>time_or_data</code>- Date&#x2F;DateTime</li><li><code>x unit</code> - x is UInt*, unit can be second, minute, hour, day, month, year, quarter</li></ul><p><strong>Returned value</strong></p><ul><li>Date&#x2F;DateTime</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toStartOfInterval(toDateTime(<span class="string">&#x27;2021-08-12 01:09:00&#x27;</span>), <span class="type">INTERVAL</span> <span class="number">2</span> <span class="keyword">minute</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toStartOfInterval(toDateTime(&#x27;2021-08-12 01:09:00&#x27;), toIntervalMinute(2))─┐</span><br><span class="line">│ 2021-08-12 01:08:00                                                       │</span><br><span class="line">└───────────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toStartOfMinute"><a href="#toStartOfMinute" class="headerlink" title="toStartOfMinute"></a>toStartOfMinute</h2><p>Rounds down a date with time to the start of the minute.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toStartOfMinute(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>datetime</code>- DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>Rounds down a date with time to the start of the minute. DateTime</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toStartOfMinute(toDateTime(<span class="string">&#x27;2021-08-12 00:01:30&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toStartOfMinute(toDateTime(&#x27;2021-08-12 00:01:30&#x27;))─┐</span><br><span class="line">│ 2021-08-12 00:01:00                                │</span><br><span class="line">└────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toStartOfMonth"><a href="#toStartOfMonth" class="headerlink" title="toStartOfMonth"></a>toStartOfMonth</h2><p>Rounds down a date or date with time to the first day of the month.</p><p>Returns the date.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toStartOfMonth(<span class="type">date</span>)</span><br><span class="line">toStartOfMonth(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>Rounds down a date or date with time to the first day of the month. Date</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toStartOfMonth(toDate(<span class="string">&#x27;2021-08-12&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toStartOfMonth(toDate(&#x27;2021-08-12&#x27;))─┐</span><br><span class="line">│ 2021-08-01                           │</span><br><span class="line">└──────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toStartOfMonth(toDateTime(<span class="string">&#x27;2021-08-12 00:01:30&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toStartOfMonth(toDateTime(&#x27;2021-08-12 00:01:30&#x27;))─┐</span><br><span class="line">│ 2021-08-01                                        │</span><br><span class="line">└───────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toStartOfQuarter"><a href="#toStartOfQuarter" class="headerlink" title="toStartOfQuarter"></a>toStartOfQuarter</h2><p>Rounds down a date or date with time to the first day of the quarter.<br>The first day of the quarter is either 1 January, 1 April, 1 July, or 1 October.<br>Returns the date.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toStartOfQuarter(<span class="type">date</span>)</span><br><span class="line">toStartOfQuarter(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>Rounds down a date or date with time to the first day of the quarter. Date</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toStartOfQuarter(toDate(<span class="string">&#x27;2021-08-12&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toStartOfQuarter(toDate(&#x27;2021-08-12&#x27;))─┐</span><br><span class="line">│ 2021-07-01                             │</span><br><span class="line">└────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toStartOfQuarter(toDateTime(<span class="string">&#x27;2021-08-12 00:01:30&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toStartOfQuarter(toDateTime(&#x27;2021-08-12 00:01:30&#x27;))─┐</span><br><span class="line">│ 2021-07-01                                          │</span><br><span class="line">└─────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toStartOfTenMinutes"><a href="#toStartOfTenMinutes" class="headerlink" title="toStartOfTenMinutes"></a>toStartOfTenMinutes</h2><p>Rounds down a date with time to the start of the ten-minute interval.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toStartOfTenMinutes(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>datetime</code>- DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>Rounds down a date with time to the start of the ten-minute interval. DateTime</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toStartOfTenMinutes(toDateTime(<span class="string">&#x27;2021-08-12 00:01:30&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toStartOfTenMinutes(toDateTime(&#x27;2021-08-12 00:01:30&#x27;))─┐</span><br><span class="line">│ 2021-08-12 00:00:00                                    │</span><br><span class="line">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toStartOfWeek"><a href="#toStartOfWeek" class="headerlink" title="toStartOfWeek"></a>toStartOfWeek</h2><p>Rounds down a date or date with time to the nearest Sunday or Monday by mode.<br>Returns the date.<br>The mode argument works exactly like the mode argument to toWeek(). For the single-argument syntax, a mode value of 0 is used.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toStartOfWeek(<span class="type">date</span>\[,mode\])</span><br><span class="line">toStartOfWeek(datetime\[,mode\])</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li><li><code>mode</code> - Refer toWeek mode.</li></ul><p><strong>Returned value</strong></p><ul><li>Rounds down a date or date with time to the nearest Sunday or Monday by mode. DateTime</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toStartOfWeek(toDateTime(<span class="string">&#x27;2021-08-12 00:01:30&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toStartOfWeek(toDateTime(&#x27;2021-08-12 00:01:30&#x27;))─┐</span><br><span class="line">│ 2021-08-08                                       │</span><br><span class="line">└──────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toStartOfYear"><a href="#toStartOfYear" class="headerlink" title="toStartOfYear"></a>toStartOfYear</h2><p>Rounds down a date or date with time to the first day of the year.</p><p>Returns the date.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toStartOfYear(<span class="type">date</span>)</span><br><span class="line">toStartOfYear(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>Rounds down a date or date with time to the first day of the year. Date</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toStartOfYear(toDateTime(<span class="string">&#x27;2021-08-12 00:01:30&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toStartOfYear(toDateTime(&#x27;2021-08-12 00:01:30&#x27;))─┐</span><br><span class="line">│ 2021-01-01                                       │</span><br><span class="line">└──────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toTime"><a href="#toTime" class="headerlink" title="toTime"></a>toTime</h2><p>Converts a date with time to a certain fixed date, while preserving the time.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toTime(<span class="type">date</span>)</span><br><span class="line">toTime(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>DateTime</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toTime(toDateTime(<span class="string">&#x27;2021-08-12 00:01:30&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toTypeName(toTime(toDateTime(&#x27;2021-08-12 00:01:30&#x27;)))─┐</span><br><span class="line">│ DateTime(&#x27;PRC&#x27;)                                       │</span><br><span class="line">└───────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toTimeZone"><a href="#toTimeZone" class="headerlink" title="toTimeZone"></a>toTimeZone</h2><p>Converts time or date and time to the specified time zone. The time zone is an attribute of the <code>Date</code> and <code>DateTime</code> data types. The internal value (number of seconds) of the table field or of the resultset’s column does not change, the column’s type changes and its string representation changes accordingly.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toTimezone(<span class="keyword">value</span>, timezone)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>value</code> — Time or date and time. Date&#x2F;DateTime. </li><li><code>timezone</code> — Timezone for the returned value. String.</li></ul><p><strong>Returned value</strong></p><ul><li>Date and time. DateTime.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toDateTime(<span class="string">&#x27;2019-01-01 00:00:00&#x27;</span>, <span class="string">&#x27;UTC&#x27;</span>) <span class="keyword">AS</span> time_utc,</span><br><span class="line">    toTypeName(time_utc) <span class="keyword">AS</span> type_utc,</span><br><span class="line">    toInt32(time_utc) <span class="keyword">AS</span> int32utc,</span><br><span class="line">    toTimeZone(time_utc, <span class="string">&#x27;Asia/Yekaterinburg&#x27;</span>) <span class="keyword">AS</span> time_yekat,</span><br><span class="line">    toTypeName(time_yekat) <span class="keyword">AS</span> type_yekat,</span><br><span class="line">    toInt32(time_yekat) <span class="keyword">AS</span> int32yekat,</span><br><span class="line">    toTimeZone(time_utc, <span class="string">&#x27;US/Samoa&#x27;</span>) <span class="keyword">AS</span> time_samoa,</span><br><span class="line">    toTypeName(time_samoa) <span class="keyword">AS</span> type_samoa,</span><br><span class="line">    toInt32(time_samoa) <span class="keyword">AS</span> int32samoa</span><br><span class="line">FORMAT Vertical;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Row 1:</span><br><span class="line">──────</span><br><span class="line">time_utc:   2019-01-01 00:00:00</span><br><span class="line">type_utc:   DateTime(&#x27;UTC&#x27;)</span><br><span class="line">int32utc:   1546300800</span><br><span class="line">time_yekat: 2019-01-01 05:00:00</span><br><span class="line">type_yekat: DateTime(&#x27;Asia/Yekaterinburg&#x27;)</span><br><span class="line">int32yekat: 1546300800</span><br><span class="line">time_samoa: 2018-12-31 13:00:00</span><br><span class="line">type_samoa: DateTime(&#x27;US/Samoa&#x27;)</span><br><span class="line">int32samoa: 1546300800</span><br></pre></td></tr></table></figure><p><code>toTimeZone(time_utc, &#39;Asia/Yekaterinburg&#39;)</code> changes the <code>DateTime(&#39;UTC&#39;)</code> type to <code>DateTime(&#39;Asia/Yekaterinburg&#39;)</code> . The value (Unixtimestamp) 1546300800 stays the same, but the string representation (the result of the toString() function) changes from <code>time_utc: 2019-01-01 00:00:00</code> to <code>time_yekat: 2019-01-01 05:00:00</code> .</p><h2 id="toWeek"><a href="#toWeek" class="headerlink" title="toWeek"></a>toWeek</h2><p>This function returns the week number for date or datetime. The two-argument form of toWeek() enables you to specify whether the week starts on Sunday or Monday and whether the return value should be in the range from 0 to 53 or from 1 to 53. If the mode argument is omitted, the default mode is 0.</p><p><code>toISOWeek()</code> is a compatibility function that is equivalent to <code>toWeek(date,3)</code> .</p><p>The following table describes how the mode argument works.</p><table><thead><tr><th><strong>Mode</strong></th><th><strong>First day of week</strong></th><th><strong>Range</strong></th><th><strong>Week 1 is the first week …</strong></th></tr></thead><tbody><tr><td>0</td><td>Sunday</td><td>0-53</td><td>with a Sunday in this year</td></tr><tr><td>1</td><td>Monday</td><td>0-53</td><td>with 4 or more days this year</td></tr><tr><td>2</td><td>Sunday</td><td>1-53</td><td>with a Sunday in this year</td></tr><tr><td>3</td><td>Monday</td><td>1-53</td><td>with 4 or more days this year</td></tr><tr><td>4</td><td>Sunday</td><td>0-53</td><td>with 4 or more days this year</td></tr><tr><td>5</td><td>Monday</td><td>0-53</td><td>with a Monday in this year</td></tr><tr><td>6</td><td>Sunday</td><td>1-53</td><td>with 4 or more days this year</td></tr><tr><td>7</td><td>Monday</td><td>1-53</td><td>with a Monday in this year</td></tr><tr><td>8</td><td>Sunday</td><td>1-53</td><td>contains January 1</td></tr><tr><td>9</td><td>Monday</td><td>1-53</td><td>contains January 1</td></tr></tbody></table><p>For mode values with a meaning of “with 4 or more days this year,” weeks are numbered according to ISO 8601:1988:</p><ul><li><p>If the week containing January 1 has 4 or more days in the new year, it is week 1. </p></li><li><p>Otherwise, it is the last week of the previous year, and the next week is week 1.</p></li></ul><p>For mode values with a meaning of “contains January 1”, the week contains January 1 is week 1. It does not matter how many days in the new year the week contained, even if it contained only one day.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toWeek(<span class="type">date</span>, [, mode][, Timezone])</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date</code> – Date or DateTime. </li><li><code>mode</code> – Optional parameter, Range of values is [0,9], default is 0.</li><li><code>Timezone</code> – Optional parameter, it behaves like any other conversion function.</li></ul><p><strong>Returned value</strong></p><ul><li>week number. UInt8</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toDate(<span class="string">&#x27;2016-12-27&#x27;</span>) <span class="keyword">AS</span> <span class="type">date</span>, toWeek(<span class="type">date</span>) <span class="keyword">AS</span> week0, toWeek(<span class="type">date</span>,<span class="number">1</span>) <span class="keyword">AS</span> week1, toWeek(<span class="type">date</span>,<span class="number">9</span>) <span class="keyword">AS</span> week9;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─date───────┬─week0─┬─week1─┬─week9─┐</span><br><span class="line">│ 2016-12-27 │ 52    │ 52    │ 1     │</span><br><span class="line">└────────────┴───────┴───────┴───────┘</span><br></pre></td></tr></table></figure><h2 id="toYYYYMM"><a href="#toYYYYMM" class="headerlink" title="toYYYYMM"></a>toYYYYMM</h2><p>Converts a date or date with time to a UInt32 number containing the year and month number (YYYY * 100 + MM).</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toYYYYMM(<span class="type">date</span>)</span><br><span class="line">toYYYYMM(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>number containing the year and month number. UInt32</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toYYYYMM(toDate(<span class="string">&#x27;2021-08-12&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toYYYYMM(toDate(&#x27;2021-08-12&#x27;))─┐</span><br><span class="line">│ 202108                         │</span><br><span class="line">└────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toYYYYMM(toDateTime(<span class="string">&#x27;2021-08-12 00:00:00&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toYYYYMM(toDateTime(&#x27;2021-08-12 00:00:00&#x27;))─┐</span><br><span class="line">│ 202108                                      │</span><br><span class="line">└─────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toYYYYMMDD"><a href="#toYYYYMMDD" class="headerlink" title="toYYYYMMDD"></a>toYYYYMMDD</h2><p>Converts a date or date with time to a UInt32 number containing the year and month, and day (YYYY * 10000 + MM * 100 + DD).</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toYYYYMMDD(<span class="type">date</span>)</span><br><span class="line">toYYYYMMDD(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>number containing the year and month, and day. UInt32</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toYYYYMMDD(toDate(<span class="string">&#x27;2021-08-12&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toYYYYMMDD(toDate(&#x27;2021-08-12&#x27;))─┐</span><br><span class="line">│ 20210812                         │</span><br><span class="line">└──────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toYYYYMMDD(toDateTime(<span class="string">&#x27;2021-08-12 00:00:00&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toYYYYMMDD(toDateTime(&#x27;2021-08-12 00:00:00&#x27;))─┐</span><br><span class="line">│ 20210812                                      │</span><br><span class="line">└───────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toYYYYMMDDhhmmss"><a href="#toYYYYMMDDhhmmss" class="headerlink" title="toYYYYMMDDhhmmss"></a>toYYYYMMDDhhmmss</h2><p>Converts a date or date with time to a UInt64 number containing the year, month, day, hour,minutes and seconds (YYYY * 10000000000 + MM * 100000000 + DD * 1000000 + hh * 10000 + mm * 100 + ss).</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toYYYYMMDDhhmmss(<span class="type">date</span>)</span><br><span class="line">toYYYYMMDDhhmmss(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>number containing the year, month, day, hour,minutes and seconds. UInt32</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toYYYYMMDDhhmmss(toDate(<span class="string">&#x27;2021-08-12&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toYYYYMMDDhhmmss(toDate(&#x27;2021-08-12&#x27;))─┐</span><br><span class="line">│ 20210812000000                         │</span><br><span class="line">└────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toYYYYMMDDhhmmss(toDateTime(<span class="string">&#x27;2021-08-12 00:00:00&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toYYYYMMDDhhmmss(toDateTime(&#x27;2021-08-12 00:00:00&#x27;))─┐</span><br><span class="line">│ 20210812000000                                      │</span><br><span class="line">└─────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toYear"><a href="#toYear" class="headerlink" title="toYear"></a>toYear</h2><p>Converts a date or date with time to a UInt16 number containing the year number (AD).</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toYear(<span class="type">date</span>)</span><br><span class="line">toYear(datetime)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>Converts a date or date with time to a UInt16 number containing the year number (AD). UInt16</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toYear(toDate(<span class="string">&#x27;2021-08-12&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toYear(toDate(&#x27;2021-08-12&#x27;))─┐</span><br><span class="line">│ 2021                         │</span><br><span class="line">└──────────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toYear(toDateTime(<span class="string">&#x27;2021-08-12 00:00:00&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─toYear(toDateTime(&#x27;2021-08-12 00:00:00&#x27;))─┐</span><br><span class="line">│ 2021                                      │</span><br><span class="line">└───────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="toYearWeek"><a href="#toYearWeek" class="headerlink" title="toYearWeek"></a>toYearWeek</h2><p>Returns year and week for a date. The year in the result may be different from the year in the date argument for the first and the last week of the year.</p><p>The mode argument works exactly like the mode argument to toWeek(). For the single-argument syntax, a mode value of 0 is used.</p><p><code>toISOYear()</code> is a compatibility function that is equivalent to <code>intDiv(toYearWeek(date,3),100)</code> .</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toYearWeek(<span class="type">date</span>[,mode])</span><br><span class="line">toYearWeek(datetime[,mode])</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li><li><code>mode</code> - Refer toWeek mode.</li></ul><p><strong>Returned value</strong></p><ul><li>year and week for a date. UInt32</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toDate(<span class="string">&#x27;2016-12-27&#x27;</span>) <span class="keyword">AS</span> <span class="type">date</span>, toYearWeek(<span class="type">date</span>) <span class="keyword">AS</span> yearWeek0, toYearWeek(<span class="type">date</span>,<span class="number">1</span>) <span class="keyword">AS</span> yearWeek1, toYearWeek(<span class="type">date</span>,<span class="number">9</span>) <span class="keyword">AS</span> yearWeek9;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─date───────┬─yearWeek0─┬─yearWeek1─┬─yearWeek9─┐</span><br><span class="line">│ 2016-12-27 │ 201652    │ 201652    │ 201701    │</span><br><span class="line">└────────────┴───────────┴───────────┴───────────┘</span><br></pre></td></tr></table></figure><h2 id="today"><a href="#today" class="headerlink" title="today"></a>today</h2><p>Accepts zero arguments and returns the current date at one of the moments of request execution.</p><p>The same as ‘toDate(now())’.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">today()</span><br></pre></td></tr></table></figure><p><strong>Returned value</strong></p><ul><li>Date.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> today()</span><br></pre></td></tr></table></figure><h2 id="week"><a href="#week" class="headerlink" title="week"></a>week</h2><p>Alias to ToWeek</p><h2 id="year"><a href="#year" class="headerlink" title="year"></a>year</h2><p>Alias to toYear</p><h2 id="yearweek"><a href="#yearweek" class="headerlink" title="yearweek"></a>yearweek</h2><p>Returns year and week for a date. The year in the result may be different from the year in the date argument for the first and the last week of the year.</p><p>The mode argument works exactly like the mode argument to toWeek(). For the single-argument syntax, a mode value of 0 is used.</p><p><code>toISOYear()</code> is a compatibility function that is equivalent to <code>intDiv(toYearWeek(date,3),100)</code> .</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toYearWeek(<span class="type">date</span>[,mode])</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>date/datetime</code>- Date&#x2F;DateTime</li></ul><p><strong>Returned value</strong></p><ul><li>Rounds down a date or date with time to the first day of ISO year. Date</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> toDate(<span class="string">&#x27;2016-12-27&#x27;</span>) <span class="keyword">AS</span> <span class="type">date</span>, toYearWeek(<span class="type">date</span>) <span class="keyword">AS</span> yearWeek0, toYearWeek(<span class="type">date</span>,<span class="number">1</span>) <span class="keyword">AS</span> yearWeek1, toYearWeek(<span class="type">date</span>,<span class="number">9</span>) <span class="keyword">AS</span> yearWeek9;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─date───────┬─yearWeek0─┬─yearWeek1─┬─yearWeek9─┐</span><br><span class="line">│ 2016-12-27 │ 201652    │ 201652    │ 201701    │</span><br><span class="line">└────────────┴───────────┴───────────┴───────────┘</span><br></pre></td></tr></table></figure><h2 id="yesterday"><a href="#yesterday" class="headerlink" title="yesterday"></a>yesterday</h2><p>Accepts zero arguments and returns yesterday’s date at one of the moments of request execution.</p><p>The same as ‘today() - 1’.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yesterday()</span><br></pre></td></tr></table></figure><p><strong>Returned value</strong></p><ul><li>Date.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> yesterday()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> SQL_Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Encoding</title>
      <link href="/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/encoding/"/>
      <url>/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/encoding/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Notice:<br>Some of the examples below are referenced from <a href="https://clickhouse.com/docs/en/sql-reference/functions/">ClickHouse Documentation</a> but have been adapted and modified to work in ByteHouse.</p></blockquote><h2 id="UUIDNumToString"><a href="#UUIDNumToString" class="headerlink" title="UUIDNumToString"></a>UUIDNumToString</h2><p>Accepts a FixedString(16) value, and returns a string containing 36 characters in text format.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UUIDNumToString(FixedString(<span class="number">16</span>))</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li>a FixedString(16) value</li></ul><p><strong>Returned value</strong></p><ul><li>String.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="string">&#x27;a/&lt;@];!~p&#123;jTj=&#123;)&#x27;</span> <span class="keyword">AS</span> bytes,</span><br><span class="line">    UUIDNumToString(toFixedString(bytes, <span class="number">16</span>)) <span class="keyword">AS</span> uuid</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─bytes────────────┬─uuid─────────────────────────────────┐</span><br><span class="line">│ a/&lt;@];!~p&#123;jTj=&#123;) │ 612f3c40-5d3b-217e-707b-6a546a3d7b29 │</span><br><span class="line">└──────────────────┴──────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="UUIDStringToNum"><a href="#UUIDStringToNum" class="headerlink" title="UUIDStringToNum"></a>UUIDStringToNum</h2><p>Accepts a string containing 36 characters in the format <code>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</code> , and returns it as a set of bytes in a FixedString(16).</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UUIDStringToNum(String)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li>a string in uuid format</li></ul><p><strong>Returned value</strong></p><ul><li>FixedString(16)</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="string">&#x27;612f3c40-5d3b-217e-707b-6a546a3d7b29&#x27;</span> <span class="keyword">AS</span> uuid,</span><br><span class="line">    UUIDStringToNum(uuid) <span class="keyword">AS</span> bytes</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─uuid─────────────────────────────────┬─bytes────────────┐</span><br><span class="line">│ 612f3c40-5d3b-217e-707b-6a546a3d7b29 │ a/&lt;@];!~p&#123;jTj=&#123;) │</span><br><span class="line">└──────────────────────────────────────┴──────────────────┘</span><br></pre></td></tr></table></figure><h2 id="bitmaskToArray"><a href="#bitmaskToArray" class="headerlink" title="bitmaskToArray"></a>bitmaskToArray</h2><p>Accepts an integer. Returns an array of UInt64 numbers containing the list of powers of two that total the source number when summed. Numbers in the array are in ascending order.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitmaskToArray(num)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>num</code> – an integer</li></ul><p><strong>Returned value</strong></p><ul><li>an array of UInt64 numbers containing the list of powers of two that total the source number when summed.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bitmaskToArray(<span class="number">1</span>), bitmaskToArray(<span class="number">3</span>), bitmaskToArray(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─bitmaskToArray(1)─┬─bitmaskToArray(3)─┬─bitmaskToArray(4)─┐</span><br><span class="line">│ [1]               │ [1, 2]            │ [4]               │</span><br><span class="line">└───────────────────┴───────────────────┴───────────────────┘</span><br></pre></td></tr></table></figure><p>1 &#x3D; power(2,0)<br>3 &#x3D; power(2,0) + power(2,1)<br>4 &#x3D; power(2,2)</p><h2 id="bitmaskToList"><a href="#bitmaskToList" class="headerlink" title="bitmaskToList"></a>bitmaskToList</h2><p>Accepts an integer. Returns a string containing the list of powers of two that total the source number when summed. They are comma-separated without spaces in text format, in ascending order.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitmaskToList(num)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>num</code> – an integer</li></ul><p><strong>Returned value</strong></p><ul><li>a string containing the list of powers of two that total the source number when summed</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bitmaskToList(<span class="number">1</span>), bitmaskToList(<span class="number">3</span>), bitmaskToList(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─bitmaskToList(1)─┬─bitmaskToList(3)─┬─bitmaskToList(4)─┐</span><br><span class="line">│ 1                │ 1,2              │ 4                │</span><br><span class="line">└──────────────────┴──────────────────┴──────────────────┘</span><br></pre></td></tr></table></figure><p>1 &#x3D; power(2,0)<br>3 &#x3D; power(2,0) + power(2,1)<br>4 &#x3D; power(2,2)</p><h2 id="hex"><a href="#hex" class="headerlink" title="hex"></a>hex</h2><p>Returns a string containing the argument’s hexadecimal representation.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hex(arg)</span><br></pre></td></tr></table></figure><p>The function is using uppercase letters <code>A-F</code> and not using any prefixes (like <code>0x</code> ) or suffixes (like <code>h</code> ).</p><p>For integer arguments, it prints hex digits (“nibbles”) from the most significant to least significant (big endian or “human readable” order). It starts with the most significant non-zero byte (leading zero bytes are omitted) but always prints both digits of every byte even if leading digit is zero.</p><p>Values of type <code>Date</code> and <code>DateTime</code> are formatted as corresponding integers (the number of days since Epoch for Date and the value of Unix Timestamp for DateTime).</p><p>For <code>String</code> and <code>FixedString</code> , all bytes are simply encoded as two hexadecimal numbers. Zero bytes are not omitted.</p><!-- Values of floating point and Decimal types are encoded as their representation in memory. As we support little endian architecture, they are encoded in little endian. Zero leading/trailing bytes are not omitted.**Arguments**- `arg` — A value to convert to hexadecimal. Types: String, UInts, Date or DateTime. <!-- TODO: FLOAT & Decimal is not support by cnch**Returned value**- A string with the hexadecimal representation of the argument. Type: `String` .**Example**<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> hex(<span class="string">&#x27;a&#x27;</span>), hex(<span class="number">1</span>), hex(toDate(<span class="string">&#x27;2019-01-01&#x27;</span>)), hex(toDateTime(<span class="string">&#x27;2019-01-01 00:00:00&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─hex(&#x27;a&#x27;)─┬─hex(1)─┬─hex(toDate(&#x27;2019-01-01&#x27;))─┬─hex(toDateTime(&#x27;2019-01-01 00:00:00&#x27;))─┐</span><br><span class="line">│ 61       │ 01     │ 45E9                      │ 5C2A3D00                               │</span><br><span class="line">└──────────┴────────┴───────────────────────────┴────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><!-- TODO: NOT SUPPORT BY CNCH<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> hex(toFloat32(number)) <span class="keyword">as</span> hex_presentation <span class="keyword">FROM</span> numbers(<span class="number">15</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─hex_presentation─┐</span><br><span class="line">│ 00007041         │</span><br><span class="line">│ 00008041         │</span><br><span class="line">└──────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> hex(toFloat64(number)) <span class="keyword">as</span> hex_presentation <span class="keyword">FROM</span> numbers(<span class="number">15</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌─hex_presentation─┐</span><br><span class="line">│ 0000000000002E40 │</span><br><span class="line">│ 0000000000003040 │</span><br><span class="line">└──────────────────┘</span><br></pre></td></tr></table></figure><h2 id="unhex"><a href="#unhex" class="headerlink" title="unhex"></a>unhex</h2><p>Performs the opposite operation of <code>hex</code>. It interprets each pair of hexadecimal digits (in the argument) as a number and converts it to the byte represented by the number. The return value is a binary string (BLOB).</p><p>If you want to convert the result to a number, you can use the <code>reverse</code> and <code>reinterpretAs&lt;Type&gt;</code> functions.</p><p>!!! note “Note”</p><p>If <code>unhex</code> is invoked from within the <code>gateway-client</code> , binary strings display using UTF-8.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unhex(arg)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>arg</code> — A string containing any number of hexadecimal digits. Type: String.<br>Supports both uppercase and lowercase letters <code>A-F</code> . The number of hexadecimal digits does not have to be even. If it is odd, the last digit is interpreted as the least significant half of the <code>00-0F</code> byte. If the argument string contains anything other than hexadecimal digits, some implementation-defined result is returned (an exception isn’t thrown). For a numeric argument the inverse of hex(N) is not performed by unhex().</li></ul><p><strong>Returned value</strong></p><ul><li>A binary string (BLOB). Type: String.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> unhex(<span class="string">&#x27;303132&#x27;</span>), unhex(<span class="string">&#x27;4D7953514C&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─unhex(&#x27;303132&#x27;)─┬─unhex(&#x27;4D7953514C&#x27;)─┐</span><br><span class="line">│ 012             │ MySQL               │</span><br><span class="line">└─────────────────┴─────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> reinterpretAsUInt64(reverse(unhex(<span class="string">&#x27;FFF&#x27;</span>))) <span class="keyword">AS</span> num;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─num──┐</span><br><span class="line">│ 4095 │</span><br><span class="line">└──────┘</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> SQL_Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Encryption</title>
      <link href="/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/encryption/"/>
      <url>/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/encryption/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Notice:<br>Some of the examples below are referenced from <a href="https://clickhouse.com/docs/en/sql-reference/functions/">ClickHouse Documentation</a> but have been adapted and modified to work in ByteHouse.</p></blockquote><!-- TODO: no encrypt functions but we have decrypt functions. syntax unsure --><!-- ## decryptThis function decrypts ciphertext into a plaintext using these modes:- aes-128-ecb, aes-192-ecb, aes-256-ecb - aes-128-cbc, aes-192-cbc, aes-256-cbc - aes-128-cfb1, aes-192-cfb1, aes-256-cfb1 - aes-128-cfb8, aes-192-cfb8, aes-256-cfb8 - aes-128-cfb128, aes-192-cfb128, aes-256-cfb128 - aes-128-ofb, aes-192-ofb, aes-256-ofb - aes-128-gcm, aes-192-gcm, aes-256-gcm **Syntax**<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">decrypt(<span class="string">&#x27;mode&#x27;</span>, <span class="string">&#x27;ciphertext&#x27;</span>, <span class="string">&#x27;key&#x27;</span> [, iv, aad])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><p><code>mode</code> — Decryption mode. <a href="https://bytedance.feishu.cn/sql-reference/data-types/string.md#string">String</a> . </p></li><li><p><code>ciphertext</code> — Encrypted text that needs to be decrypted. <a href="https://bytedance.feishu.cn/sql-reference/data-types/string.md#string">String</a> . </p></li><li><p><code>key</code> — Decryption key. <a href="https://bytedance.feishu.cn/sql-reference/data-types/string.md#string">String</a> . </p></li><li><p><code>iv</code> — Initialization vector. Required for <code>-gcm</code> modes, optinal for others. <a href="https://bytedance.feishu.cn/sql-reference/data-types/string.md#string">String</a> . </p></li><li><p><code>aad</code> — Additional authenticated data. Won’t decrypt if this value is incorrect. Works only in <code>-gcm</code> modes, for others would throw an exception. <a href="https://bytedance.feishu.cn/sql-reference/data-types/string.md#string">String</a> .</p></li></ul><p><strong>Returned value</strong></p><ul><li>Decrypted String. <a href="https://bytedance.feishu.cn/sql-reference/data-types/string.md#string">String</a> .</li></ul><p><strong>Examples</strong></p><p>Re-using table from <a href="https://bytedance.feishu.cn/docs/doccnZ2mgKjAAc5rAc62DusGjq1#encrypt">encrypt</a> .</p><p>Query:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> comment, hex(secret) <span class="keyword">FROM</span> encryption_test;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌─comment──────────────┬─hex(secret)──────────────────────────────────┐</span><br><span class="line"></span><br><span class="line">│ aes-256-gcm          │ A8A3CCBC6426CFEEB60E4EAE03D3E94204C1B09E0254 │</span><br><span class="line"></span><br><span class="line">│ aes-256-gcm with AAD │ A8A3CCBC6426D9A1017A0A932322F1852260A4AD6837 │</span><br><span class="line"></span><br><span class="line">└──────────────────────┴──────────────────────────────────────────────┘</span><br><span class="line"></span><br><span class="line">┌─comment─────────────────────────────┬─hex(secret)──────────────────────┐</span><br><span class="line"></span><br><span class="line">│ aes-256-cfb128 no IV                │ B4972BDC4459                     │</span><br><span class="line"></span><br><span class="line">│ aes-256-cfb128 no IV, different key │ 2FF57C092DC9                     │</span><br><span class="line"></span><br><span class="line">│ aes-256-cfb128 with IV              │ 5E6CB398F653                     │</span><br><span class="line"></span><br><span class="line">│ aes-256-cbc no IV                   │ 1BC0629A92450D9E73A00E7D02CF4142 │</span><br><span class="line"></span><br><span class="line">└─────────────────────────────────────┴──────────────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Now let’s try to decrypt all that data.</p><p>Query:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> comment, decrypt(<span class="string">&#x27;aes-256-cfb128&#x27;</span>, secret, <span class="string">&#x27;12345678910121314151617181920212&#x27;</span>) <span class="keyword">as</span> plaintext <span class="keyword">FROM</span> encryption_test</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">┌─comment─────────────────────────────┬─plaintext─┐</span><br><span class="line"></span><br><span class="line">│ aes-256-cfb128 no IV                │ Secret    │</span><br><span class="line"></span><br><span class="line">│ aes-256-cfb128 no IV, different key │ �4�</span><br><span class="line"></span><br><span class="line">                                           �         │</span><br><span class="line"></span><br><span class="line">│ aes-256-cfb128 with IV              │ ���6�~        │</span><br><span class="line"></span><br><span class="line"> │aes-256-cbc no IV                   │ �2*4�h3c�4w��@</span><br><span class="line"></span><br><span class="line">└─────────────────────────────────────┴───────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Notice how only a portion of the data was properly decrypted, and the rest is gibberish since either <code>mode</code> , <code>key</code> , or <code>iv</code> were different upon encryption.</p>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> SQL_Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Geo</title>
      <link href="/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/geo/"/>
      <url>/zh-cn/docs/SQL%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/functions/geo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Notice:<br>Some of the examples below are referenced from <a href="https://clickhouse.com/docs/en/sql-reference/functions/">ClickHouse Documentation</a> but have been adapted and modified to work in ByteHouse.</p></blockquote><h2 id="geohashDecode"><a href="#geohashDecode" class="headerlink" title="geohashDecode"></a>geohashDecode</h2><p>Decodes any geohash-encoded string into longitude and latitude.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geohashDecode(encoded_string)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>encoded_string</code> - geohash-encoded string.</li></ul><p><strong>Returned values</strong></p><ul><li>longitude and latitude.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> geohashDecode(<span class="string">&#x27;ezs42d000000&#x27;</span>) <span class="keyword">as</span> res;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res─────────────────────────────────────┐</span><br><span class="line">│ (-5.603027176111937, 42.59399422444403) │</span><br><span class="line">└─────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="geohashEncode"><a href="#geohashEncode" class="headerlink" title="geohashEncode"></a>geohashEncode</h2><p>Encodes latitude and longitude as a geohash-string.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geohashEncode(longitude, latitude, [<span class="keyword">precision</span>])</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li>longitude - longitude part of the coordinate you want to encode. Floating in range <code>[-180°, 180°]</code> </li><li>latitude - latitude part of the coordinate you want to encode. Floating in range <code>[-90°, 90°]</code> </li><li>precision - Optional, length of the resulting encoded string, defaults to <code>12</code> . Integer in range <code>[1, 12]</code> . Any value less than <code>1</code> or greater than <code>12</code> is silently converted to <code>12</code> .</li></ul><p><strong>Returned values</strong></p><ul><li>alphanumeric <code>String</code> of encoded coordinate (modified version of the base32-encoding alphabet is used).</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> geohashEncode(<span class="number">-5.60302734375</span>, <span class="number">42.593994140625</span>, <span class="number">0</span>) <span class="keyword">AS</span> res;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res──────────┐</span><br><span class="line">│ ezs42d000000 │</span><br><span class="line">└──────────────┘</span><br></pre></td></tr></table></figure><h2 id="greatCircleDistance"><a href="#greatCircleDistance" class="headerlink" title="greatCircleDistance"></a>greatCircleDistance</h2><p>Calculates the distance between two points on the Earth’s surface using <a href="https://en.wikipedia.org/wiki/Great-circle_distance">the great-circle formula</a> .</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">greatCircleDistance(lon1Deg, lat1Deg, lon2Deg, lat2Deg)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>lon1Deg</code> — Longitude of the first point in degrees. Range: <code>[-180°, 180°]</code> . </li><li><code>lat1Deg</code> — Latitude of the first point in degrees. Range: <code>[-90°, 90°]</code> . </li><li><code>lon2Deg</code> — Longitude of the second point in degrees. Range: <code>[-180°, 180°]</code> . </li><li><code>lat2Deg</code> — Latitude of the second point in degrees. Range: <code>[-90°, 90°]</code> .<br>Positive values correspond to North latitude and East longitude, and negative values correspond to South latitude and West longitude.</li></ul><p><strong>Returned value</strong></p><ul><li>The distance between two points on the Earth’s surface, in meters. Generates an exception when the input parameter values fall outside of the range.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> greatCircleDistance(<span class="number">55.755831</span>, <span class="number">37.617673</span>, <span class="number">-55.755831</span>, <span class="number">-37.617673</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─greatCircleDistance(55.755831, 37.617673, -55.755831, -37.617673)─┐</span><br><span class="line">│ 1.4132374194975413e+07                                            │</span><br><span class="line">└───────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="pointInEllipses"><a href="#pointInEllipses" class="headerlink" title="pointInEllipses"></a>pointInEllipses</h2><p>Checks whether the point belongs to at least one of the ellipses.<br>Coordinates are geometric in the Cartesian coordinate system.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pointInEllipses(x, y, x₀, y₀, a₀, b₀,...,xₙ, yₙ, aₙ, bₙ)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>x, y</code> — Coordinates of a point on the plane. </li><li><code>xᵢ, yᵢ</code> — Coordinates of the center of the <code>i</code> -th ellipsis. </li><li><code>aᵢ, bᵢ</code> — Axes of the <code>i</code> -th ellipsis in units of x, y coordinates.<br>The input parameters must be <code>2+4⋅n</code> , where <code>n</code> is the number of ellipses.</li></ul><p><strong>Returned values</strong></p><ul><li><code>1</code> if the point is inside at least one of the ellipses; <code>0</code> if it is not.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> pointInEllipses(<span class="number">10.</span>, <span class="number">10.</span>, <span class="number">10.</span>, <span class="number">9.1</span>, <span class="number">1.</span>, <span class="number">0.9999</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─pointInEllipses(10., 10., 10., 9.1, 1., 0.9999)─┐</span><br><span class="line">│ 1                                               │</span><br><span class="line">└─────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="pointInPolygon"><a href="#pointInPolygon" class="headerlink" title="pointInPolygon"></a>pointInPolygon</h2><p>Checks whether the point belongs to the polygon on the plane.</p><p><strong>Syntax</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pointInPolygon((x, y), [(a, b), (c, d) ...], ...)</span><br></pre></td></tr></table></figure><p><strong>Arguments</strong></p><ul><li><code>(x, y)</code> — Coordinates of a point on the plane. Data type — Tuple — A tuple of two numbers. </li><li><code>[(a, b), (c, d) ...]</code> — Polygon vertices. Data type — Array. Each vertex is represented by a pair of coordinates <code>(a, b)</code> . Vertices should be specified in a clockwise or counterclockwise order. The minimum number of vertices is 3. The polygon must be constant. </li><li>The function also supports polygons with holes (cut out sections). In this case, add polygons that define the cut out sections using additional arguments of the function. The function does not support non-simply-connected polygons.</li></ul><p><strong>Returned values</strong></p><ul><li><code>1</code> if the point is inside the polygon, <code>0</code> if it is not. If the point is on the polygon boundary, the function may return either 0 or 1.</li></ul><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> pointInPolygon((<span class="number">3.</span>, <span class="number">3.</span>), [(<span class="number">6</span>, <span class="number">0</span>), (<span class="number">8</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">8</span>), (<span class="number">0</span>, <span class="number">2</span>)]) <span class="keyword">AS</span> res</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─res─┐</span><br><span class="line">│ 1   │</span><br><span class="line">└─────┘</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docs </category>
          
          <category> SQL_Syntax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docs </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
