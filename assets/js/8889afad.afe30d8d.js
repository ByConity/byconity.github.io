"use strict";(self.webpackChunkbyconity=self.webpackChunkbyconity||[]).push([[8462],{49613:(t,e,r)=>{r.d(e,{Zo:()=>m,kt:()=>g});var n=r(59496);function s(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){s(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function a(t,e){if(null==t)return{};var r,n,s=function(t,e){if(null==t)return{};var r,n,s={},o=Object.keys(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||(s[r]=t[r]);return s}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(s[r]=t[r])}return s}var l=n.createContext({}),c=function(t){var e=n.useContext(l),r=e;return t&&(r="function"==typeof t?t(e):i(i({},e),t)),r},m=function(t){var e=c(t.components);return n.createElement(l.Provider,{value:e},t.children)},u="mdxType",p={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var r=t.components,s=t.mdxType,o=t.originalType,l=t.parentName,m=a(t,["components","mdxType","originalType","parentName"]),u=c(r),d=s,g=u["".concat(l,".").concat(d)]||u[d]||p[d]||o;return r?n.createElement(g,i(i({ref:e},m),{},{components:r})):n.createElement(g,i({ref:e},m))}));function g(t,e){var r=arguments,s=e&&e.mdxType;if("string"==typeof t||s){var o=r.length,i=new Array(o);i[0]=d;var a={};for(var l in e)hasOwnProperty.call(e,l)&&(a[l]=e[l]);a.originalType=t,a[u]="string"==typeof t?t:s,i[1]=a;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},20786:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var n=r(64778),s=(r(59496),r(49613));const o={title:"Query Optimizer",sidebar_position:1,tags:["Docs"]},i="Query Optimizer",a={unversionedId:"query-optimization/query-optimizer",id:"version-0.3.0/query-optimization/query-optimizer",title:"Query Optimizer",description:"The optimizer is the core of the database system, and an excellent optimizer can greatly improve query performance, especially in complex query scenarios where the optimizer can bring several times to hundreds of times performance improvement.",source:"@site/versioned_docs/version-0.3.0/query-optimization/query-optimizer.mdx",sourceDirName:"query-optimization",slug:"/query-optimization/query-optimizer",permalink:"/docs/0.3.0/query-optimization/query-optimizer",draft:!1,editUrl:"https://github.com/ByConity/byconity.github.io/tree/main/versioned_docs/version-0.3.0/query-optimization/query-optimizer.mdx",tags:[{label:"Docs",permalink:"/docs/0.3.0/tags/docs"}],version:"0.3.0",sidebarPosition:1,frontMatter:{title:"Query Optimizer",sidebar_position:1,tags:["Docs"]},sidebar:"tutorialSidebar",previous:{title:"External Catalog",permalink:"/docs/0.3.0/data-lakes/hive-external-catalog"},next:{title:"Cache Preload",permalink:"/docs/0.3.0/query-optimization/query-optimization-with-cache-preload"}},l={},c=[{value:"Commands for Collecting, Displaying, and Deleting Statistical Information",id:"commands-for-collecting-displaying-and-deleting-statistical-information",level:2},{value:"Syntax Definition:",id:"syntax-definition",level:3},{value:"Collecting Statistical Information",id:"collecting-statistical-information",level:3},{value:"Displaying Statistical Information",id:"displaying-statistical-information",level:3},{value:"Deleting Statistical Information",id:"deleting-statistical-information",level:3},{value:"Using Explain",id:"using-explain",level:2}],m={toc:c},u="wrapper";function p(t){let{components:e,...o}=t;return(0,s.kt)(u,(0,n.Z)({},m,o,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"query-optimizer"},"Query Optimizer"),(0,s.kt)("p",null,"The optimizer is the core of the database system, and an excellent optimizer can greatly improve query performance, especially in complex query scenarios where the optimizer can bring several times to hundreds of times performance improvement."),(0,s.kt)("p",null,"ByConity's self-developed optimizer provides ultimate optimization capabilities based on three optimization directions:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"RBO: Rule-Based Optimization. ByConity implements two approaches. One is global rewriting based on Visitor, such as filter pushdown, column pruning, etc. The other is local rewriting based on pattern matching, such as merging two filters. Overall, it supports common heuristic optimization capabilities such as column pruning, partition pruning, expression simplification, subquery decorrelation, predicate pushdown, redundant operator elimination, Outer-JOIN to INNER-JOIN conversion, operator pushdown storage, and distributed operator splitting."),(0,s.kt)("li",{parentName:"ul"},"CBO: Cost-Based Optimization. This optimization relies on the collection of statistical information and is currently implemented based on a search framework called Cascades. ByConity supports cost-based optimization capabilities such as Join Reorder, Outer-Join Reorder, Join/Agg Reorder, CTE, materialized views, Dynamic Filter pushdown, Magic Set, etc. It also integrates Property Enforcement for distributed plans."),(0,s.kt)("li",{parentName:"ul"},"DBO: Dependency-Based Optimization. Supports optimization capabilities based on data dependencies such as unique keys, functional dependencies, order dependencies, inclusion dependencies, etc.")),(0,s.kt)("p",null,"In ByConity, the optimizer can be enabled using the following parameters:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"-- Note: If ANSI mode is enabled, the optimizer will also be automatically enabled\nset dialect_type ='ANSI'\n-- Or\nset enable_optimizer =1\n")),(0,s.kt)("h2",{id:"commands-for-collecting-displaying-and-deleting-statistical-information"},"Commands for Collecting, Displaying, and Deleting Statistical Information"),(0,s.kt)("h3",{id:"syntax-definition"},"Syntax Definition:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Note: Future versions will have the ability to automatically collect, update, and analyze statistical information.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"-- NOTE: The parameter ALL represents all tables in the current database\n\n-- Supports specifying columns and sample configurations\nCREATE STATS [IF NOT EXISTS]WITH (FULLSCAN | SAMPLE [<rows> ROWS] [<ratio> RATIO])]\n\n-- Deletes statistical information\n-- Supports specifying columns\nDROP STATS (<>, ..., <coln> ')' )\n")),(0,s.kt)("h3",{id:"collecting-statistical-information"},"Collecting Statistical Information"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"-- Creates statistical information for all tables without statistical information in the current database\ncreate stats if not exists all;\n\n-- Creates statistical information for all tables without statistical information in db1\ncreate stats if not exists db1.*;\n\n-- Creates statistical information for t1.c1\ncreate stats t1(c1);\n\n-- Creates statistical information for t1.c1 and t1.c2\ncreate stats t1(c1, c2);\n\n-- Creates statistical information on t1, forcing a full table scan\ncreate stats t1 with fullscan;\n\n-- Samples the following rows when creating statistical information for each table\n-- MAX(statistics_sample_row_count, 0.01 * full_rows_count)\ncreate stats all with 0.01 ratio;\n\n-- Samples the following rows when creating statistical information for each table\n-- MAX(40000000, 0.01 * full_rows_count)\ncreate stats all with 0.01 ratio 40000000 rows;\n\n-- Uses default settings for sampling,\n-- controlled by statistics_sample_row_count and statistics_sample_ratio\ncreate stats all with sample;\n")),(0,s.kt)("h3",{id:"displaying-statistical-information"},"Displaying Statistical Information"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"-- Displays table statistical information for all tables in the current database\nshow stats all;\n\n-- Displays table statistical information for all tables in db1\nshow stats db1.*;\n\n-- Displays table statistical information for table t1\nshow stats t1;\n\n-- Displays column statistical information for table t1\nshow column_stats t1;\n\n-- Displays column statistical information for columns c1 and c2 in table t1\nshow column_stats t1(c1, c2);\n")),(0,s.kt)("h3",{id:"deleting-statistical-information"},"Deleting Statistical Information"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"-- Deletes statistical information for all tables in the current database\ndrop stats all;\n\n-- Deletes statistical information for all tables in db1.*\ndrop stats db1.*;\n\n-- Deletes statistical information for table t1\ndrop stats t1;\n\n-- Deletes statistical information for columns c1 and c2 in table t1\ndrop stats t1(c1, c2);\n")),(0,s.kt)("h2",{id:"using-explain"},"Using Explain"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Explain + SQL")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"EXPLAIN\nWITH\n    (\n        SELECT\n            sr_customer_sk AS ctr_customer_sk,\n            sr_store_sk AS ctr_store_sk,\n            sum(sr_return_amt) AS ctr_total_return\n        FROM store_returns\n        , date_dim\n        WHERE (sr_returned_date_sk = d_date_sk) AND (d_year = 2000)\n        GROUP BY\n            sr_customer_sk,\n            sr_store_sk\n    ) AS customer_total_return\nSELECT c_customer_id\nFROM customer_total_return AS ctr1\n, store\n, customer\nWHERE (ctr1.ctr_total_return >\n(\n    SELECT avg(ctr_total_return) * 1.2\n    FROM customer_total_return AS ctr2\n    WHERE ctr1.ctr_store_sk = ctr2.ctr_store_sk\n)) AND (s_store_sk = ctr1.ctr_store_sk) AND (s_state = 'TN') AND (ctr1.ctr_customer_sk = c_customer_sk)\nORDER BY c_customer_id ASC\nLIMIT 100;\n")),(0,s.kt)("p",null,"Output:"),(0,s.kt)("p",null,(0,s.kt)("img",{src:r(85391).Z,width:"2008",height:"1712"})),(0,s.kt)("ol",{start:2},(0,s.kt)("li",{parentName:"ol"},"Explain analyze + SQL")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"EXPLAIN ANALYZE LOGICAL\nWITH customer_total_return AS\n\n    (\n        SELECT\n            sr_customer_sk AS ctr_customer_sk,\n            sr_store_sk AS ctr_store_sk,\n            sum(sr_return_amt) AS ctr_total_return\n        FROM store_returns\n        , date_dim\n        WHERE (sr_returned_date_sk = d_date_sk) AND (d_year = 2000)\n        GROUP BY\n            sr_customer_sk,\n            sr_store_sk\n    )\nSELECT c_customer_id\nFROM customer_total_return AS ctr1\n, store\n, customer\nWHERE (ctr1.ctr_total_return >\n(\n    SELECT avg(ctr_total_return) * 1.2\n    FROM customer_total_return AS ctr2\n    WHERE ctr1.ctr_store_sk = ctr2.ctr_store_sk\n)) AND (s_store_sk = ctr1.ctr_store_sk) AND (s_state = 'TN') AND (ctr1.ctr_customer_sk = c_customer_sk)\nORDER BY c_customer_id ASC\nLIMIT 100;\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"\u250c\u2500Explain Analyze\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Limit                                                                                                                                                                \u2502\n\u2502 \u2502     Est. 100 rows, cost 8.2e+05                                                                                                                                    \u2502\n\u2502 \u2502     Act. 100 rows (2.4 KB), Throughput: 545.0K rows/s, CPU Time per worker: avg 2.0 us, max 2.0 us, Wall Time: 1.8 ms                                              \u2502\n\u2502 \u2502     Filtered: 0.0%, QError: 1.0                                                                                                                                    \u2502\n\u2502 \u2514\u2500 MergeSorting                                                                                                                                                      \u2502\n\u2502    \u2502     Est. 49.2K rows, cost 8.2e+05                                                                                                                               \u2502\n\u2502    \u2502     Act. 100 rows (2.4 KB), Throughput: 545.0K rows/s, CPU Time per worker: avg 2.0 us, max 2.0 us, Wall Time: 1.8 ms                                           \u2502\n\u2502    \u2502     Filtered: 96.9%, QError: 504.1                                                                                                                              \u2502\n\u2502    \u2514\u2500 Union                                                                                                                                                          \u2502\n\u2502       \u2502     Est. 49.2K rows, cost 8.2e+05                                                                                                                            \u2502\n\u2502       \u2502     Act. 3.1K rows (78.1 KB), Throughput: 17.0M rows/s, CPU Time per worker: avg 0.0 us, max 0.0 us, Wall Time: 1.8 ms                                       \u2502\n\u2502       \u2502     Filtered: 0.0%, QError: 15.8                                                                                                                             \u2502\n\u2502       \u2514\u2500 PartialSorting                                                                                                                                              \u2502\n\u2502          \u2502     Est. 49.2K rows, cost 8.2e+05                                                                                                                         \u2502\n\u2502          \u2502     Act. 3.1K rows (78.1 KB), Throughput: 17.0M rows/s, CPU Time per worker: avg 40.0 us, max 40.0 us, Wall Time: 1.8 ms                                  \u2502\n\u2502          \u2502     Filtered: 0.0%, QError: 15.8                                                                                                                          \u2502\n\u2502          \u2514\u2500 Gather Exchange                                                                                                                                          \u2502\n\u2502             \u2502     Est. 49.2K rows, cost 8.2e+05                                                                                                                      \u2502\n\u2502             \u2514\u2500 MergeSorting                                                                                                                                          \u2502\n\u2502                \u2502     Est. 49.2K rows, cost 8.1e+05                                                                                                                   \u2502\n\u2502                \u2502     Act. 12.5K rows (313.1 KB), Throughput: 108.2M rows/s, CPU Time per worker: avg 23.0 us, max 25.0 us, Wall Time: 1.2 ms                         \u2502\n\u2502                \u2502     Filtered: -1.6%, QError: 3.9                                                                                                                    \u2502\n\u2502                \u2514\u2500 PartialSorting                                                                                                                                     \u2502\n\u2502                   \u2502     Est. 49.2K rows, cost 8.1e+05                                                                                                                \u2502\n\u2502                   \u2502     Act. 12.3K rows (308.3 KB), Throughput: 91.6M rows/s, CPU Time per worker: avg 40.0 us, max 40.0 us, Wall Time: 1.3 ms                       \u2502\n\u2502                   \u2502     Filtered: 0.0%, QError: 4.0                                                                                                                  \u2502\n\u2502                   \u2514\u2500 Inner Join                                                                                                                                      \u2502\n\u2502                      \u2502     Est. 47.5K rows, cost 8.1e+05                                                                                                             \u2502\n\u2502                      \u2502     Act. 12.3K rows (308.3 KB), Throughput: 91.6M rows/s, CPU Time per worker: avg 41.6 ms, max 41.8 ms, Wall Time: 1.3 ms                    \u2502\n\u2502                      \u2502     Filtered: 0.0%, QError: 3.9                                                                                                               \u2502\n\u2502                      \u2502     Condition: sr_store_sk_1 == s_store_sk                                                                                                    \u2502\n\u2502                      \u2502     Filter: `sum(sr_return_amt)_1` > (`avg(ctr_total_return)` * 1.2)                                                                          \u2502\n\u2502                      \u251c\u2500 Local Exchange                                                                                                                               \u2502\n\u2502                      \u2502  \u2502     Est. 49.2K rows, cost 2.9e+05                                                                                                          \u2502\n\u2502                      \u2502  \u2514\u2500 Inner Join                                                                                                                                \u2502\n\u2502                      \u2502     \u2502     Est. 49.2K rows, cost 2.9e+05                                                                                                       \u2502\n\u2502                      \u2502     \u2502     Act. 49.3K rows (2.1 MB), Throughput: 542.3M rows/s, CPU Time per worker: avg 6.2 ms, max 6.4 ms, Wall Time: 896.0 us               \u2502\n\u2502                      \u2502     \u2502     Filtered: 0.0%, QError: 1.0                                                                                                         \u2502\n\u2502                      \u2502     \u2502     Condition: c_customer_sk == sr_customer_sk_1                                                                                        \u2502\n\u2502                      \u2502     \u251c\u2500 Repartition Exchange                                                                                                                   \u2502\n\u2502                      \u2502     \u2502  \u2502     Est. 97.7K rows, cost 9.0e+04                                                                                                    \u2502\n\u2502                      \u2502     \u2502  \u2502     Partition by: {c_customer_sk}                                                                                                    \u2502\n\u2502                      \u2502     \u2502  \u2514\u2500 ReadFromStorage tpcds.customer                                                                                                      \u2502\n\u2502                      \u2502     \u2502           Est. 97.7K rows, cost 7.4e+04                                                                                                 \u2502\n\u2502                      \u2502     \u2502           Act. 97.7K rows (3.1 MB), Throughput: 22.2G rows/s, CPU Time per worker: avg 362.0 us, max 402.0 us, Wall Time: 47.0 us       \u2502\n\u2502                      \u2502     \u2502           Filtered: 0.0%, QError: 1.0                                                                                                   \u2502\n\u2502                      \u2502     \u2514\u2500 Repartition Exchange                                                                                                                   \u2502\n\u2502                      \u2502        \u2502     Est. 50.9K rows, cost 6.1e+04                                                                                                    \u2502\n\u2502                      \u2502        \u2502     Partition by: {sr_customer_sk_1}                                                                                                 \u2502\n\u2502                      \u2502        \u2514\u2500 CTERef [0]                                                                                                                          \u2502\n\u2502                      \u2502                 Est. 50.9K rows, cost 5.2e+04                                                                                                 \u2502\n\u2502                      \u2514\u2500 Broadcast Exchange                                                                                                                           \u2502\n\u2502                         \u2502     Est. 7 rows, cost 5.6e+04                                                                                                              \u2502\n\u2502                         \u2514\u2500 Inner Join                                                                                                                                \u2502\n\u2502                            \u2502     Est. 7 rows, cost 5.6e+04                                                                                                           \u2502\n\u2502                            \u2502     Act. 6 rows (102.0 Bytes), Throughput: 67.7K rows/s, CPU Time per worker: avg 280.0 us, max 360.0 us, Wall Time: 870.0 us           \u2502\n\u2502                            \u2502     Filtered: 97.9%, QError: 1.2                                                                                                        \u2502\n\u2502                            \u2502     Condition: s_store_sk == sr_store_sk_2                                                                                              \u2502\n\u2502                            \u251c\u2500 Repartition Exchange                                                                                                                   \u2502\n\u2502                            \u2502  \u2502     Est. 12 rows, cost 1.2e+01                                                                                                       \u2502\n\u2502                            \u2502  \u2502     Partition by: {s_store_sk}                                                                                                       \u2502\n\u2502                            \u2502  \u2514\u2500 Filter                                                                                                                              \u2502\n\u2502                            \u2502     \u2502     Est. 12 rows, cost 9.8e+00                                                                                                    \u2502\n\u2502                            \u2502     \u2502     Act. 12 rows (240.0 Bytes), Throughput: 28.6M rows/s, CPU Time per worker: avg 16.0 us, max 24.0 us, Wall Time: 5.0 us        \u2502\n\u2502                            \u2502     \u2502     Filtered: 0.0%, QError: 1.0                                                                                                   \u2502\n\u2502                            \u2502     \u2502     s_state = 'TN'                                                                                                                \u2502\n\u2502                            \u2502     \u2514\u2500 ReadFromStorage tpcds.store                                                                                                      \u2502\n\u2502                            \u2502              Est. 12 rows, cost 8.9e+00                                                                                                 \u2502\n\u2502                            \u2502              Act. 12 rows (240.0 Bytes), Throughput: 28.6M rows/s, CPU Time per worker: avg 48.0 us, max 72.0 us, Wall Time: 4.0 us     \u2502\n\u2502                            \u2502              Filtered: 0.0%, QError: 1.0                                                                                                \u2502\n\u2502                            \u2514\u2500 MergingAggregated                                                                                                                      \u2502\n\u2502                               \u2502     Est. 6 rows, cost 5.6e+04                                                                                                        \u2502\n\u2502                               \u2502     Act. 280 rows (4.9 KB), Throughput: 3.1M rows/s, CPU Time per worker: avg 60.0 us, max 80.0 us, Wall Time: 867.0 us              \u2502\n\u2502                               \u2502     Filtered: 0.0%, QError: 46.7                                                                                                     \u2502\n\u2502                               \u2514\u2500 Repartition Exchange                                                                                                                \u2502\n\u2502                                  \u2502     Est. 6 rows, cost 5.6e+04                                                                                                     \u2502\n\u2502                                  \u2502     Partition by: {sr_store_sk_2}                                                                                                 \u2502\n\u2502                                  \u2514\u2500 Aggregating                                                                                                                      \u2502\n\u2502                                     \u2502     Est. 6 rows, cost 5.6e+04                                                                                                  \u2502\n\u2502                                     \u2502     Act. 14 rows (238.0 Bytes), Throughput: 145.6K rows/s, CPU Time per worker: avg 7.0 us, max 9.0 us, Wall Time: 955.0 us    \u2502\n\u2502                                     \u2502     Filtered: 100.0%, QError: 2.3                                                                                              \u2502\n\u2502                                     \u2502     Group by: {sr_store_sk_2}                                                                                                  \u2502\n\u2502                                     \u2514\u2500 Projection                                                                                                                    \u2502\n\u2502                                        \u2502     Est. 50.9K rows, cost 5.6e+04                                                                                           \u2502\n\u2502                                        \u2502     Act. 49.3K rows (887.4 KB), Throughput: 519.5M rows/s, CPU Time per worker: avg 0.0 us, max 0.0 us, Wall Time: 947.0 us \u2502\n\u2502                                        \u2502     Filtered: 0.0%, QError: 1.0                                                                                             \u2502\n\u2502                                        \u2514\u2500 CTERef [0]                                                                                                                 \u2502\n\u2502                                                 Est. 50.9K rows, cost 5.2e+04                                                                                        \u2502\n\u2502 CTEDef [0]                                                                                                                                                           \u2502\n\u2502    MergingAggregated                                                                                                                                                 \u2502\n\u2502    \u2502     Est. 50.9K rows, cost 4.3e+05                                                                                                                               \u2502\n\u2502    \u2502     Act. 49.3K rows (1.3 MB), Throughput: 497.5M rows/s, CPU Time per worker: avg 34.0 us, max 35.0 us, Wall Time: 996.0 us                                     \u2502\n\u2502    \u2502     Filtered: 0.0%, QError: 1.0                                                                                                                                 \u2502\n\u2502    \u2514\u2500 Repartition Exchange                                                                                                                                           \u2502\n\u2502       \u2502     Est. 50.9K rows, cost 4.3e+05                                                                                                                            \u2502\n\u2502       \u2502     Partition by: {sr_customer_sk, sr_store_sk}                                                                                                              \u2502\n\u2502       \u2514\u2500 Aggregating                                                                                                                                                 \u2502\n\u2502          \u2502     Est. 50.9K rows, cost 4.2e+05                                                                                                                         \u2502\n\u2502          \u2502     Act. 51.4K rows (1.3 MB), Throughput: 1.1G rows/s, CPU Time per worker: avg 27.0 us, max 28.0 us, Wall Time: 506.0 us                                 \u2502\n\u2502          \u2502     Filtered: 5.8%, QError: 1.0                                                                                                                           \u2502\n\u2502          \u2502     Group by: {sr_customer_sk, sr_store_sk}                                                                                                               \u2502\n\u2502          \u2514\u2500 Inner Join                                                                                                                                               \u2502\n\u2502             \u2502     Est. 50.9K rows, cost 4.2e+05                                                                                                                      \u2502\n\u2502             \u2502     Act. 54.5K rows (1.4 MB), Throughput: 1.2G rows/s, CPU Time per worker: avg 14.3 ms, max 15.0 ms, Wall Time: 477.0 us                              \u2502\n\u2502             \u2502     Filtered: -90.6%, QError: 1.1                                                                                                                      \u2502\n\u2502             \u2502     Condition: sr_returned_date_sk == d_date_sk                                                                                                        \u2502\n\u2502             \u251c\u2500 Local Exchange                                                                                                                                        \u2502\n\u2502             \u2502  \u2502     Est. 280.8K rows, cost 2.3e+05                                                                                                                  \u2502\n\u2502             \u2502  \u2514\u2500 Filter                                                                                                                                             \u2502\n\u2502             \u2502     \u2502     Est. 280.8K rows, cost 2.3e+05                                                                                                               \u2502\n\u2502             \u2502     \u2502     Act. 54.5K rows (1.9 MB), Throughput: 5.7G rows/s, CPU Time per worker: avg 865.0 us, max 885.0 us, Wall Time: 96.0 us                       \u2502\n\u2502             \u2502     \u2502     Filtered: 0.0%, QError: 5.2                                                                                                                  \u2502\n\u2502             \u2502     \u2502     Dynamic Filters: {sr_returned_date_sk:range}                                                                                                 \u2502\n\u2502             \u2502     \u2514\u2500 ReadFromStorage tpcds.store_returns                                                                                                             \u2502\n\u2502             \u2502              Est. 280.8K rows, cost 2.1e+05                                                                                                            \u2502\n\u2502             \u2502              Act. 54.5K rows (1.9 MB), Throughput: 5.8G rows/s, CPU Time per worker: avg 2.4 ms, max 2.4 ms, Wall Time: 95.0 us                        \u2502\n\u2502             \u2502              Filtered: 0.0%, QError: 5.2                                                                                                               \u2502\n\u2502             \u2514\u2500 Projection                                                                                                                                            \u2502\n\u2502                \u2502     Est. 366 rows, cost 6.0e+04                                                                                                                     \u2502\n\u2502                \u2502     Act. 28.6K rows (228.8 KB), Throughput: 45.4G rows/s, CPU Time per worker: avg 1.1 ms, max 1.3 ms, Wall Time: 7.0 us                            \u2502\n\u2502                \u2502     Filtered: 0.0%, QError: 80.0                                                                                                                    \u2502\n\u2502                \u2502     Dynamic Filters Builder: {d_date_sk}                                                                                                            \u2502\n\u2502                \u2514\u2500 Broadcast Exchange                                                                                                                                 \u2502\n\u2502                   \u2502     Est. 366 rows, cost 6.0e+04                                                                                                                  \u2502\n\u2502                   \u2514\u2500 Filter                                                                                                                                          \u2502\n\u2502                      \u2502     Est. 366 rows, cost 5.9e+04                                                                                                               \u2502\n\u2502                      \u2502     Act. 366 rows (6.1 KB), Throughput: 85.1M rows/s, CPU Time per worker: avg 282.0 us, max 283.0 us, Wall Time: 44.0 us                     \u2502\n\u2502                      \u2502     Filtered: 0.0%, QError: 1.0                                                                                                               \u2502\n\u2502                      \u2502     d_year = 2000                                                                                                                             \u2502\n\u2502                      \u2514\u2500 ReadFromStorage tpcds.date_dim                                                                                                               \u2502\n\u2502                               Est. 71.3K rows, cost 5.4e+04                                                                                                          \u2502\n\u2502                               Act. 366 rows (6.1 KB), Throughput: 85.1M rows/s, CPU Time per worker: avg 780.0 us, max 840.0 us, Wall Time: 43.0 us                  \u2502\n\u2502                               Filtered: 0.0%, QError: 199.6                                                                                                          \u2502\n\u2502 note: Dynamic Filter is applied for 1 times.                                                                                                                         \u2502\n\u2502 note: CTE(Common Table Expression) is applied for 2 times.                                                                                                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,s.kt)("ol",{start:3},(0,s.kt)("li",{parentName:"ol"},"Explain analyze distributed + SQL")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"EXPLAIN ANALYZE DISTRIBUTED\nSELECT\n    i_item_id,\n    avg(ss_quantity) AS agg1,\n    avg(ss_list_price) AS agg2,\n    avg(ss_coupon_amt) AS agg3,\n    avg(ss_sales_price) AS agg4\nFROM store_sales\n, customer_demographics\n, date_dim\n, item\n, promotion\nWHERE (ss_sold_date_sk = d_date_sk) AND (ss_item_sk = i_item_sk) AND (ss_cdemo_sk = cd_demo_sk) AND (ss_promo_sk = p_promo_sk) AND (cd_gender = 'M') AND (cd_marital_status = 'S') AND (cd_education_status = 'College') AND ((p_channel_email\n = 'N') OR (p_channel_event = 'N')) AND (d_year = 2000)\nGROUP BY i_item_id\nORDER BY i_item_id ASC\nLIMIT 100\n\n")),(0,s.kt)("p",null,"Output\uff1a\n",(0,s.kt)("img",{src:r(13832).Z,width:"2290",height:"1694"})),(0,s.kt)("p",null,"Notes:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"QError: This is calculated as max(Est rows, Act rows) / min(Est rows, Act rows), where a value of 1 is optimal."),(0,s.kt)("li",{parentName:"ul"},"Wall Time: This refers to the maximum wall clock time among all the worker nodes. We can use this to identify which step took the longest time."),(0,s.kt)("li",{parentName:"ul"},"CPU Time: By analyzing CPU time, we can detect data skew issues. If the maximum time is significantly greater than the average time, it indicates that one worker node is processing a disproportionate amount of data.")))}p.isMDXComponent=!0},85391:(t,e,r)=>{r.d(e,{Z:()=>n});const n=r.p+"assets/images/boxcnbHJgX6mTV1MHFyLXajy23f-c0effcd2819edf7d1bb23755d9527e39.png"},13832:(t,e,r)=>{r.d(e,{Z:()=>n});const n=r.p+"assets/images/boxcnxiwhbhVnUQkflLLELMblMb-53e97bb3ff821485ece57e29df406c24.png"}}]);