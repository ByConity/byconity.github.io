"use strict";(self.webpackChunkbyconity=self.webpackChunkbyconity||[]).push([[3886],{9613:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>f});var o=r(9496);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),p=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(r),h=n,f=c["".concat(s,".").concat(h)]||c[h]||u[h]||a;return r?o.createElement(f,i(i({ref:t},m),{},{components:r})):o.createElement(f,i({ref:t},m))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:n,i[1]=l;for(var p=2;p<a;p++)i[p]=r[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}h.displayName="MDXCreateElement"},1439:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var o=r(4778),n=(r(9496),r(9613));const a={title:"Git WorkFlow",tags:["Docs"]},i="Basic rules",l={unversionedId:"community/git-workflow",id:"community/git-workflow",title:"Git WorkFlow",description:"ByConity is leverage the Github doing the developement. Each contributor and maintainer in ByConity must follow this workflow:",source:"@site/docs/community/git-workflow.mdx",sourceDirName:"community",slug:"/community/git-workflow",permalink:"/docs/next/community/git-workflow",draft:!1,editUrl:"https://github.com/ByConity/byconity.github.io/tree/main/docs/community/git-workflow.mdx",tags:[{label:"Docs",permalink:"/docs/next/tags/docs"}],version:"current",frontMatter:{title:"Git WorkFlow",tags:["Docs"]},sidebar:"tutorialSidebar",previous:{title:"Community Code of Conduct",permalink:"/docs/next/community/community-code-of-conduct"},next:{title:"Setup ByConity Developement Environment",permalink:"/docs/next/community/setup-development-environment"}},s={},p=[{value:"Prepare the fork",id:"prepare-the-fork",level:2},{value:"Configure your fork",id:"configure-your-fork",level:2},{value:"Working on a Fork on local",id:"working-on-a-fork-on-local",level:2}],m={toc:p},c="wrapper";function u(e){let{components:t,...r}=e;return(0,n.kt)(c,(0,o.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"basic-rules"},"Basic rules"),(0,n.kt)("p",null,"ByConity is leverage the Github doing the developement. Each contributor and maintainer in ByConity must follow this workflow:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Work on forked repositories."),(0,n.kt)("li",{parentName:"ul"},"Create branches on the fork repo and avoid working directly on the ",(0,n.kt)("inlineCode",{parentName:"li"},"master")," branch.")),(0,n.kt)("h2",{id:"prepare-the-fork"},"Prepare the fork"),(0,n.kt)("p",null,"A fork is a copy of the repository from which you raise pull requests to propose changes to the original repository."),(0,n.kt)("h2",{id:"configure-your-fork"},"Configure your fork"),(0,n.kt)("p",null,"The document refers to the original repository as the upstream repository and to the forked repository as the origin repository. We assume you already have a fork of the upstream and you ",(0,n.kt)("inlineCode",{parentName:"p"},"git clone")," it already."),(0,n.kt)("h2",{id:"working-on-a-fork-on-local"},"Working on a Fork on local"),(0,n.kt)("p",null,"Configure a ",(0,n.kt)("inlineCode",{parentName:"p"},"remote")," repository that points to the upstream repository. This allows you to synchronize changes you make on the fork with the original repository."),(0,n.kt)("p",null,"In the terminal, navigate to the location of your fork and perform the following steps:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Run the ",(0,n.kt)("inlineCode",{parentName:"li"},"git remote -v")," command to list the current configured remote repository for your fork.\nThe result is as follows:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-txt"},"    origin  https://github.com/{your-username}/{your-fork}.git (fetch)\n    origin  https://github.com/{your-username}/{your-fork}.git (push)\n")),(0,n.kt)("p",null,"See the example:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-txt"},"    origin  https://github.com/YourName/ByConity.git (fetch)\n    origin  https://github.com/YourName/ByConity.git (push)\n")),(0,n.kt)("ol",{start:2},(0,n.kt)("li",{parentName:"ol"},"Specify a new remote upstream repository to synchronize with the fork:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"    git remote add upstream https://github.com/{original-owner}/{original-repository}.git\n")),(0,n.kt)("p",null,"See the example:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"    git remote add upstream https://github.com/ByConity/ByConity.git\n")),(0,n.kt)("ol",{start:3},(0,n.kt)("li",{parentName:"ol"},"Run the ",(0,n.kt)("inlineCode",{parentName:"li"},"git fetch upstream master")," command to fetch all branches."),(0,n.kt)("li",{parentName:"ol"},"Set up the local ",(0,n.kt)("inlineCode",{parentName:"li"},"master")," branch to track the remote ",(0,n.kt)("inlineCode",{parentName:"li"},"master")," branch from the upstream repository:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"    git branch -u upstream/master master\n")),(0,n.kt)("p",null,"Now, each time you rebase or check out the ",(0,n.kt)("inlineCode",{parentName:"p"},"master")," branch, you refer to the ",(0,n.kt)("inlineCode",{parentName:"p"},"master")," branch of the upstream repository. In other words, when you create a branch from local up-to-date ",(0,n.kt)("inlineCode",{parentName:"p"},"master")," means creating a branch from latest upstream ",(0,n.kt)("inlineCode",{parentName:"p"},"master"),"."),(0,n.kt)("p",null,"To verify that your local ",(0,n.kt)("inlineCode",{parentName:"p"},"master")," branch points to the ",(0,n.kt)("inlineCode",{parentName:"p"},"upstream/master"),", run the ",(0,n.kt)("inlineCode",{parentName:"p"},"git branch -vv")," command. The result is similar to the following:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-txt"},"* master         6a43546 [upstream/master] Translate Background Tasks Configuration in English\n")),(0,n.kt)("ol",{start:5},(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Commit changes. Always provide ",(0,n.kt)("a",{parentName:"p",href:"https://cbea.ms/git-commit/#imperative"},"clear commit messages")," to track commit changes easier.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Create a pull request from the branch of your forked repository to the ",(0,n.kt)("inlineCode",{parentName:"p"},"master")," branch of the upstream repository and wait for the maintainers' review."))),(0,n.kt)("p",null,"Pull requests should have a title that follows ",(0,n.kt)("a",{parentName:"p",href:"https://www.conventionalcommits.org/en/v1.0.0/#summary"},"the specification"),", otherwise, merging is blocked.\nIf you are not familiar with the specification simply ask maintainers to modify. You can also use this cheatsheet if you want:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"fix: prefix in the title indicates that PR is a bug fix and PATCH release must be triggered."),(0,n.kt)("li",{parentName:"ul"},"feat: prefix in the title indicates that PR is a feature and MINOR release must be triggered."),(0,n.kt)("li",{parentName:"ul"},"docs: prefix in the title indicates that PR is only related to the documentation and there is no need to trigger release."),(0,n.kt)("li",{parentName:"ul"},"perf: prefix in the title indicates that PR is only related to performance relates changes in the project and there is no need to trigger release."),(0,n.kt)("li",{parentName:"ul"},"chore: prefix in the title indicates that PR is only related to cleanup in the project and there is no need to trigger release."),(0,n.kt)("li",{parentName:"ul"},"test: prefix in the title indicates that PR is only related to tests and there is no need to trigger release."),(0,n.kt)("li",{parentName:"ul"},"refactor: prefix in the title indicates that PR is only related to refactoring and there is no need to trigger release.")),(0,n.kt)("h1",{id:"reference"},"Reference"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/asyncapi/community/blob/master/git-workflow.md"},"Asyncapi Git WorkFlow")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://docs.github.com/en/get-started/quickstart/github-flow"},"GitHub github-flow"))))}u.isMDXComponent=!0}}]);