"use strict";(self.webpackChunkbyconity=self.webpackChunkbyconity||[]).push([[8455],{9613:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,k=m["".concat(s,".").concat(d)]||m[d]||c[d]||o;return n?a.createElement(k,l(l({ref:t},u),{},{components:n})):a.createElement(k,l({ref:t},u))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7421:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(4778),r=(n(9496),n(9613));const o={title:"Data Type",tags:["Docs"]},l="Data Type",i={unversionedId:"basic-guide/data-type",id:"version-0.2.0/basic-guide/data-type",title:"Data Type",description:"Document Type: Descriptive",source:"@site/versioned_docs/version-0.2.0/basic-guide/data-type.mdx",sourceDirName:"basic-guide",slug:"/basic-guide/data-type",permalink:"/docs/basic-guide/data-type",draft:!1,editUrl:"https://github.com/ByConity/byconity.github.io/tree/main/versioned_docs/version-0.2.0/basic-guide/data-type.mdx",tags:[{label:"Docs",permalink:"/docs/tags/docs"}],version:"0.2.0",frontMatter:{title:"Data Type",tags:["Docs"]},sidebar:"tutorialSidebar",previous:{title:"Import Data",permalink:"/docs/basic-guide/data-import"},next:{title:"Data Visualisation",permalink:"/docs/basic-guide/data-visualisation"}},s={},p=[{value:"Integer Range",id:"integer-range",level:2},{value:"Unsigned Integer Range",id:"unsigned-integer-range",level:2},{value:"How to generate",id:"how-to-generate",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Limits",id:"limits",level:2},{value:"Use floating point numbers",id:"use-floating-point-numbers",level:2},{value:"NaN and Inf",id:"nan-and-inf",level:2},{value:"parameters",id:"parameters",level:2},{value:"range of decimal values",id:"range-of-decimal-values",level:2},{value:"Internal representation",id:"internal-representation",level:2},{value:"Operation and result type",id:"operation-and-result-type",level:2},{value:"overflow check",id:"overflow-check",level:2},{value:"Date",id:"date",level:2},{value:"<strong>Example</strong>",id:"example",level:3},{value:"DateTime",id:"datetime",level:2},{value:"Time zone",id:"time-zone",level:3},{value:"DateTime64",id:"datetime64",level:2},{value:"Example",id:"example-1",level:3},{value:"Example usage",id:"example-usage",level:2},{value:"Rules and Usage",id:"rules-and-usage",level:2},{value:"String",id:"string",level:2},{value:"Encoding",id:"encoding",level:3},{value:"FixString",id:"fixstring",level:2},{value:"Nested(Name1 Type1, Name2 Type2, \u2026)",id:"nestedname1-type1-name2-type2-",level:2},{value:"Create tuple",id:"create-tuple",level:2},{value:"Data types in tuples",id:"data-types-in-tuples",level:2},{value:"Grammar",id:"grammar",level:2},{value:"describe",id:"describe",level:2},{value:"Example",id:"example-2",level:2},{value:"define",id:"define",level:2},{value:"Additional Features for Domains",id:"additional-features-for-domains",level:3},{value:"Domains Type Restrictions",id:"domains-type-restrictions",level:3},{value:"ipv4",id:"ipv4",level:2},{value:"Basic usage",id:"basic-usage",level:3},{value:"ipv6",id:"ipv6",level:2},{value:"Basic Use",id:"basic-use",level:3},{value:"create array",id:"create-array",level:2},{value:"Use data types",id:"use-data-types",level:2},{value:"Storage Features",id:"storage-features",level:2},{value:"user&#39;s guidance",id:"users-guidance",level:2},{value:"Data writing",id:"data-writing",level:3},{value:"data query",id:"data-query",level:3},{value:"Example of use",id:"example-of-use",level:2},{value:"Interval type",id:"interval-type",level:2},{value:"Instructions for use",id:"instructions-for-use",level:3},{value:"expression",id:"expression",level:2},{value:"gather",id:"gather",level:2},{value:"Nothing",id:"nothing",level:2}],u={toc:p},m="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"data-type"},"Data Type"),(0,r.kt)("p",null,"Document Type: Descriptive"),(0,r.kt)("p",null,"Summary:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"What data types does ByConity support?"),(0,r.kt)("li",{parentName:"ol"},"Compared with ClickHouse, which data types are lacking in")),(0,r.kt)("h1",{id:"difference-summary"},"Difference Summary"),(0,r.kt)("p",null,"ByConity lacks Date32 type, Boolean type, Geo type (requires allow_experimental_geo_types =1 to use)"),(0,r.kt)("p",null,"ByConity's Map has three modes of KV/Byte/CompactByte, among which the KV mode is compatible with the open source ClickHouse."),(0,r.kt)("h1",{id:"integer-types"},"Integer Types"),(0,r.kt)("p",null,"Fixed-length integers, including signed or unsigned integers."),(0,r.kt)("p",null,"When creating a table, you can set type parameters for integers (eg. ",(0,r.kt)("strong",{parentName:"p"},"TINYINT(8)"),", ",(0,r.kt)("strong",{parentName:"p"},"SMALLINT(16)"),", ",(0,r.kt)("strong",{parentName:"p"},"INT(32)"),", ",(0,r.kt)("strong",{parentName:"p"},"BIGINT(64)"),"), But ByConity ignores them."),(0,r.kt)("h2",{id:"integer-range"},"Integer Range"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Int8")," \u2014 ","[-128 : 127]"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Int16")," \u2014 ","[-32768 : 32767]"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Int32")," \u2014 ","[-2147483648 : 2147483647]"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Int64")," \u2014 ","[-9223372036854775808 : 9223372036854775807]"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Int128")," \u2014 ","[-170141183460469231731687303715884105728 : 170141183460469231731687303715884105727]"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Int256")," \u2014 ","[-57896044618658097711785492504343953926634992332820282019728792003956564819968 : 57896044618658097711785492504343953926634992332820282019728792003956564819967]")),(0,r.kt)("p",null,"Alias:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Int8")," \u2014 ",(0,r.kt)("strong",{parentName:"li"},"TINYINT"),", ",(0,r.kt)("strong",{parentName:"li"},"BOOL"),", ",(0,r.kt)("strong",{parentName:"li"},"BOOLEAN"),", ",(0,r.kt)("strong",{parentName:"li"},"INT1"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Int16")," \u2014 ",(0,r.kt)("strong",{parentName:"li"},"SMALLINT"),", ",(0,r.kt)("strong",{parentName:"li"},"INT2"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Int32")," \u2014 ",(0,r.kt)("strong",{parentName:"li"},"INT"),", ",(0,r.kt)("strong",{parentName:"li"},"INT4"),", ",(0,r.kt)("strong",{parentName:"li"},"INTEGER"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Int64")," \u2014 ",(0,r.kt)("strong",{parentName:"li"},"BIGINT"),".")),(0,r.kt)("h2",{id:"unsigned-integer-range"},"Unsigned Integer Range"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"UInt8")," \u2014 ","[0 : 255]"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"UInt16")," \u2014 ","[0 : 65535]"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"UInt32")," \u2014 ","[0 : 4294967295]"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"UInt64")," \u2014 ","[0 : 18446744073709551615]"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"UInt128")," \u2014 ","[0 : 340282366920938463463374607431768211455]"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"UInt256")," \u2014 ","[0 : 115792089237316195423570985008687907853269984665640564039457584007913129639935]")),(0,r.kt)("h1",{id:"uuid"},"UUID"),(0,r.kt)("p",null,"A Universally Unique Identifier (UUID) is a 16-byte number that identifies a record. See ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Universally_unique_identifier"},"Wikipedia"),"."),(0,r.kt)("p",null,"Examples of UUID type values are as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"ec282515-a492-46d8-808c-8f3bd899b1b1\n\n")),(0,r.kt)("p",null,"If no value is specified for the UUID column when inserting a new record, the UUID value will be filled with zeros:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"00000000-0000-0000-0000-000000000000\n\n")),(0,r.kt)("h2",{id:"how-to-generate"},"How to generate"),(0,r.kt)("p",null,"To generate UUID values, ByConity provides the ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"},"generateuidv4")," function."),(0,r.kt)("h2",{id:"usage-example"},"Usage Example"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1")),(0,r.kt)("p",null,"This example demonstrates creating a table with a column of type UUID and inserting a value into the table."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE TABLE t_uuid (x UUID, y String) ENGINE=Memory\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"INSERT INTO t_uuid SELECT generateUUIDv4(), 'Example 1'\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT * FROM t_uuid\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500x\u2500\u252c\u2500y\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 136091bf-474c-496c-a743-bcd531e12563 \u2502 Example 1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2")),(0,r.kt)("p",null,"In this example, no value for the UUID column is specified when inserting a new record."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"INSERT INTO t_uuid (y) VALUES ('Example 2')\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT * FROM t_uuid\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500x\u2500\u252c\u2500y\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 136091bf-474c-496c-a743-bcd531e12563 \u2502 Example 1 \u2502\n\u2502 00000000-0000-0000-0000-000000000000 \u2502 Example 2 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("h2",{id:"limits"},"Limits"),(0,r.kt)("p",null,"UUID data type only supports ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/data-types/string"},"string")," data type also supports functions(for example, ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/min#agg_function-min"},"min"),", ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/max#agg_function-max"},"max"),", and ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/count#agg_function-count"},"count"),")."),(0,r.kt)("p",null,"Arithmetic operations do not support UUID data types\uff08for example, ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/functions/arithmetic-functions#arithm_func-abs"},"abs"),"\uff09or aggregate functions such as ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/sum#agg_function-sum"},"sum")," and ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/avg#agg_function-avg"},"avg"),"."),(0,r.kt)("h1",{id:"floating-point-type"},"floating point type"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/IEEE_754"},"Floating point numbers"),"\u3002"),(0,r.kt)("p",null,"The type is the same as the following C type\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Float32")," - ",(0,r.kt)("strong",{parentName:"li"},"float")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Float64")," - ",(0,r.kt)("strong",{parentName:"li"},"double"))),(0,r.kt)("p",null,"We recommend that you store data as integers whenever possible. For example, converting a fixed-precision number to an integer value, such as a currency amount or page load time expressed in milliseconds"),(0,r.kt)("h2",{id:"use-floating-point-numbers"},"Use floating point numbers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Calculations with floating point numbers may cause rounding errors.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT 1 - 0.9\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500minus(1, 0.9)\u2500\u2510\n\u2502 0.09999999999999998 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The result of the calculation depends on the calculation method (processor type and architecture of the computer system)"),(0,r.kt)("li",{parentName:"ul"},"Results of floating point calculations may be values such as infinity (",(0,r.kt)("strong",{parentName:"li"},"INF"),") and \xabNot a Number\xbb (",(0,r.kt)("strong",{parentName:"li"},"NaN"),"). This should be taken into account when calculating with floating point numbers."),(0,r.kt)("li",{parentName:"ul"},"When reading floating-point numbers line by line, the floating-point result may not be the most recent value displayed by the machine.")),(0,r.kt)("h2",{id:"nan-and-inf"},"NaN and Inf"),(0,r.kt)("p",null,"Compared to standard SQL, ByConity supports the following classes of floating point numbers:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Inf")," \u2013 positive infinity")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT 0.5 / 0\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500divide(0.5, 0)\u2500\u2510\n\u2502            inf \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"-Inf")," \u2013 negative infinity")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT -0.5 / 0\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500divide(-0.5, 0)\u2500\u2510\n\u2502            -inf \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"NaN")," \u2013 not a number")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT 0 / 0\n\n\u250c\u2500divide(0, 0)\u2500\u2510\n\u2502          nan \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("p",null,"You can see more rules about ",(0,r.kt)("strong",{parentName:"p"},"NaN")," sorting in ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/data-types/float"},"ORDER BY clause")),(0,r.kt)("h1",{id:"decimal"},"Decimal"),(0,r.kt)("p",null,"Including Decimal(P,S),Decimal32(S),Decimal64(S),Decimal128(S)and other types"),(0,r.kt)("p",null,"Signed fixed-point numbers that maintain precision during addition, subtraction, and multiplication operations. For division, the least significant digit is discarded (no rounding)."),(0,r.kt)("h2",{id:"parameters"},"parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"P - Precision. Valid range: ","[1:38]",", determines how many decimal digits (including fractions) can be."),(0,r.kt)("li",{parentName:"ul"},"S - Scale. Valid range: ","[0:P]",", determines the number of decimal places included in the fractional part of the number.")),(0,r.kt)("p",null,"The following examples are synonymous for different Decimal representations of P parameter values: -P from ","[1:9]"," - for Decimal32(S) -P from ","[10:18]"," - for Decimal64(S) -P from ","[ 19:38]"," - for Decimal128(S)"),(0,r.kt)("h2",{id:"range-of-decimal-values"},"range of decimal values"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Decimal32(S) - ( -1 ",(0,r.kt)("em",{parentName:"li"}," 10^(9 - S),1"),"10^(9-S) )"),(0,r.kt)("li",{parentName:"ul"},"Decimal64(S) - ( -1 ",(0,r.kt)("em",{parentName:"li"}," 10^(18 - S),1"),"10^(18-S) )"),(0,r.kt)("li",{parentName:"ul"},"Decimal128(S) - ( -1 ",(0,r.kt)("em",{parentName:"li"}," 10^(38 - S),1"),"10^(38-S) )")),(0,r.kt)("p",null,"For example, Decimal32(4) can represent values from -99999.9999 to 99999.9999 in steps of 0.0001."),(0,r.kt)("h2",{id:"internal-representation"},"Internal representation"),(0,r.kt)("p",null,"The data is stored in a signed integer with the same bit width as itself. The actual range of this number in memory will be higher than the above range, and the corresponding check will be done when converting from String to decimal number."),(0,r.kt)("p",null,"Since modern CPUs don't support 128-bit numbers, operations on Decimal128 are emulated by software. So the operation speed of Decimal128 is significantly slower than Decimal32/Decimal64."),(0,r.kt)("h2",{id:"operation-and-result-type"},"Operation and result type"),(0,r.kt)("p",null,"Binary operations on Decimal result in a wider result type (regardless of the order of the arguments)."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Decimal64(S1) ","<","op",">"," Decimal32(S2) -> Decimal64(S)"),(0,r.kt)("li",{parentName:"ul"},"Decimal128(S1) ","<","op",">"," Decimal32(S2) -> Decimal128(S)"),(0,r.kt)("li",{parentName:"ul"},"Decimal128(S1) ","<","op",">"," Decimal64(S2) -> Decimal128(S)")),(0,r.kt)("p",null,"Rules for precision changes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Addition, subtraction: S = max(S1, S2)."),(0,r.kt)("li",{parentName:"ul"},"Multiplication: S = S1 + S2."),(0,r.kt)("li",{parentName:"ul"},"Division: S = S1.")),(0,r.kt)("p",null,"For similar operations between Decimal and integers, the result is a decimal of the same size as the argument."),(0,r.kt)("p",null,"Functions between Decimal and Float32/Float64 are undefined. To perform such operations you can use: toDecimal32, toDecimal64, toDecimal128 or toFloat32, toFloat64 requires explicit conversion of one of the arguments. Note that the result will lose precision and type conversions are expensive operations."),(0,r.kt)("p",null,"Some functions on Decimal return results as Float64 (for example, var or stddev). For some of them, intermediate calculations happen in Decimal . For such functions, the results for the same data in Float64 and Decimal may differ, although the result types are the same."),(0,r.kt)("h2",{id:"overflow-check"},"overflow check"),(0,r.kt)("p",null,"Numerical overflow may occur when performing operations on Decimal types. Excess digits in fractions are discarded (not rounded). Too many digits in an integer will cause an exception."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT toDecimal32(2, 4) AS x, x / 3\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500x\u2500\u252c\u2500divide(toDecimal32(2, 4), 3)\u2500\u2510\n\u2502 2.0000 \u2502                       0.6666 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSELECT toDecimal32(4.2, 8) AS x, x * x\n\nDB::Exception: Scale is out of bounds.\n\nSELECT toDecimal32(4.2, 8) AS x, 6 * x\n\nDB::Exception: Decimal math overflow.\n\n")),(0,r.kt)("p",null,"Checking for overflow can result in slower calculations. Overflow checking can be disabled by setting ",(0,r.kt)("strong",{parentName:"p"},"decimal_check_overflow")," if overflow is known to be impossible, in which case overflow will lead to incorrect results:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SET decimal_check_overflow = 0;\nSELECT toDecimal32(4.2, 8) AS x, 6 * x\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500x\u2500\u252c\u2500multiply(6, toDecimal32(4.2, 8))\u2500\u2510\n\u2502 4.20000000 \u2502                     -17.74967296 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("p",null,"Overflow checking happens not only on arithmetic operations, but also on comparison operations:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT toDecimal32(1, 8) < 100\n\nDB::Exception: Can't compare.\n\n")),(0,r.kt)("h1",{id:"date-time-related-types"},"Date time related types"),(0,r.kt)("h2",{id:"date"},"Date"),(0,r.kt)("p",null,"Stored in two bytes, representing date values from 1970-01-01 (unsigned) to the present. Allows storage of upper threshold constants defined from the Unix epoch up to the compile phase (currently the upper limit is 2106, but 2105 will eventually be fully supported). The minimum output is 1970-01-01."),(0,r.kt)("p",null,"Range of values:","[1970-01-01, 2149-06-06]","."),(0,r.kt)("p",null,"There is no time zone information stored in the date."),(0,r.kt)("h3",{id:"example"},(0,r.kt)("strong",{parentName:"h3"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE TABLE date_test\n(\n    `timestamp` Date,\n    `event_id` UInt8\n)\nENGINE = Memory;\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"INSERT INTO date_test VALUES ('2019-12-20', 1);\nSELECT * FROM date_test;\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500\u2500timestamp\u2500\u252c\u2500event_id\u2500\u2510\n\u2502 2019-12-20 \u2502        1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("h2",{id:"datetime"},"DateTime"),(0,r.kt)("p",null,"Timestamp type. Store Unix timestamps in four bytes (unsigned). Allows storing values in the same range as the date type. The minimum value is 1970-01-01 00:00:00. Timestamp type values are accurate to the second (no leap seconds)."),(0,r.kt)("p",null,"Range of values: ","[1970-01-01 00:00:00, 2106-02-07 06:28:15]","."),(0,r.kt)("h3",{id:"time-zone"},"Time zone"),(0,r.kt)("p",null,"Timestamps are converted from text (broken into components) to binary and back, using the system timezone when the client or server was started. In text format, information about daylight saving time is lost."),(0,r.kt)("p",null,"By default, clients use the server's time zone when connecting to the service. You can set to use client time by enabling the client command line option ",(0,r.kt)("strong",{parentName:"p"},"--use_client_time_zone"),"."),(0,r.kt)("p",null,"So when dealing with textual dates (e.g. when saving text dumps), keep in mind that there may be ambiguity during daylight savings changes, and there may be problems matching data if timezones change."),(0,r.kt)("h2",{id:"datetime64"},"DateTime64"),(0,r.kt)("p",null,"This type allows storing a time value at an instant in the form of a date plus a time, with defined sub-second precision"),(0,r.kt)("p",null,"Timescale size (precision): 10(-precision) seconds"),(0,r.kt)("p",null,"Grammar:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"DateTime64(precision, [timezone])\n\n")),(0,r.kt)("p",null,"Internally, this type stores data as ticks since the Linux epoch (1970-01-01 00:00:00UTC) as an Int64 type. The resolution of the timescale is determined by the precision parameter. In addition, the ",(0,r.kt)("strong",{parentName:"p"},"DateTime64")," type can store time zone information like any other data column, and the time zone affects how values of the ",(0,r.kt)("strong",{parentName:"p"},"DateTime64")," type are displayed in text format, and how time data specified as a string ('2020 -01-01 05:00:01.000'). The time zone is not stored in the rows of the table (nor in the resultset), but in the metadata of the columns. For details, please refer to ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/data-types/datetime"},"DateTime")," data type."),(0,r.kt)("p",null,"Range of values: ","[1900-01-01 00:00:00, 2299-12-31 23:59:59.99999999]"," (Note: the maximum value is 8)."),(0,r.kt)("h3",{id:"example-1"},"Example"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"1.")," Create a table with a ",(0,r.kt)("strong",{parentName:"p"},"DateTime64")," type column and insert data into it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE TABLE dt\n(\n    `timestamp` DateTime64(3, 'Asia/Istanbul'),\n    `event_id` UInt8\n)\nENGINE = Memory\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"INSERT INTO dt Values (1546300800000, 1), ('2019-01-01 00:00:00', 2)\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT * FROM dt\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500timestamp\u2500\u252c\u2500event_id\u2500\u2510\n\u2502 2019-01-01 03:00:00.000 \u2502        1 \u2502\n\u2502 2019-01-01 00:00:00.000 \u2502        2 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When inserting a datetime as an integer, it is treated as an appropriately scaled Unix timestamp (UTC). ",(0,r.kt)("strong",{parentName:"li"},"1546300800000")," (with a precision of 3) means ",(0,r.kt)("strong",{parentName:"li"},"'2019-01-01 00:00:00'")," UTC. However, because the ",(0,r.kt)("strong",{parentName:"li"},"timestamp")," column specifies ",(0,r.kt)("strong",{parentName:"li"},"Asia/Istanbul")," (UTC+ 3) the time zone, when output as a string, it will appear as ",(0,r.kt)("strong",{parentName:"li"},"'2019-01-01 03:00:00'")),(0,r.kt)("li",{parentName:"ul"},"When inserting a string as a datetime, it will be given time zone information. ",(0,r.kt)("strong",{parentName:"li"},"'2019-01-01 00:00:00'")," will be considered to be in ",(0,r.kt)("strong",{parentName:"li"},"Asia/Istanbul")," timezone and stored as ",(0,r.kt)("strong",{parentName:"li"},"1546290000000"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"2.")," Filter the value of ",(0,r.kt)("strong",{parentName:"p"},"DateTime64")," type"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT * FROM dt WHERE timestamp = toDateTime64('2019-01-01 00:00:00', 3, 'Asia/Istanbul')\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500timestamp\u2500\u252c\u2500event_id\u2500\u2510\n\u2502 2019-01-01 00:00:00.000 \u2502        2 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("p",null,"Unlike ",(0,r.kt)("strong",{parentName:"p"},"DateTime"),", values of type ",(0,r.kt)("strong",{parentName:"p"},"DateTime64")," are not automatically converted from values of type ",(0,r.kt)("strong",{parentName:"p"},"String")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"3.")," Get the time zone information of ",(0,r.kt)("strong",{parentName:"p"},"DateTime64")," type value:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT toDateTime64(now(), 3, 'Asia/Istanbul') AS column, toTypeName(column) AS x\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500column\u2500\u252c\u2500x\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 2019-10-16 04:12:04.000 \u2502 DateTime64(3, 'Asia/Istanbul') \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"4.")," Time zone conversion"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT\ntoDateTime64(timestamp, 3, 'Europe/London') as lon_time,\ntoDateTime64(timestamp, 3, 'Asia/Istanbul') as mos_time\nFROM dt\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500lon_time\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500mos_time\u2500\u2510\n\u2502 2019-01-01 00:00:00.000 \u2502 2019-01-01 03:00:00.000 \u2502\n\u2502 2018-12-31 21:00:00.000 \u2502 2019-01-01 00:00:00.000 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("h1",{id:"enumeration-typeenum8enum16"},"Enumeration type\uff08Enum8,Enum16\uff09"),(0,r.kt)("p",null,"Includes ",(0,r.kt)("strong",{parentName:"p"},"Enum8")," and ",(0,r.kt)("strong",{parentName:"p"},"Enum16")," types. ",(0,r.kt)("strong",{parentName:"p"},"Enum")," holds the correspondence of ",(0,r.kt)("strong",{parentName:"p"},"'string'= integer"),". In ByConity, all operations with ",(0,r.kt)("strong",{parentName:"p"},"Enum")," data types are performed on values containing integers, even though the user is using string constants. This is more efficient in terms of performance than using the ",(0,r.kt)("strong",{parentName:"p"},"String")," data type."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Enum8")," is described with ",(0,r.kt)("strong",{parentName:"li"},"'String'= Int8")," pairs."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Enum16")," is described with ",(0,r.kt)("strong",{parentName:"li"},"'String'= Int16")," pairs.")),(0,r.kt)("h2",{id:"example-usage"},"Example usage"),(0,r.kt)("p",null,"Create a column with an enum ",(0,r.kt)("strong",{parentName:"p"},"Enum8('hello' = 1, 'world' = 2)")," type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE TABLE t_enum\n(\n    x Enum8('hello' = 1, 'world' = 2)\n)\nENGINE = Memory\n\n")),(0,r.kt)("p",null,"This ",(0,r.kt)("strong",{parentName:"p"},"x")," column can only store the values listed in the type definition: ",(0,r.kt)("strong",{parentName:"p"},"'hello'")," or ",(0,r.kt)("strong",{parentName:"p"},"'world'"),". If you try to save any other value, ByConity throws an exception."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},":) INSERT INTO t_enum VALUES ('hello'), ('world'), ('hello')\n\nINSERT INTO t_enum VALUES\n\nOk.\n\n3 rows in set. Elapsed: 0.002 sec.\n\n:) insert into t_enum values('a')\n\nINSERT INTO t_enum VALUES\n\n\nException on client:\nCode: 49. DB::Exception: Unknown element 'a' for type Enum8('hello' = 1, 'world' = 2)\n\n")),(0,r.kt)("p",null,"ByConity outputs string values from ",(0,r.kt)("strong",{parentName:"p"},"Enum")," when you query data from the table."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT * FROM t_enum\n\n\u250c\u2500x\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 hello \u2502\n\u2502 world \u2502\n\u2502 hello \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("p",null,"If you need to see the value of the corresponding row, you must convert the ",(0,r.kt)("strong",{parentName:"p"},"Enum")," value to an integer type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT CAST(x, 'Int8') FROM t_enum\n\n\u250c\u2500CAST(x, 'Int8')\u2500\u2510\n\u2502               1 \u2502\n\u2502               2 \u2502\n\u2502               1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("p",null,"To create enum values in queries, you also need to use ",(0,r.kt)("strong",{parentName:"p"},"CAST"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT toTypeName(CAST('a', 'Enum8(\\'a\\' = 1, \\'b\\' = 2)'))\n\n\u250c\u2500toTypeName(CAST('a', 'Enum8(\\'a\\' = 1, \\'b\\' = 2)'))\u2500\u2510\n\u2502 Enum8('a' = 1, 'b' = 2)                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("h2",{id:"rules-and-usage"},"Rules and Usage"),(0,r.kt)("p",null,"Each value ranges from ",(0,r.kt)("strong",{parentName:"p"},"-128 ... 127")," for ",(0,r.kt)("strong",{parentName:"p"},"Enum8")," types and ",(0,r.kt)("strong",{parentName:"p"},"-32768 ... 32767")," for ",(0,r.kt)("strong",{parentName:"p"},"Enum16")," types. All strings or numbers must be distinct. Empty strings are allowed. If an Enum type is specified (during table definition), the numbers can be in any order. However, the order is not important."),(0,r.kt)("p",null,"Neither strings nor numbers in ",(0,r.kt)("strong",{parentName:"p"},"Enum")," can be ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/data-types/enum"},"NULL"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Enum")," is included in the ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/data-types/nullable"},"nullable")," type. So if you create a table with this query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE TABLE t_enum_nullable\n(\n    x Nullable( Enum8('hello' = 1, 'world' = 2) )\n)\nENGINE = TinyLog\n\n")),(0,r.kt)("p",null,"Not only ",(0,r.kt)("strong",{parentName:"p"},"'hello'")," and ",(0,r.kt)("strong",{parentName:"p"},"'world'")," can be stored, but ",(0,r.kt)("strong",{parentName:"p"},"NULL")," can also be stored."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"INSERT INTO t_enum_nullable Values('hello'),('world'),(NULL)\n\n")),(0,r.kt)("p",null,"In memory, ",(0,r.kt)("strong",{parentName:"p"},"Enum")," columns are stored in the same way as ",(0,r.kt)("strong",{parentName:"p"},"Int8")," or ",(0,r.kt)("strong",{parentName:"p"},"Int16")," for the corresponding numeric value."),(0,r.kt)("p",null,"When reading as text, ByConity parses the value into a string and then searches for the corresponding string in the set of enumeration values. If not found, an exception is thrown. When reading the text format, it will find the corresponding value according to the read string. If not found, an exception is thrown."),(0,r.kt)("p",null,"When written as text, ByConity parses the value into a string and writes it. An exception is thrown if the column data contains garbage data (not numbers from a valid collection). Enum types are read and written in binary in the same way as ",(0,r.kt)("strong",{parentName:"p"},"Int8")," and ",(0,r.kt)("strong",{parentName:"p"},"Int16")," types."),(0,r.kt)("p",null,"The implicit default is the numerically smallest value."),(0,r.kt)("p",null,"In ",(0,r.kt)("strong",{parentName:"p"},"ORDER BY"),", ",(0,r.kt)("strong",{parentName:"p"},"GROUP BY"),", ",(0,r.kt)("strong",{parentName:"p"},"IN"),", ",(0,r.kt)("strong",{parentName:"p"},"DISTINCT"),", etc., Enum behaves the same as the corresponding number. For example, sort numerically. Enums work the same way for equality and comparison operators as they do for underlying numeric values."),(0,r.kt)("p",null,"Enum values cannot be compared to numbers. Enums can be compared to constant strings. An exception will be thrown if the string being compared to is not a valid Enum value. You can use the IN operator to determine whether an Enum exists in an Enum collection, where the Enum in the collection needs to be represented by a string."),(0,r.kt)("p",null,"Most operations with numbers and strings do not work with Enums; for example, Enum types cannot be added to a number. However, Enum has a native ",(0,r.kt)("strong",{parentName:"p"},"toString")," function which returns its string value."),(0,r.kt)("p",null,"Enum values can be converted to numeric types using the ",(0,r.kt)("strong",{parentName:"p"},"toT")," function, where T is a numeric type. If ",(0,r.kt)("strong",{parentName:"p"},"T")," happens to correspond to the underlying numeric type of Enum, this conversion is zero-cost."),(0,r.kt)("p",null,"The Enum type can be ALTERed without cost to modify the value of the corresponding collection. Members of Enum can be added or deleted by ",(0,r.kt)("strong",{parentName:"p"},"ALTER")," operation (deletion is safe as long as the value is not used in the table). As a safety precaution, changing a previously used Enum member will throw an exception."),(0,r.kt)("p",null,"Through the ",(0,r.kt)("strong",{parentName:"p"},"ALTER")," operation, you can convert ",(0,r.kt)("strong",{parentName:"p"},"Enum8")," to ",(0,r.kt)("strong",{parentName:"p"},"Enum16"),", and vice versa, just like ",(0,r.kt)("strong",{parentName:"p"},"Int8")," to ",(0,r.kt)("strong",{parentName:"p"},"Int16"),"."),(0,r.kt)("h1",{id:"string-type"},"String type"),(0,r.kt)("h2",{id:"string"},"String"),(0,r.kt)("p",null,"Strings can be of any length. It can contain an arbitrary set of bytes, including null bytes. Therefore, the String type can replace VARCHAR, BLOB, CLOB, etc. types in other DBMSs."),(0,r.kt)("h3",{id:"encoding"},"Encoding"),(0,r.kt)("p",null,"ByConity has no concept of encoding. Strings can be arbitrary sets of bytes, stored and output as they are. For storing text, we recommend using UTF-8 encoding. At least, if your terminal uses UTF-8 (recommended), then reading and writing doesn't require any conversion. Similarly, for different encoding text ByConity will have different functions for processing strings. For example, the ",(0,r.kt)("strong",{parentName:"p"},"length")," function can calculate the length of the byte array contained in the string, but the ",(0,r.kt)("strong",{parentName:"p"},"lengthUTF8")," function assumes that the string is encoded in UTF-8, and calculates the length of the Unicode characters contained in the string."),(0,r.kt)("h2",{id:"fixstring"},"FixString"),(0,r.kt)("p",null,"A string of fixed length N (N must be a strictly positive natural number)."),(0,r.kt)("p",null,"You can declare a column to be of type ",(0,r.kt)("strong",{parentName:"p"},"FixedString")," using the following syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<column_name> FixedString(N)\n\n")),(0,r.kt)("p",null,"where ",(0,r.kt)("strong",{parentName:"p"},"N")," represents a natural number."),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"FixedString")," type is efficient when the length of the data is exactly N bytes. In other cases, this may reduce efficiency."),(0,r.kt)("p",null,"Examples of values that can be efficiently stored in columns of type ",(0,r.kt)("strong",{parentName:"p"},"FixedString"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"IP address in binary representation (IPv6 uses ",(0,r.kt)("strong",{parentName:"li"},"FixedString(16)"),")"),(0,r.kt)("li",{parentName:"ul"},"language code (ru_RU, en_US \u2026 )"),(0,r.kt)("li",{parentName:"ul"},"currency code (USD, RUB \u2026 )"),(0,r.kt)("li",{parentName:"ul"},"hash value in binary representation (MD5 uses ",(0,r.kt)("strong",{parentName:"li"},"FixedString(16)"),", SHA256 uses ",(0,r.kt)("strong",{parentName:"li"},"FixedString(32)"),")")),(0,r.kt)("p",null,"Please use the ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/data-types/uuid"},"UUID")," data type to store UUID values."),(0,r.kt)("p",null,"When inserting data into ByConity,"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If the string contains less than `N' bytes, the end of the string will be padded with null bytes."),(0,r.kt)("li",{parentName:"ul"},"If the string contains more bytes than ",(0,r.kt)("strong",{parentName:"li"},"N"),", a ",(0,r.kt)("strong",{parentName:"li"},"Too large value for FixedString(N)")," exception will be thrown.")),(0,r.kt)("p",null,"Byconity does not remove null bytes at the end of strings when doing data lookups. If you use a ",(0,r.kt)("strong",{parentName:"p"},"WHERE")," clause, you will need to manually add null bytes to match the value of ",(0,r.kt)("strong",{parentName:"p"},"FixedString"),". The following example illustrates how to use the ",(0,r.kt)("strong",{parentName:"p"},"WHERE")," clause with ",(0,r.kt)("strong",{parentName:"p"},"FixedString"),"."),(0,r.kt)("p",null,"Consider a table with a ",(0,r.kt)("strong",{parentName:"p"},"FixedString(2)")," column:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500name\u2500\u2500\u2510\n\u2502 b     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("p",null,"The query statement ",(0,r.kt)("strong",{parentName:"p"},"SELECT ","*"," FROM FixedStringTable WHERE a = 'b'")," returns no results. Please use null bytes to fill the filter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT * FROM FixedStringTable\nWHERE a = 'b\\0'\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500a\u2500\u2510\n\u2502 b \u2502\n\u2514\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("p",null,"This method is different from MySQL's ",(0,r.kt)("strong",{parentName:"p"},"CHAR")," type (in MySQL, strings are padded with spaces and spaces are removed on output)."),(0,r.kt)("p",null,"Note that the length of ",(0,r.kt)("strong",{parentName:"p"},"FixedString(N)")," is a constant. A string consisting only of null characters, the return value of the function ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/functions/array-functions#array_functions-length"},"length")," is ",(0,r.kt)("strong",{parentName:"p"},"N"),", and The return value of the function ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/functions/string-functions#empty"},"empty")," is ",(0,r.kt)("strong",{parentName:"p"},"1"),"."),(0,r.kt)("h1",{id:"nested-data-structures"},"Nested data structures"),(0,r.kt)("h2",{id:"nestedname1-type1-name2-type2-"},"Nested(Name1 Type1, Name2 Type2, \u2026)"),(0,r.kt)("p",null,"Nested data structures are similar to nested tables. Parameters (column names and types) for nested data structures are similar to CREATE queries. Each table can contain any number of rows of nested data structures."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE TABLE nested_test (s String, nest Nested(x UInt8, y UInt32)) ENGINE = Memory;\nINSERT INTO nested_test VALUES ('Hello', [1,2], [10,20]), ('World', [3,4,5], [30,40,50]), ('Goodbye', [], []);\n\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT * FROM nested_test;\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500nest.x\u2500\u2500\u252c\u2500nest.y\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Hello   \u2502 [1,2]   \u2502 [10,20]    \u2502\n\u2502 World   \u2502 [3,4,5] \u2502 [30,40,50] \u2502\n\u2502 Goodbye \u2502 []      \u2502 []         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("p",null,"So you can simply think of nested data structures as multi-column arrays where all columns are the same length."),(0,r.kt)("p",null,"SELECT queries can only specify the name of an entire nested data structure when using ARRAY JOIN. For more information, refer to \xabARRAY JOIN clause\xbb. Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT s, nest.x, nest.y FROM nested_test ARRAY JOIN nest;\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u252c\u2500nest.x\u2500\u252c\u2500nest.y\u2500\u2510\n\u2502 Hello \u2502      1 \u2502     10 \u2502\n\u2502 Hello \u2502      2 \u2502     20 \u2502\n\u2502 World \u2502      3 \u2502     30 \u2502\n\u2502 World \u2502      4 \u2502     40 \u2502\n\u2502 World \u2502      5 \u2502     50 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("p",null,"A SELECT cannot be performed on an entire nested data structure. Only the columns that are part of it can be explicitly listed."),(0,r.kt)("p",null,"For INSERT queries, the column arrays in all nested data structures can be passed in individually (provided they are separate column arrays). During insertion, the system checks that they have the same length."),(0,r.kt)("p",null,"For DESCRIBE queries, columns in nested data structures are listed separately in the same way."),(0,r.kt)("p",null,"ALTER queries have very limited operations on nested data structures."),(0,r.kt)("h1",{id:"tuple"},"Tuple"),(0,r.kt)("p",null,"A tuple, where each element has a separate ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/data-types/#data_types"},"type"),"."),(0,r.kt)("p",null,"Tuples cannot be stored in tables (except memtables). They can be used for temporary column grouping. In queries, IN expressions and lambda functions with specific parameters can be used to group temporary columns. For more information, see ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/data-types/tuple"},"IN operator")," and ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/data-types/tuple"},"Higher-order functions"),"."),(0,r.kt)("p",null,"A tuple can be the result of a query. In this case, values in parentheses are comma-separated for text formats other than JSON. In JSON format, tuples are output as arrays (in square brackets)."),(0,r.kt)("h2",{id:"create-tuple"},"Create tuple"),(0,r.kt)("p",null,"Functions can be used to create tuples:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"tuple(T1, T2, ...)\n\n")),(0,r.kt)("p",null,"Example of creating a tuple:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},":) SELECT tuple(1,'a') AS x, toTypeName(x)\n\nSELECT\n    (1, 'a') AS x,\n    toTypeName(x)\n\n\u250c\u2500x\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500toTypeName(tuple(1, 'a'))\u2500\u2510\n\u2502 (1,'a') \u2502 Tuple(UInt8, String)      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n1 rows in set. Elapsed: 0.021 sec.\n\n")),(0,r.kt)("h2",{id:"data-types-in-tuples"},"Data types in tuples"),(0,r.kt)("p",null,"When dynamically creating tuples, ByConity will automatically assign the smallest expressible type to each parameter of the tuple. If the parameter is ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/data-types/tuple#null-literal"},"NULL"),", then the corresponding element of this tuple is ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/data-types/nullable"},"nullable"),"."),(0,r.kt)("p",null,"Example of automatic data type detection:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT tuple(1, NULL) AS x, toTypeName(x)\n\nSELECT\n    (1, NULL) AS x,\n    toTypeName(x)\n\n\u250c\u2500x\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500toTypeName(tuple(1, NULL))\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 (1,NULL) \u2502 Tuple(UInt8, Nullable(Nothing)) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n1 rows in set. Elapsed: 0.002 sec.\n\n")),(0,r.kt)("h1",{id:"low-cardinality-type"},"Low cardinality type"),(0,r.kt)("p",null,"Convert other data types to dictionary-encoded types."),(0,r.kt)("h2",{id:"grammar"},"Grammar"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"LowCardinality(data_type)\n\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"data_type")," \u2014 String, FixedString, Date, DateTime, including numeric types, but excluding Decimal. For some data types, ",(0,r.kt)("strong",{parentName:"li"},"LowCardinality")," is not efficient, please refer to ",(0,r.kt)("a",{parentName:"li",href:"https://clickhouse.com/docs/en/operations/settings/settings#allow_suspicious_low_cardinality_types"},"allow_suspicious_low_cardinality_types")," setting description.")),(0,r.kt)("h2",{id:"describe"},"describe"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"LowCardinality")," is a concept that changes the way data is stored and processed. ByConity will perform ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Dictionary_coder"},"dictionary coding")," on the column where ",(0,r.kt)("strong",{parentName:"p"},"LowCardinality")," is located. For many applications, processing dictionary-encoded data can significantly increase ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/statements/select/"},"SELECT")," query speed."),(0,r.kt)("p",null,"The efficiency of using the ",(0,r.kt)("strong",{parentName:"p"},"LowCarditality")," data type depends on the diversity of the data. If a dictionary contains less than 10000 distinct values, then ByConity allows for more efficient data storage and processing. On the contrary, if the dictionary is more than 10000, the efficiency will be worse."),(0,r.kt)("p",null,"When using character types, consider using ",(0,r.kt)("strong",{parentName:"p"},"LowCardinality")," instead of Enum. ",(0,r.kt)("strong",{parentName:"p"},"LowCardinality")," is generally more flexible and efficient."),(0,r.kt)("h2",{id:"example-2"},"Example"),(0,r.kt)("p",null,"Create a column of type ",(0,r.kt)("strong",{parentName:"p"},"LowCardinality"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE TABLE lc_t\n(\n    `id` UInt16,\n    `strings` LowCardinality(String)\n)\nENGINE = Memory\nORDER BY id\n\n")),(0,r.kt)("h1",{id:"area"},"area"),(0,r.kt)("h2",{id:"define"},"define"),(0,r.kt)("p",null,"A Domain type is an implementation-specific type that is always binary compatible with an existing base type while adding some extra features that can be used while maintaining the disk data unchanged. Currently ByConity does not support custom domain types."),(0,r.kt)("p",null,"If you can use an underlying type that is binary-compatible with a Domain type in one place, then you can also use a Domain type in the same place, for example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"use the Domain type as the type of the column in the table"),(0,r.kt)("li",{parentName:"ul"},"Read/write data to columns of Domain type"),(0,r.kt)("li",{parentName:"ul"},"If an underlying type that is binary-compatible with the Domain can be indexed, then the Domain type can also be indexed"),(0,r.kt)("li",{parentName:"ul"},"Pass the Domain type as a parameter to the function to use"),(0,r.kt)("li",{parentName:"ul"},"other")),(0,r.kt)("h3",{id:"additional-features-for-domains"},"Additional Features for Domains"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When executing SHOW CREATE TABLE or DESCRIBE TABLE, the corresponding columns are always displayed as Domain type names"),(0,r.kt)("li",{parentName:"ul"},"Input data in INSERT INTO domain_table(domain_column) VALUES(\u2026) is always entered in a more human-friendly format"),(0,r.kt)("li",{parentName:"ul"},"In SELECT domain_column FROM domain_table data is always output in a more human-friendly format"),(0,r.kt)("li",{parentName:"ul"},"In INSERT INTO domain_table FORMAT CSV ..., load external source data in a more user-friendly format")),(0,r.kt)("h3",{id:"domains-type-restrictions"},"Domains Type Restrictions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Cannot convert an index of underlying type to an index of Domain type via ",(0,r.kt)("strong",{parentName:"li"},"ALTER TABLE"),"."),(0,r.kt)("li",{parentName:"ul"},"A value of type string cannot be implicitly converted to a value of type Domain when inserting data from another column or table."),(0,r.kt)("li",{parentName:"ul"},"Cannot add constraints on values stored as Domain type.")),(0,r.kt)("h2",{id:"ipv4"},"ipv4"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"IPv4")," is a Domain type that is binary compatible with the ",(0,r.kt)("strong",{parentName:"p"},"UInt32")," type and is used to store the value of an IPv4 address. It provides more compact binary storage while supporting a more readable input and output format."),(0,r.kt)("h3",{id:"basic-usage"},"Basic usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE TABLE hits (url String, from IPv4) ENGINE = Memory\n\nDESCRIBE TABLE hits;\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500name\u2500\u252c\u2500type\u2500\u2500\u2500\u252c\u2500default_type\u2500\u252c\u2500default_expression\u2500\u252c\u2500comment\u2500\u252c\u2500codec_expression\u2500\u2510\n\u2502 url  \u2502 String \u2502              \u2502                    \u2502         \u2502                  \u2502\n\u2502 from \u2502 IPv4   \u2502              \u2502                    \u2502         \u2502                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("p",null,"Also you can use ",(0,r.kt)("strong",{parentName:"p"},"IPv4")," type column as primary key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE TABLE hits (url String, from IPv4) ENGINE = Memory;\n\n")),(0,r.kt)("p",null,"When writing and querying, the ",(0,r.kt)("strong",{parentName:"p"},"IPv4")," type can recognize a more readable input and output format:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"INSERT INTO hits (url, from) VALUES ('https://wikipedia.org', '116.253.40.133')('https://byconity.com', '183.247.232.58')('https://byconity.com/docs/en/', '116.106.34.242');\n\nSELECT * FROM hits;\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500url\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500from\u2500\u2510\n\u2502 https://byconity.com/docs/en/ \u2502 116.106.34.242 \u2502\n\u2502 https://wikipedia.org              \u2502 116.253.40.133 \u2502\n\u2502 https://byconity.com          \u2502 183.247.232.58 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("p",null,"At the same time it provides a more compact binary storage format:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT toTypeName(from), hex(from) FROM hits LIMIT 1;\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500toTypeName(from)\u2500\u252c\u2500hex(from)\u2500\u2510\n\u2502 IPv4             \u2502 B7F7E83A  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("p",null,"Not implicitly convertible to types other than ",(0,r.kt)("strong",{parentName:"p"},"UInt32"),". If you want to convert a value of type ",(0,r.kt)("strong",{parentName:"p"},"IPv4")," to a string, you can use ",(0,r.kt)("strong",{parentName:"p"},"IPv4NumToString()")," to do the conversion as shown:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT toTypeName(s), IPv4NumToString(from) as s FROM hits LIMIT 1;\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500toTypeName(IPv4NumToString(from))\u2500\u252c\u2500s\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 String                            \u2502 183.247.232.58 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("p",null,"Or you can use ",(0,r.kt)("strong",{parentName:"p"},"CAST")," to convert it to ",(0,r.kt)("strong",{parentName:"p"},"UInt32")," type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT toTypeName(i), CAST(from as UInt32) as i FROM hits LIMIT 1;\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500toTypeName(CAST(from, 'UInt32'))\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500i\u2500\u2510\n\u2502 UInt32                           \u2502 3086477370 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("h2",{id:"ipv6"},"ipv6"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"IPv6")," is a Domain type that maintains binary compatibility with the ",(0,r.kt)("strong",{parentName:"p"},"FixedString(16)")," type, which is used to store the value of an IPv6 address. It provides more compact binary storage while supporting a more readable input and output format."),(0,r.kt)("h3",{id:"basic-use"},"Basic Use"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE TABLE hits (url String, from IPv6) ENGINE = Memory;\n\nDESCRIBE TABLE hits;\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500name\u2500\u252c\u2500type\u2500\u2500\u2500\u252c\u2500default_type\u2500\u252c\u2500default_expression\u2500\u252c\u2500comment\u2500\u252c\u2500codec_expression\u2500\u2510\n\u2502 url  \u2502 String \u2502              \u2502                    \u2502         \u2502                  \u2502\n\u2502 from \u2502 IPv6   \u2502              \u2502                    \u2502         \u2502                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("p",null,"Also you can use ",(0,r.kt)("strong",{parentName:"p"},"IPv6")," type column as primary key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE TABLE hits (url String, from IPv6) ENGINE = Memory;\n\n")),(0,r.kt)("p",null,"When writing and querying, the ",(0,r.kt)("strong",{parentName:"p"},"IPv6")," type can recognize a more readable input and output format:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"INSERT INTO hits (url, from) VALUES ('https://wikipedia.org', '2a02:aa08:e000:3100::2')('https://byconity.com', '2001:44c8:129:2632:33:0:252:2')('https://byconity.com/docs/en/', '2a02:e980:1e::1');\n\nSELECT * FROM hits;\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500url\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500from\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 https://byconity.com          \u2502 2001:44c8:129:2632:33:0:252:2 \u2502\n\u2502 https://byconity.com/docs/en/ \u2502 2a02:e980:1e::1               \u2502\n\u2502 https://wikipedia.org              \u2502 2a02:aa08:e000:3100::2        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("p",null,"At the same time it provides a more compact binary storage format:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT toTypeName(from), hex(from) FROM hits LIMIT 1;\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500toTypeName(from)\u2500\u252c\u2500hex(from)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 IPv6             \u2502 200144C8012926320033000002520002 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("p",null,"Not implicitly convertible to types other than ",(0,r.kt)("strong",{parentName:"p"},"FixedString(16)"),". If you want to convert a value of type ",(0,r.kt)("strong",{parentName:"p"},"IPv6")," to a string, you can use ",(0,r.kt)("strong",{parentName:"p"},"IPv6NumToString()")," to do the conversion as shown:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT toTypeName(s), IPv6NumToString(from) as s FROM hits LIMIT 1;\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500toTypeName(IPv6NumToString(from))\u2500\u252c\u2500s\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 String                            \u2502 2001:44c8:129:2632:33:0:252:2 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("p",null,"Or use ",(0,r.kt)("strong",{parentName:"p"},"CAST")," to convert it to ",(0,r.kt)("strong",{parentName:"p"},"FixedString(16)"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT toTypeName(i), CAST(from as FixedString(16)) as i FROM hits LIMIT 1;\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500toTypeName(CAST(from, 'FixedString(16)'))\u2500\u252c\u2500i\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 FixedString(16)                           \u2502  \ufffd\ufffd\ufffd \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("h1",{id:"mapkey-value"},"Map(key, value)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Map(key, value)")," \u53ef\u4ee5\u5b58\u50a8 ",(0,r.kt)("strong",{parentName:"p"},"key:value")," \u952e\u503c\u5bf9\u7c7b\u578b\u7684\u6570\u636e\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"parameter")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"key")," \u2014 the key of the key-value pair, the type can be: ",(0,r.kt)("a",{parentName:"li",href:"https://clickhouse.com/docs/en/sql-reference/data-types/string"},"String"),", ",(0,r.kt)("a",{parentName:"li",href:"https://clickhouse.com/docs/en/sql-reference/data-types/int-uint"},"Integer"),", ",(0,r.kt)("a",{parentName:"li",href:"https://clickhouse.com/docs/en/sql-reference/data-types/lowcardinality"},"LowCardinality"),", Or ",(0,r.kt)("a",{parentName:"li",href:"https://clickhouse.com/docs/en/sql-reference/data-types/fixedstring"},"FixedString"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"value")," \u2014 the value of the key-value pair, the type can be: ",(0,r.kt)("a",{parentName:"li",href:"https://clickhouse.com/docs/en/sql-reference/data-types/string"},"String"),", ",(0,r.kt)("a",{parentName:"li",href:"https://clickhouse.com/docs/en/sql-reference/data-types/int-uint"},"Integer"),", ",(0,r.kt)("a",{parentName:"li",href:"https://clickhouse.com/docs/en/sql-reference/data-types/array"},"Array"),", ",(0,r.kt)("a",{parentName:"li",href:"https://clickhouse.com/docs/en/sql-reference/data-types/lowcardinality"},"LowCardinality"),", or ","[FixedString]","(",(0,r.kt)("a",{parentName:"li",href:"https://clickhouse.com/docs/en/sql-reference/data-"},"https://clickhouse.com/docs/en/sql-reference/data-")," types/fixedstring).")),(0,r.kt)("p",null,"There is a lot of content, please refer to ",(0,r.kt)("a",{parentName:"p",href:"https://bytedance.feishu.cn/wiki/wikcnc08bHgaa8IuPODIOqeBQqc"},"Map function combing (WIP)")," CE version part."),(0,r.kt)("h1",{id:"arrayt"},"Array(T)"),(0,r.kt)("p",null,"An array of elements of type ",(0,r.kt)("strong",{parentName:"p"},"T"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"T")," can be any type, including array types. However, multidimensional arrays are not recommended, and byconity has limited support for multidimensional arrays. For example, you cannot store multidimensional arrays in a ",(0,r.kt)("strong",{parentName:"p"},"MergeTree")," table."),(0,r.kt)("h2",{id:"create-array"},"create array"),(0,r.kt)("p",null,"You can use the array function to create arrays:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"array(T)\n\n")),(0,r.kt)("p",null,"You can also use square brackets:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[]\n\n")),(0,r.kt)("p",null,"Example of creating an array:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT array(1, 2) AS x, toTypeName(x)\n\n\u250c\u2500x\u2500\u2500\u2500\u2500\u2500\u252c\u2500toTypeName(array(1, 2))\u2500\u2510\n\u2502 [1,2] \u2502 Array(UInt8)            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT [1, 2] AS x, toTypeName(x)\n\n\u250c\u2500x\u2500\u2500\u2500\u2500\u2500\u252c\u2500toTypeName([1, 2])\u2500\u2510\n\u2502 [1,2] \u2502 Array(UInt8)       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("h2",{id:"use-data-types"},"Use data types"),(0,r.kt)("p",null,"ByConity will automatically detect the array elements, and calculate the smallest data type to store these elements according to the elements. If there is a ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/data-types/array#null-literal"},"NULL")," or a ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/data-types/nullable#data_type-nullable"},"null-literal")," type element, then the element type of the array will become ","[nullable]","(",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql"},"https://clickhouse.com/docs/en/sql")," -reference/data-types/nullable)."),(0,r.kt)("p",null,"If ByConity cannot determine the data type, it will raise an exception. This happens when trying to create an array containing both strings and numbers (",(0,r.kt)("strong",{parentName:"p"},"SELECT array(1, 'a')"),")."),(0,r.kt)("p",null,"Example of automatic data type detection:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT array(1, 2, NULL) AS x, toTypeName(x)\n\n\u250c\u2500x\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500toTypeName(array(1, 2, NULL))\u2500\u2510\n\u2502 [1,2,NULL] \u2502 Array(Nullable(UInt8))        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("p",null,"ByConity will throw an exception if you try to create an array of incompatible data types:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT array(1, 'a');\n\nSELECT [1, 'a']\n\nQuery id: b3b81f4d-a082-4b2f-a63a-784edf94998e\n\n\n0 rows in set. Elapsed: 1.231 sec.\n\nReceived exception from server (version 21.8.7):\nCode: 386. DB::Exception: Received from 0.0.0.0:30000. DB::Exception: There is no supertype for types UInt8, String because some of them are String/FixedString and some of them are not: While processing [1, 'a'] SQLSTATE: HY000.\n\n")),(0,r.kt)("h1",{id:"nullabletypename"},"Nullable(typename)"),(0,r.kt)("p",null,"Allow special markup (",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/data-types/nullable"},"NULL"),") to indicate \xabmissing value\xbb, which can be stored together with the normal value of ",(0,r.kt)("strong",{parentName:"p"},"TypeName")," . For example, a column of type ",(0,r.kt)("strong",{parentName:"p"},"Nullable(Int8)")," can store a value of type ",(0,r.kt)("strong",{parentName:"p"},"Int8"),", while a row with no value will store ",(0,r.kt)("strong",{parentName:"p"},"NULL"),"."),(0,r.kt)("p",null,"For ",(0,r.kt)("strong",{parentName:"p"},"TypeName"),", composite data type arrays and tuples cannot be used. Compound data types can contain ",(0,r.kt)("strong",{parentName:"p"},"Nullable")," type values, for example ",(0,r.kt)("strong",{parentName:"p"},"Array(Nullable(Int8))"),"."),(0,r.kt)("p",null,"Fields of type ",(0,r.kt)("strong",{parentName:"p"},"Nullable")," cannot be included in table indexes."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NULL")," is the default value for any ",(0,r.kt)("strong",{parentName:"p"},"Nullable")," type unless specified otherwise in the ByConity server configuration."),(0,r.kt)("h2",{id:"storage-features"},"Storage Features"),(0,r.kt)("p",null,"To store ",(0,r.kt)("strong",{parentName:"p"},"Nullable")," type values in table columns, ByConity uses separate files with ",(0,r.kt)("strong",{parentName:"p"},"NULL")," masks in addition to normal files with values. Entries in the mask file allow ByConity to distinguish between ",(0,r.kt)("strong",{parentName:"p"},"NULL")," for each table row and the default value for the corresponding data type. A ",(0,r.kt)("strong",{parentName:"p"},"Nullable")," column consumes additional storage compared to a similar normal file due to the new file being appended."),(0,r.kt)("p",null,'!!! Points to Note "Points to Note" Using ',(0,r.kt)("strong",{parentName:"p"},"Nullable")," almost always has a negative impact on performance, keep this in mind when designing your database"),(0,r.kt)("p",null,"Entries in the mask file allow ByConity to distinguish between \xabNULL\xbb and default values for the corresponding data types of each table row. Due to the extra file, \xabNullable\xbb columns consume more storage space than normal columns"),(0,r.kt)("h1",{id:"aggregatefunctionname-types_of_arguments"},"AggregateFunction(name, types_of_arguments\u2026)"),(0,r.kt)("p",null,"The intermediate state of the aggregation function can be obtained by adding the ",(0,r.kt)("strong",{parentName:"p"},"-State")," suffix to the name of the aggregation function. At the same time, when you need to access the final state data of this type, you need to use the same aggregation function name plus ",(0,r.kt)("strong",{parentName:"p"},"-Merge")," suffix to get the final state data."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"AggregateFunction")," \u2014 parameterized data type."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"parameter")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"aggregate function name")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"If the function has multiple parameter lists, specify values from the other parameter lists here.\n\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Types of aggregate function arguments")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE TABLE t\n(\n    column1 AggregateFunction(uniq, UInt64),\n    column2 AggregateFunction(anyIf, String, UInt8),\n    column3 AggregateFunction(quantiles(0.5, 0.9), UInt64)\n) ENGINE = ...\n\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/data-types/aggregatefunction#agg_function-uniq"},"uniq")," in the above, anyIf (",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/data-types/aggregatefunction#agg_function-any"},"any")," + ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/data-types/aggregatefunction#agg-functions-combinator-if"},"if"),") and ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/data-types/aggregatefunction"},"quantile")," are aggregate functions supported in ByConity."),(0,r.kt)("h2",{id:"users-guidance"},"user's guidance"),(0,r.kt)("h3",{id:"data-writing"},"Data writing"),(0,r.kt)("p",null,"When you need to write data, you need to include the data in the ",(0,r.kt)("strong",{parentName:"p"},"INSERT SELECT")," statement, and for ",(0,r.kt)("strong",{parentName:"p"},"AggregateFunction")," type data, you need to use the corresponding function with ",(0,r.kt)("strong",{parentName:"p"},"-State")," as the suffix deal with."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function Usage Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"uniqState(UserID)\nquantilesState(0.5, 0.9)(SendTiming)\n\n")),(0,r.kt)("p",null,"Unlike the ",(0,r.kt)("strong",{parentName:"p"},"uniq")," and ",(0,r.kt)("strong",{parentName:"p"},"quantiles")," functions that return the final value of the aggregated result, the functions suffixed with ",(0,r.kt)("strong",{parentName:"p"},"-State")," always return the intermediate state of the data of type ",(0,r.kt)("strong",{parentName:"p"},"AggregateFunction"),"."),(0,r.kt)("p",null,"For ",(0,r.kt)("strong",{parentName:"p"},"SELECT"),", the ",(0,r.kt)("strong",{parentName:"p"},"AggregateFunction")," type is always present in a specific binary form in all output formats. For example, you can use a ",(0,r.kt)("strong",{parentName:"p"},"SELECT")," statement to dump a function's state data into ",(0,r.kt)("strong",{parentName:"p"},"TabSeparated")," format while using an ",(0,r.kt)("strong",{parentName:"p"},"INSERT")," statement to dump the data back."),(0,r.kt)("h3",{id:"data-query"},"data query"),(0,r.kt)("p",null,"When querying data from ",(0,r.kt)("strong",{parentName:"p"},"AggregatingMergeTree")," tables, for fields of type ",(0,r.kt)("strong",{parentName:"p"},"AggregateFunction"),", you need to use the same aggregation function suffixed with ",(0,r.kt)("strong",{parentName:"p"},"-Merge")," to aggregate the data. For fields that are not of type ",(0,r.kt)("strong",{parentName:"p"},"AggregateFunction"),", include them in the ",(0,r.kt)("strong",{parentName:"p"},"GROUP BY")," clause."),(0,r.kt)("p",null,"Aggregation functions suffixed with ",(0,r.kt)("strong",{parentName:"p"},"-Merge")," can combine multiple intermediate states of ",(0,r.kt)("strong",{parentName:"p"},"AggregateFunction")," type into the final aggregation result."),(0,r.kt)("p",null,"For example, the following two queries always return the same result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT uniq(UserID) FROM table\n\nSELECT uniqMerge(state) FROM (SELECT uniqState(UserID) AS state FROM table GROUP BY RegionID)\n\n")),(0,r.kt)("h2",{id:"example-of-use"},"Example of use"),(0,r.kt)("p",null,"See the description of CnchAggregatingMergeTree"),(0,r.kt)("h1",{id:"simpleaggregatefunction"},"SimpleAggregateFunction"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"SimpleAggregateFunction(name, types_of_arguments\u2026)")," data type stores the current value of the aggregate function, and does not store its full state like ",(0,r.kt)("strong",{parentName:"p"},"AggregateFunction"),". This optimization can be applied to functions with the following properties: The result of applying the function ",(0,r.kt)("strong",{parentName:"p"},"f")," to the row set ",(0,r.kt)("strong",{parentName:"p"},"S1 UNION ALL S2")," can be obtained by applying ",(0,r.kt)("strong",{parentName:"p"},"f")," to parts of the row set separately, and then Then apply ",(0,r.kt)("strong",{parentName:"p"},"f")," to the result to get: ",(0,r.kt)("strong",{parentName:"p"},"f(S1 UNION ALL S2) = f(f(S1) UNION ALL f(S2))"),". This property guarantees that the partial aggregation result is sufficient to compute the merged result, so we don't have to store and process any additional data."),(0,r.kt)("p",null,"The following aggregate functions are supported:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"any")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"anyLast")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"min")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"max")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"sum")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"sumWithOverflow")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"groupBitAnd")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"groupBitOr")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"groupBitXor")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"groupArrayArray")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"groupUniqArrayArray")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"sumMap")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"minMap")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"maxMap")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"argMin")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"argMax"))),(0,r.kt)("p",null,'!!! note "Note" ',(0,r.kt)("strong",{parentName:"p"},"SimpleAggregateFunction(func, Type)")," has the same value appearance and storage method as ",(0,r.kt)("strong",{parentName:"p"},"Type"),", so you don't need to apply with ",(0,r.kt)("strong",{parentName:"p"},"-Merge"),"/","*",(0,r.kt)("em",{parentName:"p"},"-State")," ","*"," suffix function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"`SimpleAggregateFunction` outperforms `AggregateFunction` with the same aggregate function.\n\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"parameter")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The name of the aggregate function."),(0,r.kt)("li",{parentName:"ul"},"The type of the aggregate function parameter.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE TABLE simple (id UInt64, val SimpleAggregateFunction(sum, Double)) ENGINE=CnchAggregatingMergeTree ORDER BY id;\n\n\n")),(0,r.kt)("h1",{id:"special-data-types"},"Special data types"),(0,r.kt)("p",null,"Values of special data types can neither be stored in tables nor output in results, but can be used in intermediate results of queries."),(0,r.kt)("h2",{id:"interval-type"},"Interval type"),(0,r.kt)("p",null,"A family of data types representing time and date intervals. ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/operators/#operator-interval"},"INTERVAL")," The result type of the operation."),(0,r.kt)("p",null,'!!! warning "Warning" ',(0,r.kt)("strong",{parentName:"p"},"Interval")," data type values cannot be stored in the table."),(0,r.kt)("p",null,"structure:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The time interval as an unsigned integer value."),(0,r.kt)("li",{parentName:"ul"},"The type of time interval.")),(0,r.kt)("p",null,"Supported interval types:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"SECOND")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"MINUTE")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"HOUR")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"DAY")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"WEEK")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"MONTH")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"QUARTER")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"YEAR"))),(0,r.kt)("p",null,"For each interval type, there is a separate data type. For example, the ",(0,r.kt)("strong",{parentName:"p"},"DAY")," interval corresponds to the ",(0,r.kt)("strong",{parentName:"p"},"IntervalDay")," data type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT toTypeName(INTERVAL 4 DAY)\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500toTypeName(toIntervalDay(4))\u2500\u2510\n\u2502 IntervalDay                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("h3",{id:"instructions-for-use"},"Instructions for use"),(0,r.kt)("p",null,"You can use ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/data-types/date"},"date")," and ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/data-types/datetime"},"datetime")," values of type ",(0,r.kt)("strong",{parentName:"p"},"Interval")," are used in arithmetic operations on values of type ",(0,r.kt)("strong",{parentName:"p"},"Interval"),". For example, you can add 4 days to the current time:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT now() as current_date_time, current_date_time + INTERVAL 4 DAY\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500\u2500\u2500current_date_time\u2500\u252c\u2500plus(now(), toIntervalDay(4))\u2500\u2510\n\u2502 2019-10-23 10:58:45 \u2502           2019-10-27 10:58:45 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("p",null,"Intervals of different types cannot be combined. You cannot use a time interval such as ",(0,r.kt)("strong",{parentName:"p"},"4 DAY 1 HOUR"),". Specify the interval in units less than or equal to the smallest unit of the time interval, for example, the time interval ",(0,r.kt)("strong",{parentName:"p"},"1 day and an hour")," can be expressed as ",(0,r.kt)("strong",{parentName:"p"},"25 HOUR ")," or ",(0,r.kt)("strong",{parentName:"p"},"90000 SECOND"),"."),(0,r.kt)("p",null,"You cannot perform arithmetic operations on values of type ",(0,r.kt)("strong",{parentName:"p"},"Interval"),", but you can add different types of time intervals to values of ",(0,r.kt)("strong",{parentName:"p"},"Date")," or ",(0,r.kt)("strong",{parentName:"p"},"DateTime")," data types, for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT now() AS current_date_time, current_date_time + INTERVAL 4 DAY + INTERVAL 3 HOUR\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500\u2500\u2500current_date_time\u2500\u252c\u2500plus(plus(now(), toIntervalDay(4)), toIntervalHour(3))\u2500\u2510\n\u2502 2019-10-23 11:16:28 \u2502                                    2019-10-27 14:16:28 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("p",null,"The following query will result in an exception:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"select now() AS current_date_time, current_date_time + (INTERVAL 4 DAY + INTERVAL 3 HOUR)\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Received exception from server (version 19.14.1):\nCode: 43. DB::Exception: Received from localhost:9000. DB::Exception: Wrong argument types for function plus: if one argument is Interval, then another must be Date or DateTime..\n\n")),(0,r.kt)("h2",{id:"expression"},"expression"),(0,r.kt)("p",null,"Used to represent lambdas in higher-order functions."),(0,r.kt)("h2",{id:"gather"},"gather"),(0,r.kt)("p",null,"Can be used in the right half of an IN expression."),(0,r.kt)("h2",{id:"nothing"},"Nothing"),(0,r.kt)("p",null,"The sole purpose of this data type is to represent situations where a value is not expected. So you cannot create a value of type ",(0,r.kt)("strong",{parentName:"p"},"Nothing"),"."),(0,r.kt)("p",null,"For example, the literal ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/syntax#null-literal"},"NULL")," has type ",(0,r.kt)("strong",{parentName:"p"},"Nullable(Nothing)"),". See Nullable for details."),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"Nothing")," type can also be used to represent empty arrays:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},":) SELECT toTypeName(array())\n\nSELECT toTypeName([])\n\n\u250c\u2500toTypeName(array())\u2500\u2510\n\u2502 Array(Nothing)      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n1 rows in set. Elapsed: 0.062 sec.\n\n")))}c.isMDXComponent=!0}}]);