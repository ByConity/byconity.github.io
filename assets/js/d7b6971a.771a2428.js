"use strict";(self.webpackChunkbyconity=self.webpackChunkbyconity||[]).push([[4443],{49613:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>g});var n=a(59496);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=c(a),h=r,g=u["".concat(l,".").concat(h)]||u[h]||d[h]||i;return a?n.createElement(g,o(o({ref:t},m),{},{components:a})):n.createElement(g,o({ref:t},m))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},34184:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=a(64778),r=(a(59496),a(49613));const i={title:"Manage Background Tasks",sidebar_position:9,tags:["Docs"]},o="Managing Background Tasks",s={unversionedId:"admin-guides/background-task-management",id:"version-0.3.0/admin-guides/background-task-management",title:"Manage Background Tasks",description:"Configuring Background Tasks",source:"@site/versioned_docs/version-0.3.0/admin-guides/background-task-management.mdx",sourceDirName:"admin-guides",slug:"/admin-guides/background-task-management",permalink:"/docs/0.3.0/admin-guides/background-task-management",draft:!1,editUrl:"https://github.com/ByConity/byconity.github.io/tree/main/versioned_docs/version-0.3.0/admin-guides/background-task-management.mdx",tags:[{label:"Docs",permalink:"/docs/0.3.0/tags/docs"}],version:"0.3.0",sidebarPosition:9,frontMatter:{title:"Manage Background Tasks",sidebar_position:9,tags:["Docs"]},sidebar:"tutorialSidebar",previous:{title:"Privilege Management",permalink:"/docs/0.3.0/admin-guides/privilege-management"},next:{title:"Transactions Management",permalink:"/docs/0.3.0/admin-guides/transaction-management"}},l={},c=[{value:"Configuring Background Tasks",id:"configuring-background-tasks",level:2},{value:"Common Commands",id:"common-commands",level:3},{value:"Start/Stop Table Merge",id:"startstop-table-merge",level:4},{value:"Manually Trigger Merge",id:"manually-trigger-merge",level:4},{value:"Modify Merge Parameters",id:"modify-merge-parameters",level:4},{value:"Observation",id:"observation",level:4},{value:"Configuration",id:"configuration",level:4},{value:"Managing Background Tasks",id:"managing-background-tasks-1",level:2},{value:"Common background tasks",id:"common-background-tasks",level:3},{value:"MergeMutate background task",id:"mergemutate-background-task",level:3},{value:"Merge task Part selection",id:"merge-task-part-selection",level:3},{value:"Task scheduling management",id:"task-scheduling-management",level:4},{value:"Heartbeat Mechanism",id:"heartbeat-mechanism",level:4},{value:"GC background tasks",id:"gc-background-tasks",level:3},{value:"Part visibility judgment",id:"part-visibility-judgment",level:4},{value:"GC Task",id:"gc-task",level:4},{value:"CONSUMER tasks",id:"consumer-tasks",level:3},{value:"KafkaConsumeManager",id:"kafkaconsumemanager",level:4},{value:"KafkaConsumer",id:"kafkaconsumer",level:4},{value:"Exactly-Once",id:"exactly-once",level:4},{value:"Automatic fault tolerance implementation",id:"automatic-fault-tolerance-implementation",level:4},{value:"Modify consumption parameters",id:"modify-consumption-parameters",level:4},{value:"Manually start and stop consumption",id:"manually-start-and-stop-consumption",level:4},{value:"Control background tasks",id:"control-background-tasks",level:3},{value:"common error",id:"common-error",level:3}],m={toc:c},u="wrapper";function d(e){let{components:t,...i}=e;return(0,r.kt)(u,(0,n.Z)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"managing-background-tasks"},"Managing Background Tasks"),(0,r.kt)("h2",{id:"configuring-background-tasks"},"Configuring Background Tasks"),(0,r.kt)("h3",{id:"common-commands"},"Common Commands"),(0,r.kt)("h4",{id:"startstop-table-merge"},"Start/Stop Table Merge"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"-- Start merge\nsystem start merges xxx.yyy;\n\n-- Stop merge\nsystem stop merges xxx.yyy;\n")),(0,r.kt)("h4",{id:"manually-trigger-merge"},"Manually Trigger Merge"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"-- Trigger a merge schedule (same as the automatic process above)\noptimize table xxx.yyy;\n\n-- Trigger a merge schedule under a specified partition\noptimize table xxx.yyy partition 'zzz';\n")),(0,r.kt)("p",null,"In addition, there is a dry run mode, which allows you to view which parts will be selected for the upcoming merge (or troubleshoot why certain parts are not being selected)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"-- Enable tracelog. When performing a try optimize,\n-- it will print relevant logs for the entire merge selection process,\n-- such as which partitions and parts were selected, which worker received the merge task, etc.\nset send_logs_level = 'trace';\n\ntry optimize table xxx.yyy;\ntry optimize table xxx.yyy partition 'zzz';\n")),(0,r.kt)("h4",{id:"modify-merge-parameters"},"Modify Merge Parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"alter table xxx.yyy modify setting cnch_merge_zzz = www;\n")),(0,r.kt)("h4",{id:"observation"},"Observation"),(0,r.kt)("p",null,"Be sure to select the host server for the table."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"system.bg_threads")," can be used to view the running status of the table's Merge/GC background threads."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"system.manipulations")," can be used to view currently running Merge tasks."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"system.server_part_log")," provides information on historical Merge tasks (you can also check this table for newly inserted parts).")),(0,r.kt)("h4",{id:"configuration"},"Configuration"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Configuration Item"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default Value and Meaning"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Remarks"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"////// Multiple Partitions //////")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"Originally, only one partition was selected at a time, which limited concurrency. Multiple partitions are now expected to improve concurrency."))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"enable_addition_bg_task"),(0,r.kt)("td",{parentName:"tr",align:"left"},"false, allows more merge tasks to run concurrently"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Used in conjunction with max_addition_bg_task_num.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"max_addition_bg_task_num"),(0,r.kt)("td",{parentName:"tr",align:"left"},"200, limits the maximum number of concurrent tasks"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"max_partition_for_multi_select"),(0,r.kt)("td",{parentName:"tr",align:"left"},"3, determines how many partitions to select for merging"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Merging first selects partitions, then ranges within those partitions. For multi-partition keys (e.g., appid, date), this value may need to be increased as there are many partitions.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"////// Improving Range Selection Speed //////")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"When dealing with large amounts of data, each selection can be time-consuming, expecting to accelerate through ",(0,r.kt)("strong",{parentName:"em"},"batch")," processing."))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"cnch_merge_enable_batch_select"),(0,r.kt)("td",{parentName:"tr",align:"left"},"false, whether to enable batch_select"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Batch_select selects a large batch of ranges in each round, and subsequent rounds directly submit these ranges, reducing the merge trigger period and allowing the total task count to reach the concurrency limit.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"cnch_merge_max_total_rows_to_merge"),(0,r.kt)("td",{parentName:"tr",align:"left"},"15000000, the maximum number of rows for a single merged part"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Useful when the business is aware of the number of level 0 part rows and wants to control the overall merged part count (which affects query time).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"////// Real-time Data Optimization //////")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"Real-time scenarios"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"cnch_merge_only_realtime_partition"),(0,r.kt)("td",{parentName:"tr",align:"left"},"false, whether to select only real-time partitions"),(0,r.kt)("td",{parentName:"tr",align:"left"},"When selecting partitions in each round, it chooses N partitions with high counts and N real-time partitions. Enabling this setting selects partitions based on their real-time status (min_block). Useful for real-time tables.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"max_bytes_to_merge_at_max_space_in_pool"),(0,r.kt)("td",{parentName:"tr",align:"left"},"150 ",(0,r.kt)("em",{parentName:"td"}," 1024 ")," 1024 * 1024, i.e., 150GB. Maximum bytes limit for a single merge task."),(0,r.kt)("td",{parentName:"tr",align:"left"},"The parameter name is not intuitive due to legacy code issues... In cnch, this parameter is used to set the max size of the merge selector. It functions similarly to cnch_merge_max_total_rows_to_merge, one limiting rows and the other limiting bytes.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"cnch_vw_write"),(0,r.kt)("td",{parentName:"tr",align:"left"},"vw_default, the vw used for merging"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Consult with SRE to determine the appropriate vw as the write vw for your business.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"cnch_merge_pick_worker_algo"),(0,r.kt)("td",{parentName:"tr",align:"left"},"'RM', the algorithm used to select workers, defaulting to RM selection."),(0,r.kt)("td",{parentName:"tr",align:"left"},"Set to '",(0,r.kt)("strong",{parentName:"td"},"RoundRobin"),"' when dealing with high concurrency.")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Usage Instructions"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"For tables of moderate size (millions of rows) with a high number of current parts and a desire to increase the merge frequency, enabling enable_addition_bg_task = 1 and adjusting max_partition_for_multi_select can be effective. In this case, max_addition_bg_task_num sets the upper limit for merge concurrency."),(0,r.kt)("li",{parentName:"ul"},"For very large tables (tens of millions, hundreds of millions), where obtaining parts from the catalog can be time-consuming, not only enable_addition_bg_task but also cnch_merge_enable_batch_select = 1 may be necessary to increase the number of parts selected for merging in each round."),(0,r.kt)("li",{parentName:"ul"},"Regarding cnch_merge_only_realtime_partition and max_partition_for_multi_select: Kafka real-time tables typically use cnch_merge_only_realtime_partition, which selects only the most recent min_block partitions. The number of partitions is controlled by max_partition_for_multi_select. Note: For offline tables generating a large number of new partitions daily, enabling cnch_merge_only_realtime_partition with a low max_partition_for_multi_select value may result in some partitions not being included in merges.")))),(0,r.kt)("h2",{id:"managing-background-tasks-1"},"Managing Background Tasks"),(0,r.kt)("p",null,"ByConity reuses the classic design of ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/mergetree/"},"Community ClickHouse MergeTree"),", which means that data is written at Part granularity Store and ensure the order of data inside each Part, and process multiple Parts in parallel when executing queries. The background Merge thread continuously merges multiple Parts into larger Parts, which not only reduces the number of Parts, but also achieves a wider range of data ordering, which is a key operation for continuously improving query performance."),(0,r.kt)("h3",{id:"common-background-tasks"},"Common background tasks"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"MergeMutate background task: "),"Because ByConity is a storage and computing separation architecture, Part no longer belongs to a fixed node, and each Part can be processed by any computing node, so each computing node does not run exclusively like the community ClickHouse Merge and Mutate threads. Instead, we create a Merge and Mutate background task for each table on the Server component, which manages and schedules all Merge and Mutate tasks for the corresponding table in a unified manner."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"GC","*","*"),"Background task:","*","*","Merge multiple Parts into a new Part, which means that the original Part will no longer be used, and deleting these eliminated Parts in time will help save storage. To this end, we run a dedicated GC (Garbage Collection) background task for each table, which is responsible for the discovery and deletion of expired parts of the table."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"CONSUMER background task: "),"Based on ByConity's new cloud-native architecture, a new design and implementation has been made on real-time import consumption (aka CnchKafka):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Based on each Kafka consumption table, a CONSUMER background task (ConsumeManager) is resident in the server segment;"),(0,r.kt)("li",{parentName:"ul"},"The CONSUMER background task is responsible for reading Kafka meta information, assigning partitions to each consumer task, and then distributing task tasks to worker nodes for execution;"),(0,r.kt)("li",{parentName:"ul"},"At the same time, the CONSUMER task needs to maintain a heartbeat with the task to ensure that each consumer task is in a normal working state.")),(0,r.kt)("p",null,"By design, Merge and GC are two separate processes. After a Merge task is completed, we will not delete the old part immediately, but correspondingly generate an elimination mark for each old part, waiting for subsequent GC tasks to be processed uniformly. Such a design can:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'Maintain the consistency of the Part life cycle, and there will be no inconsistent behavior of "using a deleted Part" during query execution.'),(0,r.kt)("li",{parentName:"ul"},"Avoid bulky metadata and storage access operations. Deleting the old part immediately when the merge is completed means a large number of fragmented IO operations, which makes the operation inefficient and easily affects the normal execution of other processes."),(0,r.kt)("li",{parentName:"ul"},"Simpler implementation. There is no need to think too much about the consistency between the Merge task state and the Part state.")),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(71787).Z,width:"852",height:"408"})),(0,r.kt)("p",null,"Figure X-1"),(0,r.kt)("h3",{id:"mergemutate-background-task"},"MergeMutate background task"),(0,r.kt)("p",null,"MergeMutate background tasks are mainly responsible for: Select the appropriate Part to generate the corresponding ",(0,r.kt)("strong",{parentName:"p"},"Merge Task (Merge Task)"),", select the appropriate part to generate ",(0,r.kt)("strong",{parentName:"p"},"Mutate Task (Mutate Task)"),", and send the generated Task to Appropriate Worker execution and final submission and update of Part status."),(0,r.kt)("p",null,"Merge and Mutate are actually two different tasks."),(0,r.kt)("p",null,"The Merge task is to select some smaller parts to synthesize a larger part, so as to reduce the number of files accessed during query, thereby reducing the time required for query."),(0,r.kt)("p",null,"The Mutate task is to perform changes on some columns in the part (Modify column, Drop column, etc.). The Mutate task is generated by the Alter query. For an Alter query, we can split it into two parts, one is to modify the schema operation of the table, and the other is to generate a Mutate Task to be executed by the background task if the data needs to be changed. Data modification operations."),(0,r.kt)("h3",{id:"merge-task-part-selection"},"Merge task Part selection"),(0,r.kt)("p",null,"From the very beginning of design, ByConity requires that a system be able to handle different scenarios and businesses of different scales at the same time: the coexistence of real-time tables and offline tables, the coexistence of large-scale tables and small tables, the coexistence of wide tables and narrow tables, etc., complex fields and simple fields coexist. Such a complex application scenario means that the Parts of each table have no uniform rules to follow in terms of size, timeliness, and orderliness. To this end, we design and implement an adaptive Part selection strategy. The general process is as follows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Maintain the latest data write time, total number of Parts and total size for each partition (Partition)."),(0,r.kt)("li",{parentName:"ul"},"First select a batch of partitions from all partitions, and users can specify their preferred strategy for each table: sort by write time; sort by the number of parts or training in rotation."),(0,r.kt)("li",{parentName:"ul"},"For each selected partition, scan all its Parts, calculate the benefits of merging each other according to the number of rows, size, and writing time of the Parts, and finally select multiple groups of Parts in the order of benefits."),(0,r.kt)("li",{parentName:"ul"},"Finally, for each selected partition, if no high-yielding Merge task is finally selected from the partition, the partition will not be selected for a subsequent period of time to achieve adaptive adjustment.")),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(232).Z,width:"852",height:"1022"})),(0,r.kt)("p",null,"Figure X-2"),(0,r.kt)("p",null,"As shown in the figure, in the Partition selection stage, we selected Partition 1 (the largest number of Parts) and Partition 2 (the latest data writing). Then calculate the combined income between Parts from these two Partitions, and finally select three groups of Parts: p11~p12, p13~p16, and p23~p24."),(0,r.kt)("h4",{id:"task-scheduling-management"},"Task scheduling management"),(0,r.kt)("p",null,"For each group of Parts selected above, we will estimate its task overhead, such as required disk size, occupied memory size, and other information. Then select the most suitable Worker for this task through ",(0,r.kt)("u",null,"Resource Manager")," (Note: link to RM), and send it out for execution."),(0,r.kt)("p",null,"When Worker executes a task, it obtains the required Part through the interface provided by the storage layer. The merging process of Part on Worker is similar to the principle of Community ClickHouse."),(0,r.kt)("p",null,"After the Merge task is executed, the Worker returns a successful execution flag to the Server. After that, the server can submit the newly generated Part and mark the merged source Part, waiting for subsequent GC background tasks to process."),(0,r.kt)("h4",{id:"heartbeat-mechanism"},"Heartbeat Mechanism"),(0,r.kt)("p",null,"Since the execution time of the MergeMutate task may be relatively long, we need to use the heartbeat mechanism to detect whether the task on the Worker has failed or whether the Worker has been down, and remove the failed task on the Server in time. At the same time, the Worker side will also judge whether the Server is down by the time of the last synchronization heartbeat when executing the task, so as to end the task in advance to avoid wasting resources."),(0,r.kt)("h3",{id:"gc-background-tasks"},"GC background tasks"),(0,r.kt)("h4",{id:"part-visibility-judgment"},"Part visibility judgment"),(0,r.kt)("p",null,"Different from the part visibility judgment in the community, ByConity has made some adjustments to the part visibility judgment in order to better implement the MVCC (Multi-Version Concurrency Control) feature."),(0,r.kt)("p",null,"First, briefly introduce the naming structure of writing part. Part naming is as follows:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(24517).Z,width:"852",height:"320"})),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Community version Part visibility judgment, taking the Merge task as an example")),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(6256).Z,width:"852",height:"762"})),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"ByConityPart visibility judgment (TODO)")),(0,r.kt)("h4",{id:"gc-task"},"GC Task"),(0,r.kt)("p",null,"After understanding the role and process of ",(0,r.kt)("u",null,"Merge")," and Part visibility rules, you can better understand the working mechanism of GC."),(0,r.kt)("p",null,"As shown in Figure X-1, the GC background task of each table runs independently, and it is mainly responsible for discovering and deleting the eliminated parts generated by the Merge task."),(0,r.kt)("p",null,"When the server marks an obsolete part, it does not change any state of the part, but generates a new corresponding marked part, and the marked part does not occupy the actual storage space. Doing so can guarantee the absolute immutability of all Parts throughout the lifetime. ","*","*"),(0,r.kt)("p",null,"Based on Figure X-2, after the Merge is completed, it will become the state shown in Figure X-3 below:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(1937).Z,width:"852",height:"480"})),(0,r.kt)("p",null,"When the GC background task is running, it is similar to the Merge background task,"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A batch of Partitions will be selected in order of the total number of Parts and total size."),(0,r.kt)("li",{parentName:"ul"},"Then scan all Parts in the Partition, and delete the Part covered by the mark (that is, the blue part)."),(0,r.kt)("li",{parentName:"ul"},"Then scan all Parts in the Partition again, and delete the marked Part (that is, the red part).")),(0,r.kt)("h3",{id:"consumer-tasks"},"CONSUMER tasks"),(0,r.kt)("p",null,"ByConity inherits the basic design of community Kafka consumption, and designs and implements a new consumption table engine CnchKafka based on the new cloud-native architecture. The basic consumption principle is consistent with the community, and the entire consumption link is realized through a <CnchKafka consumption table, Materialized View materialized view table, storage table> triplet, where:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"CnchKafka consumption table: responsible for subscribing to Kafka topics and consuming messages; parsing the obtained messages and writing them as Blocks;"),(0,r.kt)("li",{parentName:"ul"},"Materialized View materialized view table: build a data path from the consumption table to the storage table, write the block consumed by CnchKafka into the storage table, and provide a simple filtering function;"),(0,r.kt)("li",{parentName:"ul"},"Storage table: Support various MergeTree storage tables of Cnch.")),(0,r.kt)("p",null,"The basic data path is as follow:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(51075).Z,width:"852",height:"492"})),(0,r.kt)("p",null,"The components in the figure are ByConity components related to CnchKafka. For specific component descriptions, please refer to the architecture document."),(0,r.kt)("h4",{id:"kafkaconsumemanager"},"KafkaConsumeManager"),(0,r.kt)("p",null,"Each CnchKafka consumption table will start a Manager (that is, CONSUMER type background task) at the server layer to be responsible for scheduling and managing all consumer tasks. The Manager itself is a resident thread on the server side, and its service is guaranteed to be stable through the high availability of the server and DaemonManager."),(0,r.kt)("p",null,"The main implementation and functions of KafkaConsumeManager include:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Distribute the topic partition evenly to each consumer according to the configured number of consumers;"),(0,r.kt)("li",{parentName:"ul"},"Interact with the Catalog to obtain the offset consumed by the partition;"),(0,r.kt)("li",{parentName:"ul"},"Schedule the consumer to the configured Virtual Warehouse node for execution:"),(0,r.kt)("li",{parentName:"ul"},"Node selection supports multiple policy configurations to ensure load balancing;"),(0,r.kt)("li",{parentName:"ul"},"Regularly detect each consumer task to ensure the stability of task execution.")),(0,r.kt)("h4",{id:"kafkaconsumer"},"KafkaConsumer"),(0,r.kt)("p",null,"Each KafkaConsumer is implemented as a resident thread and executed on the Virtual Warehouse node. It is responsible for consuming data from the specified topic partition, converting it into parts and writing it to VFS, and submitting meta information back to the server side for writing to the Catalog. main feature:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Inherit the batch writing mode of the community (each consumption cycle defaults to 8 seconds);"),(0,r.kt)("li",{parentName:"ul"},"Each consumption process guarantees atomicity through Transaction:"),(0,r.kt)("li",{parentName:"ul"},"Create transactions by interacting with Server RPC;"),(0,r.kt)("li",{parentName:"ul"},"The transaction commit will submit the written part meta-information and the latest consumed offset at the same time.")),(0,r.kt)("p",null,"Refer to the figure below for the execution process of a single consumption:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(19223).Z,width:"852",height:"580"})),(0,r.kt)("h4",{id:"exactly-once"},"Exactly-Once"),(0,r.kt)("p",null,"Compared with the community implementation, the CnchKafka implementation has enhanced consumption semantics, that is, from the community's At-Least-Once semantics to Exactly-Once semantics. This is mainly due to the guarantee of the new architecture Transaction."),(0,r.kt)("p",null,"Since each round of consumption will go through transaction management, and the corresponding offset will be submitted at the same time as the data metadata information is submitted each time. Since the transaction guarantees the atomicity of the commit, the data metadata and offset are either submitted successfully at the same time, or both fail to be submitted."),(0,r.kt)("p",null,"This ensures that the data and offset are always consistent, and each restart of consumption will continue to consume from the last submitted offset position, thus realizing Exactly-Once."),(0,r.kt)("h4",{id:"automatic-fault-tolerance-implementation"},"Automatic fault tolerance implementation"),(0,r.kt)("p",null,"CnchKafka's overall fault-tolerant strategy adopts ",(0,r.kt)("strong",{parentName:"p"},"fast failure")," approach, namely:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"KafkaConsumeManager regularly detects consumer tasks, if the detection fails, a new consumer is immediately pulled;"),(0,r.kt)("li",{parentName:"ul"},"In each execution of KafkaConsumer, the two interactions with Server RPC (creating transaction and submitting transaction) will verify the validity of itself to the Manager. If the verification fails (for example, the Manager has pulled a new consumer, etc.), it will Take the initiative to kill yourself.")),(0,r.kt)("h4",{id:"modify-consumption-parameters"},"Modify consumption parameters"),(0,r.kt)("p",null,"Supports quick modification of Setting parameters through the ALTER command, which is mainly used to adjust the number of consumers and improve consumption capabilities."),(0,r.kt)("p",null,"Command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"ALTER TABLE <cnch_kafka_name> MODIFY SETTING <name1> = <value1>, <name2> = <value2>\n\n")),(0,r.kt)("p",null,"Execution of this command will automatically restart the consumption task."),(0,r.kt)("h4",{id:"manually-start-and-stop-consumption"},"Manually start and stop consumption"),(0,r.kt)("p",null,"In some scenarios, users may need to manually stop consumption, and then manually resume; we provide the corresponding SYSTEM command implementation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SYSTEM START/STOP/RESTART CONSUME <cnch_kafka_name>\n\n")),(0,r.kt)("p",null,"Note: The START/STOP command will persist the corresponding state to the Catalog, so after executing the STOP command, if you do not execute START, even if the service restarts, the consumption task will not resume."),(0,r.kt)("h3",{id:"control-background-tasks"},"Control background tasks"),(0,r.kt)("p",null,"The system command is provided to control the opening and closing of background tasks. Unlike the community, the control through the system command is a persistent operation, and background tasks that have been stopped will not be rescheduled after the server restarts."),(0,r.kt)("p",null,"Provide the system table system.bg_threads to view the status of background tasks, including thread status, scheduling times, scheduling exception information, etc."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SYSTEM STOP/START/RESTART CONSUME db.table;\nSYSTEM STOP/START MERGES/GC db.table;\nSELECT * FROM system.bg_threads WHERE database = 'db' AND table = 'table';\n")),(0,r.kt)("h3",{id:"common-error"},"common error"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Connection Refused from DaemonManager")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Code: 5038. DB::Exception: Received from 127.0.0.1:9000. DB::Exception: 112:[E111]Fail to connect Socket{id=1155 addr=127.0.0.1:10090} (0x0x7f2f9674f6c0): Connection refused [R1][E112]Not connected to 127.0.0.1:10090 yet, server_id=1155 [R2][E112]Not connected to 127.0.0.1:10090 yet, server_id=1155 [R3][E112]Not connected to 127.0.0.1:10090 yet, server_id=1155.\n\n")),(0,r.kt)("p",null,"The specific error information is as above, where 10090 is the rpc port of DaemonManager, which means that the connection of DaemonManager component failed, and the status of DaemonManager needs to be checked."))}d.isMDXComponent=!0},24517:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/boxcn35mmn27RkI7PnEdYgJML3g-825992d45aca226f63edf2118c630cad.png"},6256:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/boxcn9MQ9pAUXo2fFk9xURxVGrh-461ff747290e0260ce50370bf5a75133.png"},19223:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/boxcnSgFjCeQGVkbtqB3b1013gf-d42dcff9e6716fe35060170db3994a06.png"},232:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/boxcnnvwD2ZKklNKkrVatqtnjUb-878ff829c9123ed16041a10d2485beb4.png"},1937:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/boxcnuwPQMcD1U9cypYG0DdP1th-9e2b61a2cd466d2e01badc1699af6f4e.png"},71787:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/boxcnyNZuYWKFyUqFHQ8wAYsIOy-976376ed9c27fcd526c6d1052a8f4763.png"},51075:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/boxcnzUYNuizBq5CUpsp0ZZAzoz-8f3b6d8f7092df4cbff90bfd5115de2c.png"}}]);