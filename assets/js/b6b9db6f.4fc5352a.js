"use strict";(self.webpackChunkbyconity=self.webpackChunkbyconity||[]).push([[3314],{49613:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>g});var a=r(59496);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,o=function(e,t){if(null==e)return{};var r,a,o={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=a.createContext({}),u=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var r=e.components,o=e.mdxType,n=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(r),p=o,g=d["".concat(l,".").concat(p)]||d[p]||h[p]||n;return r?a.createElement(g,i(i({ref:t},c),{},{components:r})):a.createElement(g,i({ref:t},c))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=r.length,i=new Array(n);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var u=2;u<n;u++)i[u]=r[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},2567:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>n,metadata:()=>s,toc:()=>u});var a=r(64778),o=(r(59496),r(49613));const n={title:"Resource Manager",sidebar_position:1,tags:["Docs"]},i="Resource Manager",s={unversionedId:"admin-guides/resource-manager",id:"version-0.3.0/admin-guides/resource-manager",title:"Resource Manager",description:"The Resource Manager (RM) component is responsible for the unified management and scheduling of ByConity's computational resources. It is a core component for achieving resource elasticity and improving resource utilization.",source:"@site/versioned_docs/version-0.3.0/admin-guides/resource-manager.mdx",sourceDirName:"admin-guides",slug:"/admin-guides/resource-manager",permalink:"/docs/0.3.0/admin-guides/resource-manager",draft:!1,editUrl:"https://github.com/ByConity/byconity.github.io/tree/main/versioned_docs/version-0.3.0/admin-guides/resource-manager.mdx",tags:[{label:"Docs",permalink:"/docs/0.3.0/tags/docs"}],version:"0.3.0",sidebarPosition:1,frontMatter:{title:"Resource Manager",sidebar_position:1,tags:["Docs"]},sidebar:"tutorialSidebar",previous:{title:"URLs",permalink:"/docs/0.3.0/sql-syntax/urls"},next:{title:"Virtual Warehouse Configuration",permalink:"/docs/0.3.0/admin-guides/virtual-warehouse-configuration"}},l={},u=[{value:"Objectives",id:"objectives",level:2},{value:"Worker Nodes",id:"worker-nodes",level:2},{value:"Worker Groups",id:"worker-groups",level:2},{value:"Virtual Warehouses",id:"virtual-warehouses",level:2},{value:"Scheduling Processes",id:"scheduling-processes",level:2},{value:"SELECT Query Scheduling Process",id:"select-query-scheduling-process",level:3},{value:"INSERT Query Scheduling Process",id:"insert-query-scheduling-process",level:3},{value:"Background Task Scheduling Process",id:"background-task-scheduling-process",level:3},{value:"High Availability &amp; Compatible Upgrades",id:"high-availability--compatible-upgrades",level:2},{value:"Elastic Sharing of Computational Resources",id:"elastic-sharing-of-computational-resources",level:2}],c={toc:u},d="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"resource-manager"},"Resource Manager"),(0,o.kt)("p",null,"The Resource Manager (RM) component is responsible for the unified management and scheduling of ByConity's computational resources. It is a core component for achieving resource elasticity and improving resource utilization."),(0,o.kt)("h2",{id:"objectives"},"Objectives"),(0,o.kt)("p",null,"The key design objectives of the ByConity Resource Manager are as follows:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Manage and schedule computational resources to enhance resource utilization."),(0,o.kt)("li",{parentName:"ol"},"Collect monitoring data from computational groups (VWs) to facilitate resource scheduling based on workload."),(0,o.kt)("li",{parentName:"ol"},"Provide scheduling capabilities for queries, INSERT operations, and various background tasks."),(0,o.kt)("li",{parentName:"ol"},"Coordinate different VWs and dynamically allocate resources among them."),(0,o.kt)("li",{parentName:"ol"},"Implement resource pooling and elastic scaling functionality.")),(0,o.kt)("p",null,"To achieve these objectives, we hierarchically classify and manage the computational resources."),(0,o.kt)("h2",{id:"worker-nodes"},"Worker Nodes"),(0,o.kt)("p",null,"As explained in the ",(0,o.kt)("a",{parentName:"p",href:"../introduction/main-principle-concepts"},"Technical Architecture and Principles"),", the smallest computational unit in ByConity's computational resources is a Worker node, which corresponds to a Kubernetes Pod."),(0,o.kt)("p",null,"After a Worker starts, it periodically reports heartbeat information to the RM, including:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Identification information such as WORKER_ID, WORKER_GROUP_ID, VIRTUAL_WAREHOUSE_ID, etc."),(0,o.kt)("li",{parentName:"ul"},"Physical load information such as CPU usage, MEMORY usage, etc."),(0,o.kt)("li",{parentName:"ul"},"Query load information such as the number of running queries, the number of queued queries, etc.")),(0,o.kt)("p",null,"The RM maintains and updates the status of each Worker in real-time. When processing queries, it routes and schedules queries based on the Worker's identification and load information."),(0,o.kt)("h2",{id:"worker-groups"},"Worker Groups"),(0,o.kt)("p",null,"A Worker Group (WG) represents the computational resources used to process a query request. It corresponds to a Kubernetes StatefulSet."),(0,o.kt)("p",null,"A Worker Group consists of multiple Workers, and each Worker's identity includes a WORKER_GROUP_ID that indicates which Worker Group it belongs to. Additionally, by aggregating the load information of all Workers within a Worker Group, we can obtain aggregated load information for the Worker Group, such as average CPU usage, maximum CPU usage, average MEMORY usage, maximum MEMORY usage, etc."),(0,o.kt)("p",null,"There are two types of Worker Groups: Physical and Shared."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A Physical Worker Group is bound to a set of actual physical resources (Kubernetes StatefulSet)."),(0,o.kt)("li",{parentName:"ul"},"A Shared Worker Group, on the other hand, is not bound to physical resources. Instead, it references another Physical Worker Group. A Shared Worker Group has its own unique identification information (WORKER_GROUP_ID), and its load information corresponds to that of the referenced Physical Worker Group.")),(0,o.kt)("p",null,"When managing (creating, deleting, etc.) a Physical Worker Group, in addition to modifying metadata within ByConity, corresponding Kubernetes operations also need to be performed. Managing a Shared Worker Group only requires modifying its metadata since it does not own any physical resources."),(0,o.kt)("h2",{id:"virtual-warehouses"},"Virtual Warehouses"),(0,o.kt)("p",null,"A Virtual Warehouse (VW) consists of multiple identically configured Worker Groups. The VIRTUAL_WAREHOUSE_ID in a Worker's identity indicates which VW it belongs to."),(0,o.kt)("p",null,"There are two types of VWs: Default and Write."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A Default VW is responsible for handling regular SELECT queries from users. It is also known as a Read VW."),(0,o.kt)("li",{parentName:"ul"},"A Write VW handles INSERT queries from users and runs ByConity's background tasks such as Merge and Mutate (link to background tasks).")),(0,o.kt)("p",null,"The separation between Default and Write VWs allows ByConity to easily implement read-write splitting, maximizing query performance."),(0,o.kt)("h2",{id:"scheduling-processes"},"Scheduling Processes"),(0,o.kt)("p",null,"Each ByConity user table must specify its own default VW and write VW. The RM then handles all scheduling tasks for that table: SELECT queries, INSERT queries, background tasks, etc."),(0,o.kt)("h3",{id:"select-query-scheduling-process"},"SELECT Query Scheduling Process"),(0,o.kt)("p",null,"When the Server identifies a query as a SELECT query, it selects a WG from the table's Default VW to process the query."),(0,o.kt)("p",null,(0,o.kt)("img",{src:r(34629).Z,width:"852",height:"232"})),(0,o.kt)("p",null,"In the diagram above, assume the Default VW for the table has two Physical WGs and one Shared WG (pointing to a Physical WG in another VW). Since it's a SELECT query, we need to choose one WG to handle the query. Physical WG 1 has the lowest current load and is selected to process the query."),(0,o.kt)("h3",{id:"insert-query-scheduling-process"},"INSERT Query Scheduling Process"),(0,o.kt)("p",null,"When the Server identifies a query as an INSERT query, it selects a Worker from the table's Write VW to process the query."),(0,o.kt)("p",null,(0,o.kt)("img",{src:r(13799).Z,width:"852",height:"232"})),(0,o.kt)("p",null,"In the diagram above, assume the Write VW for the table has two Physical WGs, each containing three Workers. Since it's an INSERT query, we need to choose one Worker to handle the query. Worker 3 has the lowest current load and is selected to process the query."),(0,o.kt)("h3",{id:"background-task-scheduling-process"},"Background Task Scheduling Process"),(0,o.kt)("p",null,"In addition to handling user queries, the Server also schedules background tasks for the table, such as continuously merging table data in the background to improve query performance."),(0,o.kt)("p",null,(0,o.kt)("img",{src:r(65586).Z,width:"852",height:"204"})),(0,o.kt)("p",null,"In the diagram above, the Server generates a Merge task and selects a Worker from the Write VW to handle it. Worker 3 has the lowest current load and is chosen to execute the Merge task."),(0,o.kt)("h2",{id:"high-availability--compatible-upgrades"},"High Availability & Compatible Upgrades"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"A simple multi-replica master-slave configuration is adopted."),(0,o.kt)("li",{parentName:"ol"},"Workers only send heartbeats to the master node, and the Server only processes requests from the master node."),(0,o.kt)("li",{parentName:"ol"},"If the master node fails, a standby node takes over the service and synchronizes the necessary metadata from the KV database."),(0,o.kt)("li",{parentName:"ol"},"Since the Server has cached information about VWs, WGs, and Workers, even if the RM is temporarily unavailable, the service nodes can continue operating using the cached data.")),(0,o.kt)("h2",{id:"elastic-sharing-of-computational-resources"},"Elastic Sharing of Computational Resources"),(0,o.kt)("p",null,"Scheduling queries and background tasks based on Worker load information helps balance the load within a VW's WGs and Workers. Additionally, we can achieve elastic sharing of resources among VWs by creating appropriate Shared WGs (Shared Computational Groups)."),(0,o.kt)("p",null,"When a Physical WG has a low overall resource utilization, a Shared WG can be created in another VW that requires additional computational resources, pointing to that Physical WG. This allows the Physical WG to be used by queries or tasks from other VWs."),(0,o.kt)("p",null,(0,o.kt)("img",{src:r(34882).Z,width:"852",height:"204"})),(0,o.kt)("p",null,"In the diagram above, within Default VW 1, a Shared WG 3 is created. It does not own any actual physical computational resources but instead points to a Physical WG 6 in another Default VW 3. Shared WG 3 has the same load information as Physical WG 6. When making scheduling decisions in Default VW 1, it can choose Shared WG 3 (or one of its Workers) to handle SELECT queries (or INSERT queries, background tasks). Ultimately, the queries or background tasks are routed to Physical WG 6 for processing."))}h.isMDXComponent=!0},13799:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/boxcn1vUjQxIvpWIT2zplXffgyg-89083ddae792a9be640450d97ec50add.png"},65586:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/boxcnHyC6wY1ypvpTr7TkWHtLng-26c8a7ee98d824e6a5d8a77abf07927d.png"},34629:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/boxcnbZbcFxobIoWtbHHOFEBuAd-1d14622bd55e66a3f8046e5ef7c268b7.png"},34882:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/boxcnwYSsOLigmR3d9nblBrpLFg-6bdf100b7fb1d9918fb538140f27616e.png"}}]);