"use strict";(self.webpackChunkbyconity=self.webpackChunkbyconity||[]).push([[534],{9613:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(9496);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),s=p(r),m=a,h=s["".concat(c,".").concat(m)]||s[m]||d[m]||o;return r?n.createElement(h,i(i({ref:t},u),{},{components:r})):n.createElement(h,i({ref:t},u))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[s]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8765:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=r(4778),a=(r(9496),r(9613));const o={},i=void 0,l={unversionedId:"basic-guide/docker-wrapper",id:"basic-guide/docker-wrapper",title:"docker-wrapper",description:"---",source:"@site/docs/basic-guide/docker-wrapper.mdx",sourceDirName:"basic-guide",slug:"/basic-guide/docker-wrapper",permalink:"/docs/basic-guide/docker-wrapper",draft:!1,editUrl:"https://github.com/ByConity/byconity.github.io/tree/main/docs/basic-guide/docker-wrapper.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Docker Playground",permalink:"/docs/basic-guide/docker-playground"},next:{title:"Monitor Cluster",permalink:"/docs/basic-guide/monitoring"}},c={},p=[],u={toc:p},s="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(s,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("hr",null),(0,a.kt)("p",null,"title: Deploy ByConity to physical servers with a docker wrapper\ntags:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Docs")),(0,a.kt)("hr",null),(0,a.kt)("h1",{id:"deploy-byconity-to-physical-servers-with-a-docker-wrapper"},"Deploy ByConity to physical servers with a docker wrapper"),(0,a.kt)("p",null,"The current way to deploy ByConity to physical servers is deployed via a docker wrapper.\nThe docker wrapper image can be upgraded by following this ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ByConity/ByConity/tree/master/docker/executable_wrapper/Update_docker_image.md"},"guide"),". Please follow the below steps:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Deploy ",(0,a.kt)("a",{parentName:"li",href:"https://apple.github.io/foundationdb/"},"Foundation")," database. You can refer to the installation guide ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/ByConity/ByConity/tree/master/docker/executable_wrapper/FDB_installation.md"},"here"),". After this step will have a ",(0,a.kt)("strong",{parentName:"li"},"fdb cluster config")," file default located in ",(0,a.kt)("inlineCode",{parentName:"li"},"/etc/foundationdb/fdb.cluster"),". Copy this file to ",(0,a.kt)("inlineCode",{parentName:"li"},"./config/fdb.clsuter")),(0,a.kt)("li",{parentName:"ul"},"Deploy an HDFS cluster consist of name node and data node, and create the directory ",(0,a.kt)("inlineCode",{parentName:"li"},"/user/clickhouse")," in HDFS for store data. You can refer to the installation guide ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/ByConity/ByConity/tree/master/docker/executable_wrapper/HDFS_installation.md"},"here"),". After this step, you got the name node url which ussually the value of ",(0,a.kt)("inlineCode",{parentName:"li"},"fs.defaultFS")," that you can find in the ",(0,a.kt)("inlineCode",{parentName:"li"},"core-site.xml")," config. "),(0,a.kt)("li",{parentName:"ul"},"Update file ",(0,a.kt)("inlineCode",{parentName:"li"},"config/cnch_config.xml"),": ",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Update the value of ",(0,a.kt)("inlineCode",{parentName:"li"},"hdfs_nnproxy")," tag to your hdfs namenode url. "),(0,a.kt)("li",{parentName:"ul"},"Update the ",(0,a.kt)("inlineCode",{parentName:"li"},"host")," tag inside ",(0,a.kt)("inlineCode",{parentName:"li"},"service_discovery")," tags with the approprate address, ussually the ip address of the machine where you plan to install ByConity"))),(0,a.kt)("li",{parentName:"ul"},"Execute ",(0,a.kt)("inlineCode",{parentName:"li"},"make image_pull")," to pull the docker image to your local"),(0,a.kt)("li",{parentName:"ul"},"For the machine you plan to deploy TSO, execute ./run.sh tso to run tso. And in the same way, go the other machine where you plan to run other component and execute below command to make it run."),(0,a.kt)("li",{parentName:"ul"},"Execute ",(0,a.kt)("inlineCode",{parentName:"li"},"./run.sh server")," on 1 machine to run server"),(0,a.kt)("li",{parentName:"ul"},"Execute ",(0,a.kt)("inlineCode",{parentName:"li"},"./run.sh read_worker")," on 1 machine to run read worker. You can have many workers by repeated this command on different machines. And add the workers info in ",(0,a.kt)("inlineCode",{parentName:"li"},"service_discovery")," tags in ",(0,a.kt)("inlineCode",{parentName:"li"},"config/cnch_config.xml")," so that server can know them."),(0,a.kt)("li",{parentName:"ul"},"Execute ",(0,a.kt)("inlineCode",{parentName:"li"},"./run.sh write_worker")," on 1 machine to run write worker"),(0,a.kt)("li",{parentName:"ul"},"Execute ",(0,a.kt)("inlineCode",{parentName:"li"},"./run.sh dm")," on 1 machine to run daemon manager. TSO and DM are light weight services and can be run in the same machine with server or worker for resource efficient."),(0,a.kt)("li",{parentName:"ul"},"Execute ",(0,a.kt)("inlineCode",{parentName:"li"},"./run.sh cli")," on the machine that run server or ",(0,a.kt)("inlineCode",{parentName:"li"},"./run.sh cli2 {server_address}")," from any machine to connect to server using clickhouse-cli interface."),(0,a.kt)("li",{parentName:"ul"},"To stop any component execute ",(0,a.kt)("inlineCode",{parentName:"li"},"./run.sh stop {component_name}")," where ",(0,a.kt)("inlineCode",{parentName:"li"},"component_name")," can be ",(0,a.kt)("inlineCode",{parentName:"li"},"tso"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"server"),", .... After you stop if you want to run again then use ",(0,a.kt)("inlineCode",{parentName:"li"},"./run.sh start {component_name}")," otherwise you have got an error about container already in use from ",(0,a.kt)("inlineCode",{parentName:"li"},"docker"),".")))}d.isMDXComponent=!0}}]);