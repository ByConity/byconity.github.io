"use strict";(self.webpackChunkbyconity=self.webpackChunkbyconity||[]).push([[3271],{49613:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var r=a(59496);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=r.createContext({}),l=function(e){var t=r.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(a),m=n,h=d["".concat(c,".").concat(m)]||d[m]||p[m]||i;return a?r.createElement(h,o(o({ref:t},u),{},{components:a})):r.createElement(h,o({ref:t},u))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:n,o[1]=s;for(var l=2;l<i;l++)o[l]=a[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},88361:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=a(64778),n=(a(59496),a(49613));const i={title:"Technical Architecture and Principles",sidebar_position:2,tags:["Docs"]},o="Technical Architecture and Principles",s={unversionedId:"introduction/main-principle-concepts",id:"introduction/main-principle-concepts",title:"Technical Architecture and Principles",description:"Technical Architecture",source:"@site/docs/introduction/main-principle-concepts.mdx",sourceDirName:"introduction",slug:"/introduction/main-principle-concepts",permalink:"/docs/introduction/main-principle-concepts",draft:!1,editUrl:"https://github.com/ByConity/byconity.github.io/tree/main/docs/introduction/main-principle-concepts.mdx",tags:[{label:"Docs",permalink:"/docs/tags/docs"}],version:"current",sidebarPosition:2,frontMatter:{title:"Technical Architecture and Principles",sidebar_position:2,tags:["Docs"]},sidebar:"tutorialSidebar",previous:{title:"What is ByConity",permalink:"/docs/introduction/what-is-byconity"},next:{title:"Features and Capabilities",permalink:"/docs/introduction/features-and-capabilities"}},c={},l=[{value:"Technical Architecture",id:"technical-architecture",level:2},{value:"Service Access Layer",id:"service-access-layer",level:3},{value:"Computation Layer",id:"computation-layer",level:3},{value:"Data Storage Layer",id:"data-storage-layer",level:3},{value:"Interaction Principles",id:"interaction-principles",level:2}],u={toc:l},d="wrapper";function p(e){let{components:t,...i}=e;return(0,n.kt)(d,(0,r.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"technical-architecture-and-principles"},"Technical Architecture and Principles"),(0,n.kt)("h2",{id:"technical-architecture"},"Technical Architecture"),(0,n.kt)("p",null,"ByConity can be broadly divided into three layers: the service access layer, the computation layer, and the storage layer. The service access layer responds to user queries, the computation layer is responsible for data computation, and the storage layer stores user data."),(0,n.kt)("p",null,(0,n.kt)("img",{src:a(8765).Z,width:"1093",height:"806"})),(0,n.kt)("center",null,"Figure 1: ByConity Technical Architecture"),(0,n.kt)("h3",{id:"service-access-layer"},"Service Access Layer"),(0,n.kt)("p",null,"The service access layer of ByConity receives user queries. It first parses the queries and generates efficient execution plans by combining metadata information obtained from the Catalog API. Then, it acquires available computing resources through the Resource Manager and schedules the query plans to appropriate computing nodes (e.g., those with caches) for execution."),(0,n.kt)("p",null,"The service access layer consists of one or more servers and supports horizontal scaling. It plays the role of responding to user services and coordinating scheduling. In addition to user jobs, ByConity also has background tasks such as compaction/garbage collection, which are scheduled by the Daemon Manager to the corresponding servers for execution."),(0,n.kt)("p",null,"The query optimizer is one of the core components of the ByConity system. An excellent optimizer can significantly improve query performance, especially in complex query scenarios where it can bring several times to hundreds of times performance improvement. ByConity's self-developed optimizer provides ultimate optimization capabilities based on three directions: rule-based optimization (RBO), cost-based optimization (CBO), and data dependency-based optimization (DBO)."),(0,n.kt)("h3",{id:"computation-layer"},"Computation Layer"),(0,n.kt)("p",null,"The computation layer of ByConity consists of one or more compute groups, allowing different tenants to achieve physical resource isolation using different compute groups. The Resource Manager is responsible for unified management and scheduling of computing resources. It collects performance data and resource usage information from each compute group, dynamically allocates resources for queries, writes, and background tasks, and performs dynamic scaling to improve resource utilization."),(0,n.kt)("p",null,"A compute group comprises multiple Workers. Each Worker receives a Plan Segment, drives its execution, reads data from data sources, and distributes it to downstream nodes according to shuffle rules. Plan Segments containing exchange inputs wait for upstream data and continue to shuffle data to various nodes if necessary. After multiple stages are completed, the results are returned to the server."),(0,n.kt)("h3",{id:"data-storage-layer"},"Data Storage Layer"),(0,n.kt)("p",null,"Both metadata and data in ByConity achieve storage-computation separation. Metadata is stored in a distributed key-value store, while data is stored in a distributed file system or object storage."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Metadata Storage:"),(0,n.kt)("p",{parentName:"li"},"ByConity's metadata storage is based on a high-performance distributed key-value store (FoundationDB), implementing a set of generic Catalog APIs. This allows the backend to be pluggable and facilitates expansion and adaptation to other KV storages. ByConity also implements complete transaction semantics (ACID) on top of the Catalog APIs, providing efficient and reliable metadata services and ensuring high data quality.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Data Storage:"),(0,n.kt)("p",{parentName:"li"},"ByConity uses cloud storage services such as HDFS or S3 as the data storage layer to store actual data, indexes, and other content. The data files of data tables are stored in a remote unified distributed storage system, separate from the compute nodes. ByConity implements a generic Virtual File System API on top of the remote distributed storage system, facilitating underlying expansion and adaptation to different storage backends such as HDFS, Amazon S3, Google Cloud Storage, Azure Blob Storage, Alibaba Cloud Object Storage, and more. Similar to mainstream analytical data, ByConity adopts a columnar storage format to reduce unnecessary data IO and improve query performance. It also efficiently compresses data to reduce storage costs. In addition, for continuously stored columnar data, ByConity further enhances query performance through vectorized execution technology."))),(0,n.kt)("h2",{id:"interaction-principles"},"Interaction Principles"),(0,n.kt)("p",null,"The following diagram illustrates the component interactions in ByConity. We will analyze its interactions across various components through the complete lifecycle of a SQL query. The dashed line in the figure represents the inflow of a SQL query, the bidirectional arrows indicate interactions within components, and the unidirectional arrows represent data processing and output to the client."),(0,n.kt)("p",null,(0,n.kt)("img",{src:a(93452).Z,width:"2148",height:"2032"})),(0,n.kt)("center",null,"Figure 2: ByConity Interaction Principles"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"The client submits a Query request to the Server. The Server first performs parsing, then generates a more efficient executable plan (Plan Segment) through analysis (Analyzer) and optimization (Optimizer). This process involves reading metadata from a distributed KV store. ByConity uses FoundationDB and reads metadata through the Catalog.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"ByConity submits the executable plan generated through analysis and optimization to the Plan Scheduler. The scheduler accesses the Resource Manager to obtain idle computing resources and determines which nodes (Workers) to schedule the query task to for execution.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"The Query request is ultimately executed on ByConity's Workers. The Workers read data from the underlying cloud storage (Cloud Storage) and perform computations by establishing pipelines. Finally, the computation results from multiple Workers are aggregated through the Server and returned to the client.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"ByConity also has two main components: the Time-stamp Oracle and the Daemon Manager. The former supports transaction processing in ByConity, while the latter manages and schedules background tasks."))))}p.isMDXComponent=!0},8765:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/ByConity-technical-architecture-bcb2cde3e9e7b9eb0ffa7579ad51a1cc.png"},93452:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/boxcnCarlKKAt0hSPtXFOpfmo7c-0ccafc19db764b56b10032d5442c6b7d.png"}}]);