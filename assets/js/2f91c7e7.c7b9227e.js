"use strict";(self.webpackChunkbyconity=self.webpackChunkbyconity||[]).push([[5314],{9613:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>y});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,y=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(y,i(i({ref:t},s),{},{components:n})):r.createElement(y,i({ref:t},s))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[d]="string"==typeof e?e:a,i[1]=p;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7044:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var r=n(4778),a=(n(9496),n(9613));const o={title:"Deploy ByConity to physical servers with a docker wrapper",tags:["Docs"]},i="Deploy ByConity to physical servers with a docker wrapper",p={unversionedId:"deployment/docker-wrapper",id:"deployment/docker-wrapper",title:"Deploy ByConity to physical servers with a docker wrapper",description:"The current way to deploy ByConity to physical servers is deployed via a docker wrapper.",source:"@site/docs/deployment/04-docker-wrapper.mdx",sourceDirName:"deployment",slug:"/deployment/docker-wrapper",permalink:"/docs/deployment/docker-wrapper",draft:!1,editUrl:"https://github.com/ByConity/byconity.github.io/tree/main/docs/deployment/04-docker-wrapper.mdx",tags:[{label:"Docs",permalink:"/docs/tags/docs"}],version:"current",sidebarPosition:4,frontMatter:{title:"Deploy ByConity to physical servers with a docker wrapper",tags:["Docs"]},sidebar:"tutorialSidebar",previous:{title:"Package Deployment",permalink:"/docs/deployment/package-deployment"},next:{title:"FoundationDB Installation",permalink:"/docs/deployment/foundationdb-installation"}},l={},c=[],s={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"deploy-byconity-to-physical-servers-with-a-docker-wrapper"},"Deploy ByConity to physical servers with a docker wrapper"),(0,a.kt)("p",null,"The current way to deploy ByConity to physical servers is deployed via a docker wrapper.\nYou can build the docker wrapper image from source code by following this ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ByConity/ByConity/blob/master/docker/executable_wrapper/README.md"},"guide"),". "),(0,a.kt)("p",null,"Please follow the below steps:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Checkout the config files and shell file from the ByConity repo ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ByConity/ByConity/tree/master/docker/executable_wrapper"},"https://github.com/ByConity/ByConity/tree/master/docker/executable_wrapper"),". ")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Deploy ",(0,a.kt)("a",{parentName:"p",href:"https://apple.github.io/foundationdb/"},"Foundation")," database. You can refer to the installation guide ",(0,a.kt)("a",{parentName:"p",href:"./foundationdb-installation"},"here"),". After this step you will have a ",(0,a.kt)("strong",{parentName:"p"},"fdb cluster config")," file default located in ",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/foundationdb/fdb.cluster"),". Copy this file to ",(0,a.kt)("inlineCode",{parentName:"p"},"./config/fdb.clsuter"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Deploy an HDFS cluster consist of name node and data node, and create the directory ",(0,a.kt)("inlineCode",{parentName:"p"},"/user/clickhouse")," in HDFS for store data. You can refer to the installation guide ",(0,a.kt)("a",{parentName:"p",href:"./hdfs-installation"},"here"),". After this step, you got the name node url which ussually the value of ",(0,a.kt)("inlineCode",{parentName:"p"},"fs.defaultFS")," that you can find in the ",(0,a.kt)("inlineCode",{parentName:"p"},"core-site.xml")," config. ")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Update file ",(0,a.kt)("inlineCode",{parentName:"p"},"config/cnch_config.xml"),": "),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Update the value of ",(0,a.kt)("inlineCode",{parentName:"li"},"hdfs_nnproxy")," tag to your hdfs namenode url. "),(0,a.kt)("li",{parentName:"ul"},"Update the ",(0,a.kt)("inlineCode",{parentName:"li"},"host")," tag inside ",(0,a.kt)("inlineCode",{parentName:"li"},"service_discovery")," tags with the approprate address, ussually the ip address of the machine where you plan to install ByConity"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Execute ",(0,a.kt)("inlineCode",{parentName:"p"},"make image_pull")," to pull the docker image to your local")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"For the machine you plan to deploy TSO, execute ./run.sh tso to run tso. And in the same way, go the other machine where you plan to run other component and execute below command to make it run.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Execute ",(0,a.kt)("inlineCode",{parentName:"p"},"./run.sh server")," on 1 machine to run server")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Execute ",(0,a.kt)("inlineCode",{parentName:"p"},"./run.sh read_worker")," on 1 machine to run read worker. You can have many workers by repeated this command on different machines. And add the workers info in ",(0,a.kt)("inlineCode",{parentName:"p"},"service_discovery")," tags in ",(0,a.kt)("inlineCode",{parentName:"p"},"config/cnch_config.xml")," so that server can know them.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Execute ",(0,a.kt)("inlineCode",{parentName:"p"},"./run.sh write_worker")," on 1 machine to run write worker")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Execute ",(0,a.kt)("inlineCode",{parentName:"p"},"./run.sh dm")," on 1 machine to run daemon manager. TSO and DM are light weight services and can be run in the same machine with server or worker for resource efficient.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Execute ",(0,a.kt)("inlineCode",{parentName:"p"},"./run.sh cli")," on the machine that run server or ",(0,a.kt)("inlineCode",{parentName:"p"},"./run.sh cli2 {server_address}")," from any machine to connect to server using clickhouse-cli interface.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"To stop any component execute ",(0,a.kt)("inlineCode",{parentName:"p"},"./run.sh stop {component_name}")," where ",(0,a.kt)("inlineCode",{parentName:"p"},"component_name")," can be ",(0,a.kt)("inlineCode",{parentName:"p"},"tso"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"server"),", .... After you stop if you want to run again then use ",(0,a.kt)("inlineCode",{parentName:"p"},"./run.sh start {component_name}")," otherwise you have got an error about container already in use from ",(0,a.kt)("inlineCode",{parentName:"p"},"docker"),"."))))}u.isMDXComponent=!0}}]);